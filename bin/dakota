#!/usr/bin/perl -w
# -*- mode: cperl -*-
# -*- cperl-close-paren-offset: -2 -*-
# -*- cperl-continued-statement-offset: 2 -*-
# -*- cperl-indent-level: 2 -*-
# -*- cperl-indent-parens-as-block: t -*-
# -*- cperl-tab-always-indent: t -*-
# -*- tab-width: 2
# -*- indent-tabs-mode: nil

# Copyright (C) 2007-2015 Robert Nielsen <robert@dakota.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;
use warnings;
use sort 'stable';
use Cwd;

my $gbl_prefix;
my $gbl_compiler;
my $so_ext;
my $o_ext;
my $nl = "\n";

sub dk_prefix {
  my ($path) = @_;
  $path =~ s|//+|/|;
  $path =~ s|/\./+|/|;
  $path =~ s|^./||;
  if (-d "$path/bin" && -d "$path/lib") {
    return $path
  } elsif ($path =~ s|^(.+?)/+[^/]+$|$1|) {
    &dk_prefix($path);
  } else {
    die "Could not determine \$prefix from executable path $0: $!\n";
  }
}

BEGIN {
  $gbl_prefix = &dk_prefix($0);
  unshift @INC, "$gbl_prefix/lib";
};
#use Carp; $SIG{ __DIE__ } = sub { Carp::confess( @_ ) };

use dakota::dakota;
use dakota::parse;
use dakota::util;

my ( $id,  $mid,  $bid,  $tid,
    $rid, $rmid, $rbid, $rtid) = &ident_regex();

$gbl_compiler = do "$gbl_prefix/lib/dakota/compiler/command-line.json"
  or die "do $gbl_prefix/lib/dakota/compiler/command-line.json failed: $!\n";
{
  my $platform = do "$gbl_prefix/lib/dakota/platform.json"
    or die "do $gbl_prefix/lib/dakota/platform.json failed: $!\n";
  my ($key, $values);
  while (($key, $values) = each (%$platform)) {
    $$gbl_compiler{$key} = $values;
  }
  $so_ext = &dakota::util::var($gbl_compiler, 'so_ext', 'so'); # default dynamic shared object/library extension
  $o_ext =  &dakota::util::var($gbl_compiler, 'o_ext', 'o'); # could be .bc or .lto
}
use Data::Dumper;
$Data::Dumper::Terse     = 1;
$Data::Dumper::Deepcopy  = 1;
$Data::Dumper::Purity    = 1;
$Data::Dumper::Quotekeys = 1;
$Data::Dumper::Indent    = 1; # default = 2

use Getopt::Long;
$Getopt::Long::ignorecase = 0;

my $root_cmd = { 'reps' => [],
                 'inputs' => [],
                 'opts' => { 'directory' => [],
                             'include-directory' => [ "$gbl_prefix/include" ],
                             'library-directory' => [],
                             'library' => [],
                             'define-macro' => [],
                             'var' => {} } };

&GetOptions($$root_cmd{'opts'},
            'compile',              # gcc-like
            'dynamic',              # gcc-like
            'output=s',             # gcc-like
            'precompile',           # gcc-ish (--compile)
            'project=s',
            'shared',               # gcc-like

            'clean',                # make target like
            'define-macro=s',       # gcc-like
            'directory=s',          # make-like
            'include-directory=s',  # gcc-like (--include-directory=<> OR -I<>)
            'keep-going',           # make-like
            'library-directory=s',  # gcc-like (--library-directory=<> OR -L<>)
            'library=s',            # --library libdl.so equivalent to -ldl (or better -l:libdl.so on linux)
            'echo-inputs',          #
            'silent',               #
            'soname=s',             # ld-like (-soname <>)
            'var=s',                # for env vars like MAKEFLAGS, etc.
           #'compiler-flags=s',     # similiar to env vars CXXFLAGS & EXTRA_CXXFLAGS
           #'compiler=s',           # similiar to env var CXX
           #'environment-overrides' # make-like
           #'for-compiler=s',       # gcc-like (--for-linker <>)
           #'for-linker=s',         # gcc-like
           #'jobs'                  # make-like
           #'linker-flags=s',       # similiar to env vars LDFLAGS & EXTRA_LDFLAGS
           #'linker=s',             # similiar to env var LD
           #'pie'                   # ld-like
           #'runpath=s',            # gcc-like (--for-linker -R|-rpath --for-linker <>), ld-like (-R|-rpath <>)
           #'touch'                 # make-like
           );
# --quiet
# --help
# --verbose

# 1/1: one  input,  one output
# 1/0: one  input,  no  output
# m/0: many inputs, no  output
# m/1: many inputs, one output (directory)

my $libdakota_core_bit = 0x1;
my $libdakota_bit =      0x2;
my $dkt_exclude_libs = 0;
$dkt_exclude_libs = $ENV{'DKT_EXCLUDE_LIBS'} if $ENV{'DKT_EXCLUDE_LIBS'};

if ($$root_cmd{'opts'}{'precompile'}) {
  $ENV{'DKT_PRECOMPILE'} = 1;
}
my $inputs = &clean_paths(\@ARGV);
my $project;
my $project_io;
my $project_io_path;

# create default project file when missing (when linking)
if (!$$root_cmd{'compile'} && !$$root_cmd{'opts'}{'project'}) {
  $$root_cmd{'opts'}{'project'} = &create_missing_project($root_cmd, $inputs);
}
if ($$root_cmd{'opts'}{'project'}) {
  ($project, $project_io) = &use_project($root_cmd);
}
if ($$root_cmd{'opts'}{'clean'}) {
  &project_clean($root_cmd, $project, $project_io);
  exit 0;
}
if ($project) {
  if (!$$root_cmd{'opts'}{'output'} && $$root_cmd{'opts'}{'compile'}) {
    if (1 == scalar @$inputs && &is_dk_path($$inputs[0])) {
      my $o_path = &o_path_from_dk_path($$inputs[0]);
      $$root_cmd{'opts'}{'output'} = $o_path; # setting default output (compile) path for single .dk input path
    }
  }
  if ($$root_cmd{'opts'}{'output'} && $$root_cmd{'opts'}{'compile'}) {
    if (1 == scalar @$inputs && &is_dk_path($$inputs[0])) {
      $$project_io{'compile'}{$$inputs[0]} = $$root_cmd{'opts'}{'output'};
      my $original_state;
      &scalar_to_file($project_io_path, $project_io, $original_state = 1);
    }
  }
}
if (!$$root_cmd{'opts'}{'compile'} && scalar values %{$$project_io{'compile'}}) {
  foreach my $input (@$inputs) {
    if ($$project_io{'compile'}{$input}) {
      delete $$project_io{'compile'}{$input};
    }
  }
  push @$inputs, values %{$$project_io{'compile'}};
  foreach my $input (@{$$project{'inputs'}}) {
    if ($input =~ /\.$so_ext$/) { # is_so_path()
      push @$inputs, $input;
    }
  }
}
$inputs = &clean_paths($inputs);

if (0) {
  my $stuff = {};
  $$stuff{'cwd'} = &getcwd();
  $$stuff{'project-dir'} = &dir_part($$root_cmd{'opts'}{'project'});
  $$stuff{'rel-dir'} = &relpath($$stuff{'project-dir'}, $$stuff{'cwd'});
  #&dmp($stuff);
  my $dir = $$stuff{'rel-dir'};
  if (! $dir) {
    $dir = &getcwd();
  } elsif (! &is_abs($dir)) {
    $dir = &getcwd() . '/' . $dir;
  }
  for (my $i = 0; $i < @{$$root_cmd{'project.inputs'}}; $i++) {
    my $project_input = $$root_cmd{'project.inputs'}[$i];
    if (! &is_abs($project_input)) {
      my $input = $dir . '/' . $project_input;
      if (! -e $input) {
        print STDERR $0 . ': error: no-such-file: ' . $input . $nl;
      }
      $$root_cmd{'project.inputs'}[$i] = $input;
    }
  }
}
if (!$$root_cmd{'opts'}{'compile'} && 1 >= scalar @$inputs) { # only the implied libdakota-core.so
  if (1 >= scalar $$root_cmd{'project.inputs'}) {
    die "$0: error: inputs are requried either in the project file or the command line.\n";
  } else {
    $inputs = $$root_cmd{'project.inputs'};
    $$root_cmd{'inputs'} = [];
  }
}
# should only reorder the .o files (between .so files) leaving the .so files in their
# original position so the inputs should be split into separate sublist (and then sorted).
# its OK to sort the .dk files, but we must link using the original positions.
if (1) {
  if (!$ENV{'DKT_PRECOMPILE'}) {
    $inputs = [sort {&mtime($b) <=> &mtime($a)} @$inputs];
  }
}
$$root_cmd{'inputs'} = [ @$inputs, @{$$root_cmd{'inputs'}} ];
# dakota --compile --output <> {dk}+
# dakota --shared  --output <> {o}+ [build/+rt/<>.o] {so}*
# dakota           --output <> {o}+ [build/+rt/<>.o] {so}*

if (!$$root_cmd{'opts'}{'output'} && !$$root_cmd{'opts'}{'compile'}) {
  $$root_cmd{'opts'}{'output'} = &canon_path(&default_output($root_cmd));
}
if ($$root_cmd{'opts'}{'output'}) {
  $$root_cmd{'opts'}{'output'} = &canon_path($$root_cmd{'opts'}{'output'});
}
if ($$root_cmd{'opts'}{'soname'}) {
  $$root_cmd{'opts'}{'soname'} = &canon_path($$root_cmd{'opts'}{'soname'});
}
$ENV{'CXXFLAGS'} = &dakota::util::var($gbl_compiler, 'CXXFLAGS', undef);

&clean_paths($root_cmd, 'inputs');
&clean_paths($$root_cmd{'opts'}, 'include-directory');
&clean_paths($$root_cmd{'opts'}, 'library-directory');

my $gcc_from_dakota = {
  '--include-directory' => '--include-directory', # yep, the same
  '--define-macro' =>      '--define-macro',      # yep, the same
};

if ($$root_cmd{'opts'}{'include-directory'}) {
  my $flags = '';
  foreach my $dir (@{$$root_cmd{'opts'}{'include-directory'}}) {
    $flags .= ' ' . $$gcc_from_dakota{'--include-directory'} . '=' . $dir;
  }
  $ENV{'CXXFLAGS'} .= $flags;
}
if ($$root_cmd{'opts'}{'define-macro'}) {
  my $flags = '';
  foreach my $mcr (@{$$root_cmd{'opts'}{'define-macro'}}) {
    $flags .= ' ' . $$gcc_from_dakota{'--define-macro'} . '=' . $mcr;
  }
  $ENV{'CXXFLAGS'} .= $flags;
}
if (scalar @{$$root_cmd{'opts'}{'directory'}}) {
  my $initial_workdir = &getcwd();
  foreach my $dir (@{$$root_cmd{'opts'}{'directory'}}) {
    if ($dir ne '.' &&
        $dir ne './') {
      chdir $dir;
      my $current_workdir = &getcwd();
      my $reldir = File::Spec->abs2rel($current_workdir, $initial_workdir);
      $ENV{'DKT_DIR'} = $reldir;
    }
  }
}
my $result = &dakota::dakota::start_cmd($root_cmd);
exit $result;

sub create_missing_project {
  my ($root_cmd, $inputs) = @_;
  if (0 == scalar @$inputs) {
    die "error: missing both --project <file> and input files; at least one is required.";
  }
  $project = { 'output' => undef, 'inputs' => [],
               'builddir' => &builddir() };
  my $project_base;
  my $project_path;

  if ($$root_cmd{'opts'}{'output'}) {
    $$project{'output'} = $$root_cmd{'opts'}{'output'};
    $project_base = $$project{'output'} =~ s/\.$so_ext$//r; # remove ext if present
  } else {
    $project_base = &project_base($inputs);
    if ($$root_cmd{'opts'}{'dynamic'} || $$root_cmd{'opts'}{'shared'}) {
      $$project{'output'} = $project_base . ".$so_ext";
    } else {
      $$project{'output'} = $project_base;
    }
  }
  $project_path =   $project_base . '.project';
  if (-e $project_path) {
    print STDERR $0 . ": info: found $project_path; using for missing --project <>.\n";
    return $project_path;
  } elsif ($$root_cmd{'opts'}{'compile'}) {
    print STDERR $0 . ": warning: missing --project <file> (creating default $project_path).\n";
  } else {
    print STDERR $0 . ": info: missing --project <file> (creating default $project_path).\n";
  }
  # create and write a default project file
  foreach my $input (@$inputs) {
    if ($input =~ m/\.(dk|$so_ext)$/) {
      add_last($$project{'inputs'}, $input);
    } else {
      print __FILE__ . ":" . __LINE__ . ": skipping input $input\n";
    }
  }
  if (0 == $dkt_exclude_libs || $libdakota_bit < $dkt_exclude_libs) {
    my $libdakota = "$gbl_prefix/lib/libdakota.$so_ext";
    #print STDERR 'adding ' . $libdakota . $nl;
    add_last($$project{'inputs'}, $libdakota);
  }
  my $original_state;
  &scalar_to_file($project_path, $project, $original_state = 1);
  return $project_path;
}
sub project_base {
  my ($inputs) = @_;
  my $dk_path = &first_dk_path($inputs);
  my $project_base = $dk_path =~ s/\.dk$//r;
  return $project_base;
}
sub first_dk_path {
  my ($inputs) = @_;
  foreach my $input (@$inputs) {
    if (&is_dk_path($input)) {
      return $input;
    }
  }
  die;
}
sub use_project {
  my ($root_cmd) = @_;
  my $project = &set_global_project($$root_cmd{'opts'}{'project'});
  if (! $$project{'builddir'}) {
    $$project{'builddir'} = &builddir();
  }
  if (! -e $$project{'builddir'}) {
    &make_dir($$project{'builddir'});
  }
  if (0 == $dkt_exclude_libs || $libdakota_core_bit < $dkt_exclude_libs) {
    my $libdakota_core = "$gbl_prefix/lib/libdakota-core.$so_ext";
    #print STDERR 'adding ' . $libdakota_core . $nl;
    &add_first($$root_cmd{'inputs'}, $libdakota_core);
    &add_first($$project{'inputs'}, $libdakota_core);
  }
  $$root_cmd{'project.inputs'} = $$project{'inputs'};
  $$root_cmd{'project.builddir'} = $$project{'builddir'};
  $$root_cmd{'project.output'} = $$project{'output'};
  $$root_cmd{'project.io'} = $$project{'builddir'} . '/' . $$root_cmd{'opts'}{'project'} =~ s/\.project$/\.io/r;
  $project_io_path = $$root_cmd{'project.io'};
  my $original_state;
  if (! -e $project_io_path) {
    # dk2json : $foo{'dk'}{$dk_path}{'json'}{$json_path}
    my $default_project_io = { 'all' => {}, 'compile' => {}, 'inputs' => {},
                               'output' => &canon_path($$project{'output'}), 'builddir' => undef };
    &scalar_to_file($project_io_path, $default_project_io, $original_state = 1);
  }
  $project_io = &scalar_from_file($project_io_path);
  $$project_io{'inputs'} = { map { &canon_path($_) => 1 } @{$$project{'inputs'}} };
  if ($$project{'builddir'}) {
    $$project_io{'builddir'} = &canon_path($$project{'builddir'});
  }
  &scalar_to_file($project_io_path, $project_io, $original_state = 1);
  return ($project, $project_io);
} # use_project
sub project_clean {
  my ($root_cmd, $project, $project_io) = @_;
  my $remove = {};
  # {'all'}{$in}{$out} = 1
  if ($project_io) {
    while (my ($in_path, $out_paths) = each (%{$$project_io{'all'}})) {
      $in_path = &canon_path($in_path);
      foreach my $out_path (keys %$out_paths) {
        if (-e $out_path) {
          $$remove{$out_path} = 1;
        }
      }
      if (! $$project_io{'inputs'}{$in_path}) {
        if (-e $in_path) {
          #$$remove{$in_path} = 1; # too dangerous
        }
      }
    }
    $$project_io{'all'} = {};
    $$project_io{'compile'} = {};
    my $original_state;
    &scalar_to_file($project_io_path, $project_io, $original_state = 1);
  }
  foreach my $path (sort keys %$remove) {
    print "rm $path\n";
    unlink $path;
  }
}
sub default_output {
  my ($root_cmd, $inputs) = @_;
  my $output;
  if ($$root_cmd{'project.output'}) {
    $output = $$root_cmd{'project.output'};
  } else {
    $output = &project_base($inputs);
    if ($$root_cmd{'opts'}{'shared'}) {
      $output .= ".$so_ext";
      print "using implicit lib name: $output\n";
    } else {
      print "using implicit exe name: $output\n";
    }
  }
  return $output;
}
