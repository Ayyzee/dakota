#!/usr/bin/perl -w
# -*- mode: cperl -*-
# -*- cperl-close-paren-offset: -2 -*-
# -*- cperl-continued-statement-offset: 2 -*-
# -*- cperl-indent-level: 2 -*-
# -*- cperl-indent-parens-as-block: t -*-
# -*- cperl-tab-always-indent: t -*-

use strict;
use warnings;

use Getopt::Long;
$Getopt::Long::ignorecase = 0;

my $pair = ' : ';

use Data::Dumper;
$Data::Dumper::Terse     = 1;
$Data::Dumper::Deepcopy  = 1;
$Data::Dumper::Purity    = 1;
$Data::Dumper::Useqq     = 1;
$Data::Dumper::Sortkeys =  1;
$Data::Dumper::Indent =    0;
$Data::Dumper::Pair = $pair;

# gnu make variable assignment operators
# = or := or ::= or ?=

sub is_scalar {
  my ($v) = @_;
  my $result = 0;
  if ('' eq ref($v)) {
    $result = 1;
  }
  return $result;
}
sub is_tbl {
  my ($v) = @_;
  my $result = 0;
  if ('HASH' eq ref($v)) {
    $result = 1;
  }
  return $result;
}
sub is_seq {
  my ($v) = @_;
  my $result = 0;
  if ('ARRAY' eq ref($v)) {
    $result = 1;
  }
  return $result;
}
sub first_char {
  my ($str) = @_;
  return substr($str, 0, 1);
}
sub last_char {
  my ($str) = @_;
  return substr($str, -1, 1);
}
sub is_protected_name {
  my ($name) = @_;
  my $result = 0;
  if (&first_char($name) !~ /[_a-zA-Z]/) {
    $result = 1;
  }
  return 0; # always return false
  #return $result;
}
sub lhs {
  my ($scopes, $prefix) = @_;
  my $result;

  if ($prefix) {
    $result = join('.', ($prefix, @$scopes));
  } else {
    $result = join('.', @$scopes);
  }
  $result = &convert($result);
  return $result;
}
sub prefix {
  my ($opts) = @_;
  my $prefix = $$opts{'prefix'};

  if ($prefix) {
    $prefix =~ s/\s+//g; # warn about whitespace in prefix?
    $prefix = undef if '' eq $prefix;
  }
  return $prefix;
}
sub convert {
  my ($str) = @_;
  my $result = $str;
  if (0) { # never convert
    my $trans_tbl = {
      '\-' => '_',
      '\.' => '_',
      '\/' => '_',
      '\:' => '_',
    };
    while (($a, $b) = each (%$trans_tbl)) {
      $result =~ s|$a+|$b|g;
    }
  }
  return $result;
}
sub is_valid {
  my ($str) = @_;
  my $result = 1; # always return valid
  if ($str =~ /^\w+$/) {
    $result = 1;
  }
  return $result;
}
sub process_tbl {
  my ($data, $opts, $scopes, $out) = @_;

  foreach my $name (sort keys %$data) {
    if (&is_protected_name($name)) {
      next;
    } elsif (!&is_valid(&convert($name))) {
      print STDERR "$0: warning: skipping key $name\n";
      next;
    } else {
      push @$scopes, $name;
      $_ = ref($$data{$name});
      SWITCH: {
          /^HASH$/  and &process_tbl(        $$data{$name}, $opts, $scopes, $out), last SWITCH;
          /^ARRAY$/ and &process_seq_expr(   $$data{$name}, $opts, $scopes, $out), last SWITCH;
                        &process_scalar_expr($$data{$name}, $opts, $scopes, $out);
      }
      pop @$scopes;
    }
  }
}
sub tsv_set {
  my ($opts, $scopes, $out) = @_;
  my $prefix = &prefix($opts);
  if ($prefix) {
    $$out{'tsv'}{$prefix}{&lhs($scopes, undef)} = &lhs($scopes, $prefix);
  }
  my $lhs = &lhs($scopes, $prefix);
  return $lhs;
}
# scalar is member of rhs seq
sub process_scalar {
  my ($data, $opts, $lhs, $out) = @_;
  push @{$$out{'mk'}{$lhs}}, $data;
}
# scalar is rhs of expr (lhs = rhs)
sub process_scalar_expr {
  my ($data, $opts, $scopes, $out) = @_;
  my $lhs = &tsv_set($opts, $scopes, $out);
  $$out{'mk'}{$lhs} = &mydump($data);
}
# seq is rhs of expr (lhs = rhs ...)
sub process_seq_expr {
  my ($data, $opts, $scopes, $out) = @_;
  my $lhs = &tsv_set($opts, $scopes, $out);
  $$out{'mk'}{$lhs} = &mydump($data);

  #foreach my $element (@$data) {
  #  if (&is_scalar($element)) {
  #    #push @{$$out{'mk'}{$lhs}}, $element;
  #    &process_scalar($element, $opts, $lhs, $out);
  #  }
  #}
}
sub mkstr {
  my ($out, $opts) = @_;
  my $result = '';
  foreach my $lhs (sort keys %{$$out{'mk'}}) {
    my $rhs = $$out{'mk'}{$lhs};
    $result .= $lhs . $pair . &mydump($rhs) . "\n";
  }
  return $result;
}
sub mydump {
  my ($ref) = @_;
  my $result = '';
  if (!$ref) {
    $result = 'null';
  } else {
    $result = &Dumper($ref);
  }
  $result =~ s/\\"//g;
  $result =~ s/"//g;
  return $result;
}

sub start {
  my ($argv) = @_;
  my $opts = {};
  my $scopes = [];
  &GetOptions($opts,
              'output=s',
              'prefix=s',
            );
  my $fh;

  if ($$opts{'output'}) {
    open($fh, ">", $$opts{'output'})
      or die "cannot open > $$opts{'output'}: $!";
  } else {
    open($fh, '>&', \*STDOUT)
      or die "cannot open >& STDOUT: $!";
  }
  foreach my $file (@$argv) {
    my $data = do $file or die;
    #print &Dumper($data);
    my $out = { 'mk' => {}, 'tsv' => {}, };
    &process_tbl($data, $opts, $scopes, $out);
    #print &Dumper($out);
    print $fh
      "# generated from $file\n" .
      &mkstr($out);
    #print $fh &tsv($data, $opts, $out);
  }
  close($fh);
  if ($$opts{'output'}) {
    print $$opts{'output'} . "\n";
  }
}
sub install_bnames {
  my ($data) = @_;
  my $result = [];
  foreach my $name (sort keys %{$$data{'install'} ||= {}}) {
    if (!&is_protected_name($name)) {
      if (0 < @{$$data{'install'}{$name}}) {
        push @$result, $name;
      }
    }
  }
  return $result;
}
sub tsv_install{
  my ($data, $key, $prefix) = @_;
  my $result = '';
  #my $output = &lhs(['output'], $prefix);
  my $install_elements = $$data{'install'}{$key};

  for (my $i = 0; $i < @$install_elements; $i++) {
    my $install_element = $$install_elements[$i];
    if (&is_scalar($install_element)) {
      my $info = $$install_elements[$i + 1];
      if (&is_tbl($info)) {
        my ($bname, $name); while (($bname, $name) = each (%$info)) {
          $result .= $install_element . $pair . $bname . ' = ' . $name . "\n";
          $i++;
        }
      }
    }
  }
  return $result;
}
sub tsv {
  my ($data, $opts, $out) = @_;
  #print STDERR &Dumper($out);
  my $prefix = &prefix($opts);
  my $result = '';
  my $output = &lhs(['output'], $prefix);

  if ($$data{'output'}) {
    $result .= "\n";
    $result .= 'output_files' . ' += ' . "\$($output)"  . "\n";

    if ($prefix) {
      $result .= "\n";
      foreach my $bname (sort keys %{$$out{'tsv'}{$prefix}}) {
        my $name = $$out{'tsv'}{$prefix}{$bname};
        $result .= "\$($output)" . $pair . $bname . ' = ' . "\$($name)" . "\n";
      }
    }
  }
  if ($$data{'install'}) {
    my $install = &lhs(['install'], $prefix);
    $result .=  "\n";
    $result .= $install . ' =';

    for my $name (@{&install_bnames($data)}) {
      my $var = &lhs(['install', $name], $prefix);
      $result .= ' ' . "\$($var)";
    }
    $result .=  "\n";
    $result .=  "\n";
    $result .= 'install_files' . ' += ' . "\$($install)" . "\n";
    my $bnames = &install_bnames($data);
    if (0 < @$bnames) {
      $result .= "\n";
      foreach my $name (@$bnames) {
        $result .= &tsv_install($data, $name, $prefix);
      }
    }
  }
  if ($$data{'output'}) {
    $result .= "\n";
    $result .= 'all' . $pair . "\$($output)" . "\n"; # must be first target
    $result .= "\n";
    $result .= "\$($output)" . ' :';

    for my $name ('srcs', 'libs') {
      my $var = &lhs([$name], $prefix);
      $result .= ' ' . "\$($var)";
    }
    $result .=  "\n";
  }
  #print STDERR $result;
  return $result;
}
unless (caller) {
  &start(\@ARGV);
}
