#!/usr/bin/perl -w
# -*- mode: cperl -*-
# -*- cperl-close-paren-offset: -2 -*-
# -*- cperl-continued-statement-offset: 2 -*-
# -*- cperl-indent-level: 2 -*-
# -*- cperl-indent-parens-as-block: t -*-
# -*- cperl-tab-always-indent: t -*-

use strict;
use warnings;

use Getopt::Long;
$Getopt::Long::ignorecase = 0;

use Data::Dumper;
$Data::Dumper::Terse =    1;
$Data::Dumper::Useqq =    1;
$Data::Dumper::Sortkeys = 1;

sub start {
  my ($argv) = @_;
  my $result = '';

  my $opts = {};
  &GetOptions($opts,
              'output=s',
              'prefix=s',
            );
  foreach my $file (@$argv) {
    my $data = do $file or die;
    $result .= "# $file\n";
    my $last_char = &last_char($result);
    $result .= &process($last_char, $data, $opts);
    #$result .= $last_char = "\n" if ("\n" ne $last_char);
  }
  my $fh;

  if ($$opts{'output'}) {
    open($fh, ">", $$opts{'output'})
      or die "cannot open > $$opts{'output'}: $!";
  } else {
    open($fh, '>&', \*STDOUT)
      or die "cannot open >& STDOUT: $!";
  }
  print $fh $result;
  close($fh);
}
sub process {
  my ($last_char, $data, $opts) = @_;
  my $result = '';
  $_ = ref($data);

  SWITCH: {
    /^HASH$/  and $result .= &process_tbl($last_char, $data, $opts), last SWITCH;
    /^ARRAY$/ and $result .= &process_seq($last_char, $data, $opts), last SWITCH;
    $result .= &process_scalar($last_char, $data, $opts);
  }
  return $result;
}
sub first_char {
  my ($str) = @_;
  return substr($str, 0, 1);
}
sub last_char {
  my ($str) = @_;
  return substr($str, -1, 1);
}
sub is_protected_name {
  my ($name) = @_;
  my $result = 0;
  my $first_char = &first_char($name);

  if ($first_char !~ m/[_a-zA-Z]/) {
    $result = 1;
  }
  return $result;
}
sub process_tbl {
  my ($last_char, $data, $opts) = @_;
  my $result = '';
  my ($name, $values);

  foreach my $name (sort keys %$data) {
    if (&is_protected_name($name)) {
      next;
    } else {
      my $legal_name = $name; $legal_name =~ s/-/_/g;

      if ($legal_name !~ /^\w+$/) {
        next;
      } else {
        #$result .= $last_char = "\n" if ("\n" ne $last_char);
        my $prefix = $$opts{'prefix'} ||= '';
        my $legal_prefix = $prefix; $legal_prefix =~ s/-/_/g;
        $result .= "$legal_prefix$legal_name =";
        $last_char = &last_char($result);
        $result .= &process($last_char, $$data{$name}, $opts);
        $last_char = &last_char($result);
        $result .= $last_char = "\n" if ("\n" ne $last_char);
      }
    }
  }
  return $result;
}
sub process_seq {
  my ($last_char, $data, $opts) = @_;
  my $result = '';

  foreach my $value (@$data) {
    $result .= &process($last_char, $value, $opts);
    $last_char = &last_char($result);
  }
  $result .= $last_char = "\n" if ("\n" ne $last_char);
  return $result;
}
sub process_scalar {
  my ($last_char, $data, $opts) = @_;
  my $result = '';
  #$data = $data ||= '';
  $result .= $last_char = ' ' if (' ' ne $last_char);
  $result .= $data;
  return $result;
}
unless (caller) {
  &start(\@ARGV);
}
