#!/usr/bin/perl -w
# -*- mode: cperl -*-
# -*- cperl-close-paren-offset: -2 -*-
# -*- cperl-continued-statement-offset: 2 -*-
# -*- cperl-indent-level: 2 -*-
# -*- cperl-indent-parens-as-block: t -*-
# -*- cperl-tab-always-indent: t -*-

use strict;
use warnings;
use sort 'stable';
use Cwd;
use File::Which;

my $gbl_prefix;
my $nl = "\n";

sub dk_prefix {
  my ($path) = @_;
  $path =~ s|//+|/|;
  $path =~ s|/\./+|/|;
  $path =~ s|^./||;
  if (-d "$path/bin" && -d "$path/lib") {
    return $path
  } elsif ($path =~ s|^(.+?)/+[^/]+$|$1|) {
    &dk_prefix($path);
  } else {
    die "Could not determine \$prefix from executable path $0: $!" . $nl;
  }
}

BEGIN {
  $gbl_prefix = &dk_prefix($0);
  unshift @INC, "$gbl_prefix/lib";
};
use Carp; $SIG{ __DIE__ } = sub { Carp::confess( @_ ) };

use dakota::dakota;
use dakota::parse;
use dakota::util;

use Data::Dumper;
$Data::Dumper::Terse =     1;
$Data::Dumper::Deepcopy =  1;
$Data::Dumper::Purity =    1;
$Data::Dumper::Useqq =     1;
$Data::Dumper::Sortkeys =  1;
$Data::Dumper::Indent =    1;   # default = 2

sub cmd_info_from_argv {
  my ($argv) = @_;
  my $cmd_info = &get_opts_from_array($argv,
                                      'path-only',
                                      'var=s',
                                    );
  $$cmd_info{'inputs'} = $argv;
  return $cmd_info;
}
sub gen_dot {
  my ($rules) = @_;
  my $result = '';
  $result .= "digraph {" . $nl;
  $result .= "  graph [ rankdir = LR, dir = back, nodesep = 0 ];" . $nl;
  $result .= "  node  [ shape = rect, style = rounded, height = 0, width = 0 ];" . $nl;
  $result .= $nl;
  $result .= &gen_dot_body($rules);
  $result .= "}" . $nl;
  if (1) { # hack to make the graph less noisy
    my $dir = $ENV{'HOME'};
    $result =~ s#"$dir/#"#g;
    $result =~ s#\.dkt$dir#.dkt#g;
  }
  return $result;
}
sub gen_dot_body {
  my ($rules) = @_;
  my $result = '';
  $result .= &gen_dot_body_nodes($rules);
  $result .= $nl;
  $result .= &gen_dot_body_edges($rules);
  return $result;
}
sub gen_dot_body_nodes {
  my ($rules) = @_;
  my $result = '';
  my $target_hdr_path = &target_hdr_path();
  my $target_src_path = &target_src_path();
  my $target_o_path =   &target_o_path();
  my $nodes = {};
  my $path = $$rules[0][0][0];
  my $name = &basename($path);
  $result .= "  \"$path\" [ label = \"$name\", color = green ];" . $nl;
  $$nodes{$path} = 1;
  for (my $i = 0; $i < scalar @$rules; $i++) {
    for (my $j = 0; $j < 3; $j++) {
      foreach $path (@{$$rules[$i][$j]}) {
        if (! $$nodes{$path}) {
          $$nodes{$path} = 1;
          $name = &basename($path);
          if (0) {
          } elsif (&is_dk_path($path)) {
            $result .= "  \"$path\" [ label = \"$name\", color = blue ];" . $nl;
          } elsif (&is_so_path($path)) {
            $result .= "  \"$path\" [ label = \"$name\", color = green ];" . $nl;
          } elsif ($path eq $target_hdr_path ||
                   $path eq $target_src_path ||
                   $path eq $target_o_path) {
            $result .= "  \"$path\" [ label = \"$name\", color = magenta ];" . $nl;
          } else {
            $result .= "  \"$path\" [ label = \"$name\" ];" . $nl;
          }
        }
      }
    }
  }
  return $result;
}
sub gen_dot_body_edges {
  my ($rules) = @_;
  my $result = '';
  foreach my $rule (@$rules) {
    my $tgts =               $$rule[0];
    my $prereqs =            $$rule[1];
    my $order_only_prereqs = $$rule[2];
    foreach my $tgt (@$tgts) {
      foreach my $prereq (@$prereqs) {
        $result .= "  \"$tgt\" -> \"$prereq\"";
        if (&is_o_path($tgt)) {
          $result .= ' [ color = blue ]';
        } elsif ((&is_exe_path($tgt) || &is_so_path($tgt)) && (&is_exe_path($prereq) || &is_so_path($prereq))) {
          $result .= ' [ color = green ]';
        } elsif ($prereq =~ /\.ctlg\.ast$/) {
          $result .= ' [ color = red ]';
        }
        $result .= ';' . $nl;
      }
      foreach my $prereq (@$order_only_prereqs) {
        $result .= "  \"$tgt\" -> \"$prereq\" [ color = gray, style = dashed ]";
        ###
        $result .= ';' . $nl;
      }
    }
  }
  return $result;
}
sub gen_make {
  my ($rules, $so_paths) = @_;
  my $cxx =                &var('cxx');
  my $source_dir =         &source_dir();
  my $intmd_dir =          &intmd_dir();
  my $build_dir =          &build_dir();
  my $current_source_dir = &current_source_dir();
  my $current_intmd_dir =  &current_intmd_dir();
  my $current_build_dir =  &current_build_dir();
  my $dakota =             which 'dakota';
  my $dakota_catalog =     &dirname($dakota) . '/dakota-catalog';
  my $prefix_dir =         &dirname(&dirname($dakota));
  my $result = '';
  my $root_tgt = $$rules[0][0][0];
  my $target_hdr_path = &target_hdr_path();
  $result .=
    '# -*- mode: makefile -*-' . $nl .
    $nl;
  my $dirs = {};
  if (&is_so_path($root_tgt)) {
    my $dir = &dirname($root_tgt);
    $$dirs{$dir} = 1;
  }
  foreach my $so_path (@$so_paths) {
    my $dir = &dirname($so_path);
    $$dirs{$dir} = 1;
  }
  foreach my $dir (keys %$dirs) {
    $result .= "\$(shell mkdir -p $ENV{HOME}/.dkt$dir)" . $nl;
  }
  my $target_current_intmd_dir = &target_current_intmd_dir();
  my $target_current_build_dir = &target_current_build_dir();
  $result .=
    "\$(shell mkdir -p $target_current_intmd_dir)" . $nl .
    "\$(shell mkdir -p $target_current_build_dir)" . $nl .
    $nl .
    '%.ctlg :' . $nl .
    "\t" . '# generating $@' . $nl .
    "\t" . "\@${dakota_catalog} --output \$@ \$<" . $nl .
    $nl .
    '%.ctlg.ast : %.ctlg' . $nl .
    "\t" . '# generating $@' . $nl .
    "\t" . "\@${dakota} --action parse --output \$@ \$<" . $nl .
    $nl .
    ".PHONY : all" . $nl .
    $nl .
    "all : $root_tgt" . $nl;
  $result .= &gen_make_body($rules);
  return $result;
}
sub gen_make_body {
  my ($rules) = @_;
  my $result = '';
  foreach my $rule (@$rules) {
    my $tgts =               $$rule[0];
    my $prereqs =            $$rule[1];
    my $order_only_prereqs = $$rule[2];
    my $recipes =            $$rule[3];
    my $d = $nl;
    foreach my $tgt (@$tgts) {
      $result .= $d . $tgt;
      $d = " \\\n";
    }
    $result .= ' :';
    foreach my $prereq (@$prereqs) {
      $result .= $d . $prereq;
    }
    if (scalar @$order_only_prereqs) {
      $result .= ' |';
      foreach my $prereq (@$order_only_prereqs) {
        $result .= $d . $prereq;
      }
    }
    $result .= $nl;
    foreach my $recipe (@$recipes) {
      if (length $recipe) {
        $result .= "\t" . $recipe . $nl;
      }
    }
  }
  return $result;
}
sub write_str {
  my ($str, $output) = @_;
  open(my $fh, '>', $output) or die;
  print $fh $str;
  close($fh);
}
sub gen_rules {
  my ($root_tgt, $parts) = @_;
  my $dk_paths = [];
  my $so_paths = [];
  my $so_ctlg_ast_paths = [];
  my $dk_o_paths = [];
  my $dk_ast_paths = [];
  foreach my $path (@$parts) {
    if (&is_dk_path($path)) {
      &add_last($dk_paths, $path);
      my $dk_o_path = &o_path_from_dk_path($path);
      &add_last($dk_o_paths, $dk_o_path);
      my $dk_ast_path = &ast_path_from_dk_path($path);
      &add_last($dk_ast_paths, $dk_ast_path);
    } else {
      &add_last($so_paths, $path);
      my $so_ctlg_path =     &ctlg_path_from_so_path($path);
      my $so_ctlg_ast_path = &ast_path_from_ctlg_path($so_ctlg_path);
      &add_last($so_ctlg_ast_paths, $so_ctlg_ast_path);
    }
  }
  my $root_tgt_name = &basename($root_tgt);
  my $root_tgt_type;
  if (&is_so_path($root_tgt)) {
    $root_tgt_type = 'shared-library';
  } else {
    $root_tgt_type = 'executable';
  }
  my $target_o_path =          &target_o_path();
  my $target_src_path =        &target_src_path();
  my $target_hdr_path =        &target_hdr_path();
  my $target_inputs_ast_path = &target_inputs_ast_path();
  my $target_srcs_ast_path =   &target_srcs_ast_path();
  my $cxx =                    &var('cxx');
  my $dakota =                 which 'dakota';
  my $dakota_catalog =         &dirname($dakota) . '/dakota-catalog';
  my $prefix_dir =             &dirname(&dirname($dakota));
  my $current_source_dir =     &current_source_dir();
  my $source_dir =             &source_dir();
  my $build_dir =              &build_dir();
  my $target = &var('target');
  my $all_dir_vars = "--var=current_source_dir=${current_source_dir} --var=source_dir=${source_dir} --var=build_dir=${build_dir} --var=target=$target";
  # -dynamiclib on darwin, -shared on linux
  # -install_name <> on darwin, -soname <> AND -rpath <> on linux
  my $gbl_recipes = {
    'parse' =>               [ "# generating \$@", "\@${dakota} --action parse --output \$@ \$<" ],
    'merge' =>               [ "# generating \$@", "\@${dakota} --action merge $all_dir_vars --output \$@ \$^" ], # could use $?
    'gen-target-hdr' =>      [ "# generating \$@", "\@${dakota} --action gen-target-hdr $all_dir_vars --output \$@ \$<" ],
                              #"# generating \$@", "\@${dakota} -x c++-header \@${prefix_dir}/lib/dakota/compiler.opts --var=cxx=${cxx} -I${prefix_dir}/include -Xclang -emit-pch -o \$@.pch \$@" ],
    'gen-target-src' =>      [ "# generating \$@", "\@${dakota} --action gen-target-src $all_dir_vars --output \$@ \$<" ],
   #'compile' =>             [ "# generating \$@", "\@${dakota} -c \@${prefix_dir}/lib/dakota/compiler.opts -include-pch $target_hdr_path.pch $all_dir_vars --var=cxx=${cxx} -I${current_source_dir} -I${prefix_dir}/include -o \$@ \$<" ],
    'compile' =>             [ "# generating \$@", "\@${dakota} -c -DDEBUG=1 \@${prefix_dir}/lib/dakota/compiler.opts $all_dir_vars --var=cxx=${cxx} -I${current_source_dir} -I${prefix_dir}/include -o \$@ \$<" ],
    'link-shared-library' => [ "# generating \$@", "\@${dakota} -dynamiclib \@${prefix_dir}/lib/dakota/linker.opts --var=cxx=${cxx} -Wl,-rpath,${prefix_dir}/lib -install_name \@rpath/\$(notdir \$@) -o \$@ \$^" ],
    'link-executable' =>     [ "# generating \$@", "\@${dakota} \@${prefix_dir}/lib/dakota/linker.opts --var=cxx=${cxx} -Wl,-rpath,${prefix_dir}/lib -o \$@ \$^" ],
  };
  my $rules = [];
  if (&is_so_path($root_tgt)) {
    &add_last($rules, [[$root_tgt], [@$dk_o_paths, $target_o_path, @$so_paths], [],
                       $$gbl_recipes{'link-shared-library'}]);
  } else {
    &add_last($rules, [[$root_tgt], [@$dk_o_paths, $target_o_path, @$so_paths], [],
                       $$gbl_recipes{'link-executable'}]);
  }
  &add_last($rules, [[$target_o_path], [$target_src_path], [$target_hdr_path], # using order-only prereqs
                     $$gbl_recipes{'compile'}]);
  &add_last($rules, [$dk_o_paths, [], [$target_hdr_path], []]); # using order-only prereqs
  &add_last($rules, [[$target_hdr_path], [$target_inputs_ast_path], [],
                     $$gbl_recipes{'gen-target-hdr'}]);
  &add_last($rules, [[$target_src_path], [$target_inputs_ast_path], [],
                     $$gbl_recipes{'gen-target-src'}]);
  &add_last($rules, [[$target_inputs_ast_path], [$target_srcs_ast_path, @$so_ctlg_ast_paths], [],
                     $$gbl_recipes{'merge'}]);
  &add_last($rules, [[$target_srcs_ast_path], [@$dk_ast_paths], [],
                     $$gbl_recipes{'merge'}]);
  foreach my $dk_path (@$dk_paths) {
    my $dk_o_path = &o_path_from_dk_path($dk_path);
    my $dk_ast_path = &ast_path_from_dk_path($dk_path);
    &add_last($rules, [[$dk_o_path], [$dk_path], [],
                       $$gbl_recipes{'compile'}]);
    &add_last($rules, [[$dk_ast_path], [$dk_path], [],
                       $$gbl_recipes{'parse'} ]);
  }
  foreach my $so_path (@$so_paths) {
    my $so_ctlg_path = &ctlg_path_from_so_path($so_path);
    my $so_ctlg_ast_path = &ast_path_from_ctlg_path($so_ctlg_path);
    &add_last($rules, [[$so_ctlg_ast_path], [$so_ctlg_path], [],
                       []]);
    &add_last($rules, [[$so_ctlg_path], [$so_path], [],
                       []]);
  }
  return ($rules, $so_paths);
}
sub set_target {
  my ($input_path) = @_;
  my $build_yaml = &yaml_parse($input_path);
  $ENV{'target'} = $$build_yaml{'target'};
}
# ${library_output_directory}/${shared_library_prefix}${target}${shared_library_suffix}
# ${runtime_output_directory}/${target}${executable_suffix}
sub gen {
  my ($input_path, $output_path) = @_;
  die if ! &dirs();
  my $build_yaml = &yaml_parse($input_path);
  my $target_path = $$build_yaml{'target-path'};
  $target_path = &expand($target_path);
  if (! &is_abs($target_path)) {
    $target_path = &current_source_dir() . '/' . $target_path;
  }
  my $force;
  my ($rules, $so_paths) = &gen_rules($target_path, &parts_from_yaml($input_path, $force = 1));
  my $build_mk = &gen_make($rules, $so_paths);
  &write_str($build_mk, $output_path);
  if (1) {
    my $build_dot = &gen_dot($rules);
    my $output_dot = &build_dot_path();
    &write_str($build_dot, $output_dot);
    #print $build_dot;
  }
  #print STDERR &Dumper($rules);
  #print STDERR $build_mk;
  return $output_path;
}
sub set_dirs_from_input_path {
  my ($input_path, $force) = @_;
  return if ! $force && &dirs();
  my $current_source_dir = &dirname($input_path);
  my $source_dir = &cwd();
  my $build_dir = $source_dir . '/z/build';
  my $current_vars = {
    'current_source_dir' => $current_source_dir,
    'source_dir' =>         $source_dir,
    'build_dir' =>          $build_dir,
  };
  &set_env_vars_core($current_vars, $force);
}
sub gen_all {
  my ($input_paths, $path_only) = @_;
  my $output_paths = [];
  foreach my $input_path (@$input_paths) {
    my $force;
    &set_dirs_from_input_path($input_path, $force = 1);
    &set_target($input_path);
    my $output_path = &mk_path_from_yaml_path($input_path);
    if (! $path_only) {
      &gen($input_path, $output_path);
    }
    push @$output_paths, $output_path;
  }
  return $output_paths;
}
my $default_input_name = 'build.yaml';
sub default_input_path {
  return &current_source_dir() . '/' . $default_input_name;
}
sub input_path {
  my ($input) = @_;
  if (-d $input) {
    $input .= '/' . $default_input_name;
  } elsif (! -f $input) { die &basename($0) . ': error: no-such-file: ' . $input . $nl; }
  return $input;
}
sub start {
  my ($argv) = @_;
  my $cmd_info = &cmd_info_from_argv($argv);
  my $path_only = $$cmd_info{'opts'}{'path-only'};
  #print &Dumper($cmd_info);
  &set_env_vars_core($$cmd_info{'vars'});
  if (@{$$cmd_info{'inputs'}} > 1) {
    my $input_paths = [];
    foreach my $input (@{$$cmd_info{'inputs'}}) {
      &add_last($input_paths, &input_path($input));
    }
    my $output_paths = &gen_all($input_paths, $path_only);
    print join($nl, @$output_paths);
  } else {
    my $input_path;
    if (@{$$cmd_info{'inputs'}} == 1) {
      $input_path = &input_path($$cmd_info{'inputs'}[0]);
    } else {
      $input_path = &default_input_path();
    }
    &set_dirs_from_input_path($input_path);
    &set_target($input_path);
    my $output_path = &mk_path_from_yaml_path($input_path);
    if (! $path_only) {
      &gen($input_path, $output_path);
    }
    print $output_path . $nl;
  }
}
unless (caller) {
  &start(\@ARGV);
  exit 0;
}
