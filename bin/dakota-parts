#!/usr/bin/perl -w
# -*- mode: cperl -*-
# -*- cperl-close-paren-offset: -2 -*-
# -*- cperl-continued-statement-offset: 2 -*-
# -*- cperl-indent-level: 2 -*-
# -*- cperl-indent-parens-as-block: t -*-
# -*- cperl-tab-always-indent: t -*-

use strict;
use warnings;
use sort 'stable';
use Cwd;

my $gbl_prefix;
my $nl = "\n";

sub dk_prefix {
  my ($path) = @_;
  $path =~ s|//+|/|;
  $path =~ s|/\./+|/|;
  $path =~ s|^./||;
  if (-d "$path/bin" && -d "$path/lib") {
    return $path
  } elsif ($path =~ s|^(.+?)/+[^/]+$|$1|) {
    &dk_prefix($path);
  } else {
    die "Could not determine \$prefix from executable path $0: $!" . $nl;
  }
}

BEGIN {
  $gbl_prefix = &dk_prefix($0);
  unshift @INC, "$gbl_prefix/lib";
};
use Carp; $SIG{ __DIE__ } = sub { Carp::confess( @_ ) };

use dakota::dakota;
use dakota::parse;
use dakota::util;
my $gbl_platform = &platform("$gbl_prefix/lib/dakota/platform.yaml")
  or die "&platform(\"$gbl_prefix/lib/dakota/platform.yaml\") failed: $!" . $nl;
my $so_ext = &var($gbl_platform, 'so_ext', undef); # default dynamic shared object/library extension

use Data::Dumper;
$Data::Dumper::Terse =     1;
$Data::Dumper::Deepcopy =  1;
$Data::Dumper::Purity =    1;
$Data::Dumper::Useqq =     1;
$Data::Dumper::Sortkeys =  1;
$Data::Dumper::Indent =    1;   # default = 2

use Getopt::Long qw(GetOptionsFromArray);
$Getopt::Long::ignorecase = 0;

sub cmd_info_from_argv {
  my ($argv) = @_;
  my $root_cmd = {
    'opts' => {
    'var' => [],
    }
  };
  &GetOptionsFromArray($argv, $$root_cmd{'opts'},
                       'path-only',
                       'var=s',
                      );
  $$root_cmd{'inputs'} = $argv;
  &set_env_vars($$root_cmd{'opts'}{'var'});
  delete $$root_cmd{'opts'}{'var'};
  return $root_cmd;
}
sub start {
  my ($argv) = @_;
  my $cmd_info = &cmd_info_from_argv($argv);
  my $parts_path = &parts_path();
  if ($$cmd_info{'opts'}{'path-only'}) {
    print $parts_path . $nl;
    exit 0;
  }
  my $build_vars_yaml = &current_source_dir() . '/build-vars.yaml';
  my $build_vars = &yaml_parse($build_vars_yaml);
  my $outstr = '';
  foreach my $input (@{$$build_vars{'srcs'}}) {
    $outstr .= $input . $nl;
  }
  if (scalar @{$$cmd_info{'inputs'}}) {
    # inputs are (target-lib-files, lib-files)
    foreach my $input (@{$$cmd_info{'inputs'}}) {
      $outstr .= $input . $nl;
    }
  } else {
    foreach my $input (@{$$build_vars{'target-libs'}}) {
      my $target_lib_file = "$ENV{'lib_output_dir'}/lib$input$so_ext";
      $outstr .= $target_lib_file . $nl;
    }
    foreach my $input (@{$$build_vars{'libs'}}) {
      my $lib_file = `dakota-find-library $input`;
      $outstr .= $lib_file . $nl;
    }
  }
  &filestr_to_file($outstr, $parts_path);
}
unless (caller) {
  &start(\@ARGV);
}
1;
