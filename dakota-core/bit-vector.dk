// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cassert>
# include <cinttypes>
# include <cstring>

module dakota-core;

inline func min(ssize-t a, ssize-t b) -> ssize-t {
  ssize-t r = a < b ? a: b;
  return r;
}
inline func max(ssize-t a, ssize-t b) -> ssize-t {
  ssize-t r = a > b ? a: b;
  return r;
}
[[unused]] static func host-to-little(uint32-t arg) -> uint32-t {
# if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
  return arg;
# else
  uint32-t result =
    ((arg << 24) & 0xff000000) |
    ((arg <<  8) & 0x00ff0000) |
    ((arg >>  8) & 0x0000ff00) |
    ((arg >> 24) & 0x000000ff);
  return result;
# endif
}
[[unused]] static func reverse(uint64-t arg) -> uint64-t {
# if 0
  return arg;
# endif
  uint64-t result = 0;
  for (ssize-t i = 0; i < (ssizeof(arg) * 8); i++) {
    uint64-t bit = arg & (1 << i);
    if (bit) {
      uint64-t mask = 1 << (((sizeof(arg) * 8) - 1) - cast(uint64-t)i);
      result |= mask;
    }
  }
  return result;
}
static func ceiling-divide(ssize-t numerator, ssize-t denominator) -> ssize-t {
  ssize-t result = (numerator + denominator - 1) / denominator;
  return result;
}
klass bit-vector-op-func {
  slots (*)(uint64-t, uint64-t) -> uint64-t;
}
klass bit-vector {
  slots {
    uint64-t* items;
    ssize-t   count; // number of items
    ssize-t   capacity; // number of bits
  //ssize-t   size; // 1 bit
  }
  static const ssize-t gbl-item-width = ssizeof(slots-t::items[0]) * 8;
  static const ssize-t gbl-resize-factor = 2; // hackhack - should be a consumer settable fraction
  static const ssize-t gbl-default-initial-capacity = 6 * gbl-item-width; // shall never be 0

  method init(object-t self, ssize-t initial-capacity: gbl-default-initial-capacity) -> object-t {
    self = $init(super);
    if (initial-capacity == 0)
      initial-capacity = gbl-default-initial-capacity;
    self.count = 0;
    ssize-t num-items = ceiling-divide(initial-capacity, gbl-item-width);
    self.capacity = num-items * gbl-item-width;
    self.items = cast(uint64-t*)(dkt::alloc(ssizeof(self.items[0]) * num-items));
    memset(self.items, 0, sizeof(self.items[0]) * cast(size-t)num-items);
    return self;
  }
  method dealloc(object-t self) -> object-t {
    self.items = dkt::dealloc(self.items);
    return $dealloc(super);
  }
  [[alias(copy)]] method copy-shallow(object-t self) -> object-t {
    object-t kls = klass-of(self);
    object-t copy = $make(kls);
    const slots-t& s1 = unbox(self);
    slots-t& s2 = mutable-unbox(copy);
    s2 = s1;
    ssize-t num-items = ceiling-divide(self.capacity, gbl-item-width);
    s2.items = cast(uint64-t*)(dkt::alloc(ssizeof(self.items[0]) * num-items));
    memcpy(s2.items, self.items, sizeof(self.items[0]) * cast(size-t)num-items);
    return copy;
  }
  method bit(object-t self, ssize-t index) -> bool-t {
    ssize-t offset = index/gbl-item-width;
    uint64-t mask = 1 << (index % gbl-item-width);
    if (self.count < (offset + 1))
      self.count = (offset + 1);

    bool-t result = (self.items[offset] & mask);
    return result;
  }
  method set-bit(object-t self, ssize-t index, bool-t value) -> object-t {
    ssize-t offset = index/gbl-item-width;
    uint64-t mask = 1 << (index % gbl-item-width);
    if (self.count < (offset + 1))
      self.count = (offset + 1);

    if (value == false)
      self.items[offset] &= ~mask; // set bit to zero
    else
      self.items[offset] |= mask;  // set bit to one
    return self;
  }
//   method clr-bit(object-t self, ssize-t index) -> object-t {
//     return set-bit(self, index, false);
//   }
//   method set-bit(object-t self, ssize-t index) -> object-t {
//     return set-bit(self, index, true);
//   }
  method dump(object-t self) -> object-t {
    $dump(super);
    stream-t out = stderr;
    fprintf(out, "%p { count=%zi, capacity=%zi, items=\"",
            cast(ptr-t)self, self.count, self.capacity);
    for (ssize-t i = 0; i < self.count * gbl-item-width; i++) {
      if (i != 0 && (i % 8) == 0)
        fprintf(out, " ");

      bool-t value = bit(self, i);

      if (value == false)
        fprintf(out, "0");
      else
        fprintf(out, "1");
    }
    fprintf(out, "\" }\n");
    return self;
  }
  static func op-bit-and(uint64-t i1, uint64-t i2) -> uint64-t {
    return i1 & i2;
  }
  static func op-bit-or(uint64-t i1, uint64-t i2) -> uint64-t {
    return i1 | i2;
  }
  static func op-bit-xor(uint64-t i1, uint64-t i2) -> uint64-t {
    return i1 ^ i2;
  }
  method bit-not(object-t self) -> object-t {
    slots-t& self-slots = mutable-unbox(self);
    for (ssize-t offset = 0; offset < self-slots.count; offset++)
      self-slots.items[offset] = ~self-slots.items[offset];
    return self;
  }
  static func op-common(object-t self, object-t other, bit-vector-op-func-t op) -> object-t {
    slots-t& self-slots = mutable-unbox(self);
    const slots-t& other-slots = unbox(other);
    assert(self-slots.capacity == other-slots.capacity);
    self-slots.count = max(self-slots.count, other-slots.count);
    for (ssize-t offset = 0; offset < self-slots.count; offset++)
      self-slots.items[offset] = op(self-slots.items[offset], other-slots.items[offset]);
    return self;
  }
  static func op-common?(object-t self, object-t other, bit-vector-op-func-t op) -> bool-t {
    bool-t result = false;
    slots-t& self-slots = mutable-unbox(self);
    const slots-t& other-slots = unbox(other);
    assert(self-slots.capacity == other-slots.capacity);
    self-slots.count = max(self-slots.count, other-slots.count);
    for (ssize-t offset = 0; offset < self-slots.count; offset++) {
      if ((self-slots.items[offset] = op(self-slots.items[offset], other-slots.items[offset])) != 0) {
        result = true;
        break;
      }
    }
    return result;
  }
  method bit-and(object-t self, object-t other) -> object-t {
    op-common(self, other, op-bit-and);
    return self;
  }
  method bit-or(object-t self, object-t other) -> object-t {
    op-common(self, other, op-bit-or);
    return self;
  }
  method bit-xor(object-t self, object-t other) -> object-t {
    op-common(self, other, op-bit-xor);
    return self;
  }
  method bit-and?(object-t self, object-t other) -> bool-t {
    bool-t result = op-common?(self, other, op-bit-and);
    return result;
  }
  method bit-or?(object-t self, object-t other) -> bool-t {
    bool-t result = op-common?(self, other, op-bit-or);
    return result;
  }
  method bit-xor?(object-t self, object-t other) -> bool-t {
    bool-t result = op-common?(self, other, op-bit-xor);
    return result;
  }
  method compare(object-t self, object-t other) -> cmp-t {
    assert(other != nullptr);
    cmp-t result = 0;
    if (self != other) {
      if (klass-of(other) == _klass_ || $instance-of?(other, _klass_)) {
        const slots-t& self-slots =  unbox(self);
        const slots-t& other-slots = unbox(other);
        assert(self-slots.capacity == other-slots.capacity);
        ssize-t count = max(self-slots.count, other-slots.count);
        for (ssize-t offset = 0; offset < count; offset++) {
          ssize-t i = count - 1 - offset;
          result = dk-cmp(self-slots.items[i], other-slots.items[i]);
          if (result != 0)
            break;
        }
      } else {
        result = $compare(super, other);
      }
    }
    return result;
  }
}
