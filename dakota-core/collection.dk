// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota-core;

klass iterator-context;
klass std-compare;

// func dk-va-add-all(object-t self, va-list-t args) -> object-t {
//   object-t element;
//   while ((element = va-arg(args, object-t)) != nullptr)
//     $add(self, element);
//   return self;
// }
// [[sentinel]] func dk-add-all(object-t self, ...) -> object-t {
//   va-list-t args;
//   va-start(args, self);
//   object-t result = dk-va-add-all(self, args);
//   va-end(args);
//   return result;
// }
klass collection {
  superklass object;

  trait iterator;

  method write-lite(object-t self, object-t out) -> object-t {
    USE(out);
    return self;
  }
  method writeln-lite(object-t self, object-t out) -> object-t {
    $write-lite(self, out);
    $write(out, "\n");
    return self;
  }
  // method add-all(object-t self, const str-t* strings, symbol-t encoding: #utf-8) -> object-t {
  //   assert(strings != nullptr) -> object-t;
  //   assert(encoding != nullptr);
  //   while (*strings != nullptr) // rnielsen: modifying a param - bad practice?
  //   {
  //     object-t string = $make(string::klass(), #bytes: *strings, #encoding: encoding);
  //     strings++;
  //     $add(self, string);
  //   }
  //   return null;
  // }
  method add-all(object-t self, object-t collection) -> object-t {
    for (object-t element in collection)
      $add(self, element);
    return collection;
  }
  // objects is a nullptr terminated list of objects
  method add-objects(object-t self, object-t[] objects) -> object-t {
    object-t arg;
    object-t* args = objects;
    while ((arg = *args++) != nullptr)
      $add(self, arg);
    return self; // nullnull?
  }
  method iterator-context(object-t self, selector-t s) -> iterator-context-t {
    object-t iter = $iterator(self);
    method-t next = $method-for-selector(klass-of(iter), s);
    return cast(iterator-context-t){ .iter = iter, .next = next };
  }
  method iterator(object-t self) -> object-t;
//   method add(object-t self, object-t element) -> object-t;

  // method size(object-t self) -> ssize-t;
  // method empty?(object-t self) -> bool-t;
  // method empty(object-t self) -> object-t;
}
