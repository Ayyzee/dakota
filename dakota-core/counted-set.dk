// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota-core;

klass ssize;
klass pair;
klass vector;

trait set;

trait counted-set {
  trait set-of-pairs;

  func initialize(object-t) -> void {
    pair::klass();
    return;
  }
  method add(object-t self, object-t first) -> object-t {
    object-t pair = $at(super, first, nullptr);
    object-t current-last = pair;

    if (pair) {
      if (klass-of(pair) == pair::_klass_ || $instance?(pair, pair::_klass_))
        current-last = pair::unbox(pair).last;
      ssize::mutable-unbox(current-last)++;
    } else {
      current-last = ssize::box(1);
      pair = pair::box({first, current-last});
      $add(super, pair);
    }
    return current-last;
  }
}
