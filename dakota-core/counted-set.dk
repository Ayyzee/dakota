// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota-core;

klass ssize;
klass pair;
klass vector;

trait set;

trait counted-set {
  //provides set;
  require collection;

  func initialize(object-t) -> void {
    pair::klass();
    return;
  }
  method elements(object-t self) -> object-t {
    object-t set-kls = superklass-of(klass-of(self));
    object-t result = $make(set-kls);
    for (pair-t& pair in self) {
      object-t first = pair.first;
      $add(result, first);
    }
    return result;
  }
  method counts(object-t self) -> object-t {
    object-t result = $make(vector::klass(), #size: $size(self));
    for (pair-t& pair in self) {
      object-t last = pair.last;
      $add-last(result, last);
    }
    return result;
  }
  method write-lite(object-t self, object-t out) -> object-t {
    $write(out, "{");
    str-t delim = "";

    for (pair-t& pair in self) {
      object-t first = pair.first;
      object-t last =  pair.last;
      $write(out, delim);
      $write-lite(first, out); // must be primitive type
      $write(out, ":");
      if (last == nullptr || last == null)
        $write(out, "null");
      else
        $write-lite(last, out);
      delim = ",";
    }
    $write(out, "}");
    return self;
  }
  method at(object-t self, object-t first) -> object-t {
    object-t last = $in(super, first);
    if (klass-of(last) == pair::_klass_ || $instance?(last, pair::_klass_))
      last = pair::unbox(last).last;
    return last;
  }
  method at(object-t self, object-t first, object-t default-last) -> object-t {
    object-t last = $in(super, first, nullptr);
    if (last == nullptr)
      last = default-last;
    if (last && (klass-of(last) == pair::_klass_ || $instance?(last, pair::_klass_)))
      last = pair::unbox(last).last;
    return last;
  }
  method add(object-t self, object-t first) -> object-t {
    object-t pair = $at(self, first, nullptr);
    object-t last = pair;

    if (pair) {
      if (klass-of(pair) == pair::_klass_ || $instance?(pair, pair::_klass_))
        last = pair::unbox(pair).last;
      ssize-t& count-ptr = ssize::mutable-unbox(last);
      count-ptr++;
    } else {
      last = ssize::box(1);
      pair = pair::box({first, last});
      $add(super, pair);
    }
    return last;
  }
  method count-at(object-t self, object-t first) -> ssize-t {
    object-t last = $at(self, first);
    if (klass-of(last) == pair::_klass_ || $instance?(last, pair::_klass_))
      last = pair::unbox(last).last;
    ssize-t count = ssize::unbox(last);
    return count;
  }
  method count-at(object-t self, object-t first, ssize-t default-count) -> ssize-t {
    ssize-t count = default-count;
    object-t last = $at(self, first, nullptr);

    if (last) {
      if (klass-of(last) == pair::_klass_ || $instance?(last, pair::_klass_))
        last = pair::unbox(last).last;
      count = ssize::unbox(last);
    }
    return count;
  }
}
