// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cassert>
# include <cinttypes>
# include <cstdlib>

module dakota-core;

klass exception;

klass deque-node {
  slots {
    slots-t* prev;    // nullptr (not null) for first
    object-t item; // may NOT be nullptr, may be null
    slots-t* next;    // nullptr (not null) for last
  }
  static func create(slots-t* prev, object-t item, slots-t* next) -> slots-t* {
    slots-t* node = cast(slots-t*)dkt::alloc(ssizeof(slots-t));
    node->prev =    prev;
    node->item = item;
    node->next =    next;
    return node;
  }
  static func destroy(slots-t* s) -> std::nullptr-t {
    s->prev =    nullptr;
    s->item = nullptr;
    s->next =    nullptr;
    return dkt::dealloc(s);
  }
  static func dump-prev(const slots-t* s, ssize-t iterator-state) -> void {
    if (s != nullptr) {
      // fprintf(stderr, "    \"%p-%i\" [ label = < <table>"
      //         "<tr><td port=\"item\">item</td></tr>"
      //         "<tr><td port=\"prev\">prev</td></tr>"
      //         "<tr><td port=\"next\">next</td></tr>"
      //         "</table> > ];\n", cast(ptr-t)(s), iterator-state);
      // fprintf(stderr, "    \"%p-%i\" [ label = \"%p <%s>\" ];\n",
      //         cast(ptr-t)(s->item), iterator-state,
      //         cast(ptr-t)(s->item), $name(klass-of(s->item)));
      // fprintf(stderr, "    \"%p-%i\":item -> \"%p-%i\";\n",
      //         cast(ptr-t)(s), iterator-state,
      //         cast(ptr-t)(s->item), iterator-state);

      if (s->prev != nullptr)
        fprintf(stderr, "    \"%p-%zi\" -> \"%p-%zi\":prev [ dir = back ];\n",
                cast(ptr-t)(s->prev), iterator-state, cast(ptr-t)(s), iterator-state);
      else {
        fprintf(stderr, "    \"%p-%zi-prev-nullptr\" [ label = \"nullptr\" ];\n",
                cast(ptr-t)(s), iterator-state);
        fprintf(stderr, "    \"%p-%zi-prev-nullptr\" -> \"%p-%zi\":prev [ dir = back ];\n",
                cast(ptr-t)(s), iterator-state, cast(ptr-t)(s), iterator-state);
      }
      if (s->prev != nullptr)
        dump-prev(s->prev, iterator-state);
    }
    return;
  }
  static func dump-next(const slots-t* s, ssize-t iterator-state) -> void {
    if (s != nullptr) {
      fprintf(stderr, "    \"%p-%zi\" [ label = < <table>"
              "<tr><td port=\"item\">item</td></tr>"
              "<tr><td port=\"prev\">prev</td></tr>"
              "<tr><td port=\"next\">next</td></tr>"
              "</table> > ];\n", cast(ptr-t)(s), iterator-state);
      fprintf(stderr, "    \"%p-%zi\" [ label = \"%p <%s>\" ];\n",
              cast(ptr-t)(s->item), iterator-state,
              cast(ptr-t)(s->item), $name(klass-of(s->item)));
      fprintf(stderr, "    \"%p-%zi\":item -> \"%p-%zi\";\n",
              cast(ptr-t)(s), iterator-state, cast(ptr-t)(s->item), iterator-state);

      if (s->next != nullptr)
        fprintf(stderr, "    \"%p-%zi\":next -> \"%p-%zi\";\n",
                cast(ptr-t)(s), iterator-state, cast(ptr-t)(s->next), iterator-state);
      else {
        fprintf(stderr, "    \"%p-%zi-next-nullptr\" [ label = \"nullptr\" ];\n",
                cast(ptr-t)(s), iterator-state);
        fprintf(stderr, "    \"%p-%zi\":next -> \"%p-%zi-next-nullptr\";\n",
                cast(ptr-t)(s), iterator-state, cast(ptr-t)(s), iterator-state);
      }
      if (s->next != nullptr)
        dump-next(s->next, iterator-state);
    }
    return;
  }
}
klass deque {
  superklass sequence;
  trait      stack;

  slots {
    deque-node::slots-t* first; // if (first != nullptr)  first->prev = nullptr;
    deque-node::slots-t* last;  // if (last != nullptr)   last->next =  nullptr;
    ssize-t              size;
    ssize-t              iterator-state;
  }
  method init(object-t self, object-t item: nullptr) -> object-t {
    self = $init(super);

    if (item == nullptr) {
      self.first = nullptr;
      self.last =  nullptr;
      self.size =  0;
    } else {
      deque-node::slots-t* node = deque-node::create(nullptr, item, nullptr);
      // node->prev = nullptr;
      // node->next = nullptr;
      self.first = node;
      self.last =  node;
      self.size =  1;
    }
    self.iterator-state = 0;
    return self;
  }
  method test-dump(object-t self) -> object-t {
    const slots-t& s = unbox(self);
    // if (&s != nullptr) {
      fprintf(stderr, "  subgraph \"cluster-%p-%zi\"\n", cast(ptr-t)(&s), s.iterator-state);
      fprintf(stderr, "  {\n");

      fprintf(stderr, "    graph [ rankdir = LR ];\n");
      fprintf(stderr, "    graph [ label = \"%p-%zi\" ];\n", cast(ptr-t)(&s), s.iterator-state);
      fprintf(stderr, "    node [ shape = plaintext ];\n");

      fprintf(stderr, "    \"%p-%zi\" [ label = < <table>"
              "<tr><td port=\"first\">first</td></tr>"
              "<tr><td port=\"last\">last</td></tr>"
              "<tr><td port=\"size\">size=%zi</td></tr>"
              "</table> > ];\n", cast(ptr-t)(&s), s.iterator-state, s.size);
      if (s.first == nullptr && s.last == nullptr) {
        fprintf(stderr, "    \"%p-%zi-nullptr\" [ label = \"nullptr\" ];\n",
                cast(ptr-t)(&s), s.iterator-state);
        fprintf(stderr, "    \"%p-%zi\":first -> \"%p-%zi-nullptr\";\n",
                cast(ptr-t)(&s), s.iterator-state, cast(ptr-t)(&s), s.iterator-state);
        fprintf(stderr, "    \"%p-%zi\":last  -> \"%p-%zi-nullptr\";\n",
                cast(ptr-t)(&s), s.iterator-state, cast(ptr-t)(&s), s.iterator-state);
      } else {
        fprintf(stderr, "    \"%p-%zi\":first -> \"%p-%zi\";\n",
                cast(ptr-t)(&s), s.iterator-state, cast(ptr-t)(s.first), s.iterator-state);
        fprintf(stderr, "    \"%p-%zi\":last  -> \"%p-%zi\";\n",
                cast(ptr-t)(&s), s.iterator-state, cast(ptr-t)(s.last), s.iterator-state);
      }
      deque-node::dump-next(s.first, s.iterator-state);
      deque-node::dump-prev(s.last,  s.iterator-state);

      fprintf(stderr, "  }\n");

    //   size
    // }
    return self;
  }
  static func string-from-node(object-t self, deque-node::slots-t* node,
                               char-t* buf, ssize-t buf-len) -> object-t {
    if (self.first == node && self.first != nullptr)
      snprintf(buf, cast(size-t)buf-len, "%s", "first     ");
    else if (self.last == node && self.last != nullptr)
      snprintf(buf, cast(size-t)buf-len, "%s", "last      ");
    else
      snprintf(buf, cast(size-t)buf-len, "%p", cast(ptr-t)node);
    return self;
  }
  method dump(object-t self) -> object-t {
    object-t result = $write-slots(self, std-output);
    return result;
  }
  method write-slots(object-t self, object-t out) -> object-t {
    $write-slots(super, out);
    // dkt-log(stdout, "deque: %s(%p, ...)\n",
    //        __func__, cast(ptr-t)deque);
    deque-node::slots-t* first = self.first;
    deque-node::slots-t* last =  self.last;
    char-t[16] buf = "";

    if (first == nullptr) {
      fprintf(stdout, " %p", cast(ptr-t)first);
      fprintf(stdout, "\n");
    } else {
      deque::string-from-node(self, first->prev, buf, ssizeof(buf));
      fprintf(stdout, " %s", buf);
      fprintf(stdout, " %p", cast(ptr-t)first->item);
      deque::string-from-node(self, first->next, buf, ssizeof(buf));
      fprintf(stdout, " %s", buf);
      fprintf(stdout, "\n");
    }
    if (last == nullptr) {
      fprintf(stdout, " %p\n", cast(ptr-t)last);
    } else {
      deque::string-from-node(self, last->prev, buf, ssizeof(buf));
      fprintf(stdout, " %s", buf);
      fprintf(stdout, " %p", cast(ptr-t)last->item);
      deque::string-from-node(self, last->next, buf, ssizeof(buf));
      fprintf(stdout, " %s", buf);
      fprintf(stdout, "\n");
    }
    return self;
  }
  [[alias(copy)]] method copy-shallow(object-t self) -> object-t {
    USE(self);
    throw $make(exception::klass(), #msg: "not yet implemented");
    return self;
  }
  // insert-before
  // insert-after
  // before
  // after

  method size(object-t self) -> ssize-t {
    return self.size;
  }
  method empty?(object-t self) -> bool-t {
    bool-t result = (self.size == 0);
    return result;
  }
  method empty(object-t self) -> object-t {
    while (self.size != 0)
      $remove-last(self);
    return self;
  }
  static func health-check(object-t self) -> void {
    assert((self.first == nullptr && self.last == nullptr) ||
           (self.first != nullptr && self.last != nullptr));
    if (self.first != nullptr) {
      assert(self.first->prev == nullptr);
      assert(self.last->next == nullptr);
    }
    assert(($size(self) == 0 && self.first == nullptr && self.last == nullptr) ||
           ($size(self) != 0 && self.first != nullptr && self.last != nullptr));
  }
  method add-first(object-t self, object-t item) -> object-t {
    assert(item != nullptr);
    deque-node::slots-t* node = deque-node::create(nullptr, item, self.first); // self.first may be nullptr

    if (self.first != nullptr)
      self.first->prev = node;
    self.first = node;

    if (self.last == nullptr)
      self.last = self.first;
    self.size++;
    self.iterator-state++;
    health-check(self);
    return self;
  }
  [[alias(add,push)]] method add-last(object-t self, object-t item) -> object-t {
    assert(item != nullptr);
    deque-node::slots-t* node = deque-node::create(self.last, item, nullptr); // self.last may be nullptr

    if (self.last != nullptr)
      self.last->next = node;
    self.last = node;

    if (self.first == nullptr)
      self.first = self.last;
    self.size++;
    self.iterator-state++;
    health-check(self);
    return self;
  }
  method first(object-t self) -> object-t {
    assert(self.size != 0);
    //assert(self.first != nullptr);
    object-t item = nullptr;
    if (self.first != nullptr)
      item = self.first->item;
    return item;
  }
  [[alias(top)]] method last(object-t self) -> object-t {
    assert(self.size != 0);
    //assert(self.last != nullptr);
    object-t item = nullptr;
    if (self.last != nullptr)
      item = self.last->item;
    return item;
  }
  method remove-first(object-t self) -> object-t {
    assert(self.size != 0);
    assert(self.first != nullptr);
    deque-node::slots-t* node = self.first;
    object-t item = self.first->item;
    self.first = self.first->next;

    if (self.first == nullptr)
      self.last = nullptr;
    else
      self.first->prev = nullptr;
    self.size--;
    self.iterator-state++;
    node = deque-node::destroy(node);
    health-check(self);
    return item;
  }
  [[alias(pop)]] method remove-last(object-t self) -> object-t {
    assert(self.size != 0);
    assert(self.last != nullptr);
    deque-node::slots-t* node = self.last;
    object-t item = self.last->item;
    self.last = self.last->prev;

    if (self.last == nullptr)
      self.first = nullptr;
    else
      self.last->next = nullptr;
    self.size--;
    self.iterator-state++;
    node = deque-node::destroy(node);
    health-check(self);
    return item;
  }
  // method replace-first(object-t self, object-t item) -> object-t;
  // method replace-last(object-t self, object-t item) -> object-t;

  // reverse in place
//   method reverse!(object-t self) -> object-t {
//     USE(self);
//     throw $make(exception::klass(), #msg: "not yet implemented");
//     return self;
//   }
  method iterator-klass(object-t self) -> object-t {
    USE(self);
    return deque-iterator::klass();
  }
  [[alias(iterator)]] method forward-iterator(object-t self) -> object-t {
    object-t iter = $make($iterator-klass(self), #collection: self, #backward?: false);
    return iter;
  }
  method backward-iterator(object-t self) -> object-t {
    object-t iter = $make($iterator-klass(self), #collection: self, #backward?: true);
    return iter;
  }
  // method write-item(object-t self, object-t out, str-t name) -> object-t {
  //   if (out == null)
  //     { out = std-output; } // wrong! should be system::object-out
  //   char-t[128] buffer;
  //   snprintf(buffer, sizeof(buffer), "<sequence name=\"%s\" size=\"%u\">", name, self.size);
  //   $writeln(out, buffer);
  //   $increment-column(out);

  //   if (self.size != 0) {
  //     deque-node::slots-t* node = self.first;

  //     do {
  //   $write-item-idref(out, node->item);
  //     } while ((node = node->next) != nullptr);
  //   }
  //   $decrement-column(out);
  //   snprintf(buffer, sizeof(buffer), "</sequence>");
  //   $writeln(out, buffer);
  //   return self;
  // }
}
klass deque-iterator {
  superklass iterator;

  slots {
    object-t             deque; // needed for iterator-state
    deque-node::slots-t* node;
    bool-t               backward?;
    ssize-t              iterator-state;
  }
  static func check-iterator-state(object-t self) -> void {
    const deque::slots-t& d = deque::unbox(self.deque);

    if (self.iterator-state != d.iterator-state)
      throw $make(exception::klass(), #msg: "oops");
    return;
  }
  method init(object-t self, object-t collection:, bool-t backward?: false) -> object-t {
    self = $init(super);
    assert(klass-of(collection) == deque::_klass_ || $instance-of?(collection, deque::_klass_));
    const deque::slots-t& d = deque::unbox(collection);

    self.deque =          collection;
    self.iterator-state = d.iterator-state;
    self.backward? =      backward?;
    if (self.backward?)
      self.node =         d.last;
    else
      self.node =         d.first;
    return self;
  }
  method remove(object-t self) -> object-t {
    check-iterator-state(self);
    //assert(self.node != nullptr);
    deque-node::slots-t* node = self.node;

    if (self.node->prev != nullptr)
      self.node->prev->next = self.node->next;
    if (self.node->next != nullptr)
      self.node->next->prev = self.node->prev;
    node->prev = nullptr; // gc help
    node->next = nullptr; // gc help

    self.iterator-state++;
    deque::mutable-unbox(self.deque).iterator-state++;
    deque::mutable-unbox(self.deque).size--;
    return node->item;
  }
  method set-item(object-t self, object-t item) -> object-t {
    check-iterator-state(self);
    self.node->item = item;
    return self;
  }
  // method last?(object-t self) -> bool-t {
  //   deque::slots-t& d = deque::unbox(self.deque);
  //   bool-t result = (d.next == null);

  //   return result;
  // }
  method next?(object-t self) -> bool-t {
    check-iterator-state(self);
    bool-t result = (self.node != nullptr);
    return result;
  }
  method next(object-t self) -> object-t {
    check-iterator-state(self);
    object-t item = nullptr;
    if ($next?(self)) {
      item = $item(self);
      if (self.backward?)
        self.node = self.node->prev;
      else
        self.node = self.node->next;
    }
    // printf("%s:%s(%p) = %p\n",
    //      "deque-iterator", __func__, (ptr-t)self, (ptr-t)item);
    return item;
  }
  method item(object-t self) -> object-t {
    check-iterator-state(self);
    object-t item = nullptr;
    if ($next?(self)) {
      item = self.node->item;
      assert(item != nullptr);
    }
    return item; // returns nullptr on error
  }
}
