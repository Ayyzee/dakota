// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cerrno>
# include <cstdio>
# include <cstdlib>
# include <cstring>
# include <string>
# include <exception>
# include <unistd.h> // getpid()

# include "config.hh"
# include "private.hh"

module dakota-core;

klass output-stream;
klass system-exception;

klass throw-src {
  slots {
    str-t file;
    int-t line;
  }
}

THREAD-LOCAL throw-src-t dkt-throw-src = { nullptr, 0 };

# if !defined HAVE-GETPROGNAME
# if defined HAVE-PROCFS
static char8-t[4 * 1024] gbl-buf;
func getprogname() -> str-t {
  ssize-t n = readlink("/proc/self/exe", gbl-buf, sizeof(gbl-buf) - 1);
  if (-1 == n)
    throw $make(system-exception::klass(), #errnum : errno);
  gbl-buf[n] = NUL;
  str-t progname = strrchr(gbl-buf, '/');
  if (nullptr != progname)
    progname++;
  else
    progname = gbl-buf;
  return progname;
}
# endif
# endif

[[format-va-printf(2)]] static func va-log(int64-t priority, str-t format, va-list-t args) -> int-t {
  stream-t log-file = stderr;

  if (nullptr != getenv("DEBUG")) {
    fprintf(log-file, "%s[%i]: ", getprogname(), getpid());

    switch (priority) {
      case dkt::k-log-error:
        fprintf(log-file, "error: ");
        break;
      case dkt::k-log-warning:
        fprintf(log-file, "warning: ");
        break;
      case dkt::k-log-info:
        fprintf(log-file, "info: ");
        break;
      case dkt::k-log-debug:
        fprintf(log-file, "debug: ");
        break;
      default:
        std::abort();
    }
  }
  fprintf(log-file, "{");
  int-t result = vfprintf(log-file, format, args);
  fprintf(log-file, "},\n");
  // bugbug: need to adjust result
  return result;
}
[[format-va-printf(2)]] func dkt-va-log(int64-t priority, str-t format, va-list-t args) -> int-t {
  cmp-t result = va-log(priority, format, args);
  return result;
}
[[format-printf(2)]] func dkt-log(int64-t priority, str-t format, ...) -> int-t {
  va-list-t args;
  va-start(args, format);
  int-t result = dkt-va-log(priority, format, args);
  va-end(args);
  return result;
}
[[noreturn]] static func verbose-terminate()  noexcept -> void;
[[noreturn]] static func verbose-unexpected() noexcept -> void;

static /*THREAD-LOCAL*/ std::terminate-handler original-terminate =  std::set-terminate(verbose-terminate);
static /*THREAD-LOCAL*/ std::terminate-handler original-unexpected = std::set-unexpected(verbose-unexpected);

klass exception {
  superklass object;

  slots {
    str-t src-file;
    int-t src-line;
    str-t msg;
  }
  method init(object-t self,
              str-t    msg :      nullptr,
              str-t    src-file : nullptr,
              int-t    src-line : 0) -> object-t {
    self = $init(super);
    self.src-file = src-file;
    self.src-line = src-line;
    self.msg = msg;
    return self;
  }
  method set-src(object-t self, str-t src-file, int-t src-line) -> object-t {
    if (nullptr != src-file && 0 < src-line) {
      self.src-file = src-file;
      self.src-line = src-line;
    }
    return self;
  }
  method print(object-t self, object-t out) -> object-t {
    if (nullptr == out || null == out)
      out = std-error;
    $print-format(out,
                  " \"program-name\": \"%s\""
                  ", \"process-id\": %i",
                  getprogname(),
                  getpid());
    if (self.src-file)
      $print-format(out,
                    ", \"src-file\": \"%s\""
                    ", \"src-line\": %i",
                    self.src-file,
                    self.src-line);
    str-t exception-type = name-of(klass-of(self));
    $print-format(out,
                  ", \"exception-type\": \"%s\"",
                  exception-type);
    if (self.msg && 0 != strcmp(exception-type, self.msg))
      $print-format(out,
                    ", \"msg\": \"%s\"",
                    self.msg);
    return self;
  }
}
[[noreturn]] static func verbose-terminate-other(str-t mangled-type-name, str-t msg) noexcept -> void {
  str-t type-name = dkt::demangle(mangled-type-name);
  if (!type-name)
    type-name = mangled-type-name;
  fprintf(stderr,
          "{ \"uncaught/unexpected exception\": {"
          " \"program-name\": \"%s\""
          ", \"process-id\": %i",
          getprogname(),
          getpid());
  if (dkt-throw-src.file)
    fprintf(stderr,
            ", \"src-file\": \"%s\""
            ", \"src-line\": %i",
            dkt-throw-src.file,
            dkt-throw-src.line);
  fprintf(stderr,
          ", \"exception-type\": \"%s\"",
          type-name);
  if (msg && 0 != strcmp(type-name, msg))
    fprintf(stderr,
            ", \"msg\": \"%s\"",
            msg);
  fprintf(stderr, " }}\n");

  if (type-name && (type-name != mangled-type-name))
    dkt::demangle-free(type-name);
  original-terminate();
  std::abort(); // should never get called
}
[[noreturn]] static func verbose-terminate-object(object-t current-exception) noexcept -> void {
  if (1)
    $set-src(current-exception, dkt-throw-src.file, dkt-throw-src.line);
  if (nullptr != (getenv("DKT_DUMP_UNHANDLED_EXCEPTION")))
    $dump(current-exception);
  $print-format(std-error,
                "{ \"uncaught/unexpected exception\": {");
  $print(current-exception, std-error);
  $println(std-error, " }}");
  original-terminate();
  std::abort(); // should never get called
}
[[noreturn]] static func verbose-terminate() noexcept -> void {
//   dkt-log(dkt::k-log-info, "%s()", __func__);
  try { std::rethrow-exception(std::current-exception()); }
  catch (const object-t        e) { verbose-terminate-object(e); }
  catch (const std::exception& e) { verbose-terminate-other(typeid(e).name(), e.what());  }
  catch (const std::string&    e) { verbose-terminate-other("std::string",    e.c-str()); }
  catch (str-t                 e) { verbose-terminate-other("str-t",          e);         }
  catch (...)                     { verbose-terminate-other("???",            nullptr); }
}
[[noreturn]] static func verbose-unexpected() noexcept -> void {
//   dkt-log(dkt::k-log-info, "%s()", __func__);
  verbose-terminate();
}
