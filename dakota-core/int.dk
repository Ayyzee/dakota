// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//# include <cinttypes>

include-for <climits> INT-MAX,
                      INT-MIN,
                      UINT-MAX;

include-for <cstdint> int8-t,
                      int16-t,
                      int32-t,
                      int64-t,
                      intmax-t,
                      intptr-t,
                      uint8-t,
                      uint16-t,
                      uint32-t,
                      uint64-t,
                      uintmax-t,
                      uintptr-t;

module dakota-core;

klass number;

klass int8 {
  superklass number;

  slots int8-t;

  const slots-t max = INT8-MAX;
  const slots-t min = INT8-MIN;

  // INT8-C(v)
}
klass uint8 {
  superklass number;

  slots uint8-t;

  const slots-t max = UINT8-MAX;

  // UINT8-C(v)
}
klass int16 {
  superklass number;

  slots int16-t;

  const slots-t max = INT16-MAX;
  const slots-t min = INT16-MIN;

  // INT16-C(v)
}
klass uint16 {
  superklass number;

  slots uint16-t;

  const slots-t max = UINT16-MAX;

  // UINT16-C(v)
}
klass int32 {
  superklass number;

  slots int32-t;

  const slots-t max = INT32-MAX;
  const slots-t min = INT32-MIN;

  // INT32-C(v)
}
klass uint32 {
  superklass number;

  slots uint32-t;

  const slots-t max = UINT32-MAX;

  // UINT32-C(v)

  method compare(object-t self, object-t other) -> cmp-t {
    assert(other != nullptr);
    cmp-t result = 0;
    if (self != other) {
      if (klass-of(other) == _klass_ || $instance?(other, _klass_))
        result = dk-cmp(unbox(self), unbox(other));
      else
        result = $compare(super, other);
    }
    return result;
  }
}
klass int64 {
  superklass number;

  slots int64-t;

  const slots-t max = INT64-MAX;
  const slots-t min = INT64-MIN;

  // INT64-C(v)
}
klass uint64 {
  superklass number;

  slots uint64-t;

  const slots-t max = UINT64-MAX;

  // UINT64-C(v)
}
klass int-fast8 {
  superklass number;

  slots int-fast8-t;

  const slots-t max = INT-FAST8-MAX;
  const slots-t min = INT-FAST8-MIN;

  // INT-FAST8-C(v)
}
klass uint-fast8 {
  superklass number;

  slots uint-fast8-t;

  const slots-t max = UINT-FAST8-MAX;

  // UINT-FAST8-C(v)
}
klass int-fast16 {
  superklass number;

  slots int-fast16-t;

  const slots-t max = INT-FAST16-MAX;
  const slots-t min = INT-FAST16-MIN;

  // INT-FAST16-C(v)
}
klass uint-fast16 {
  superklass number;

  slots uint-fast16-t;

  const slots-t max = UINT-FAST16-MAX;

  // UINT-FAST16-C(v)
}
klass int-fast32 {
  superklass number;

  slots int-fast32-t;

  const slots-t max = INT-FAST32-MAX;
  const slots-t min = INT-FAST32-MIN;

  // INT-FAST32-C(v)
}
klass uint-fast32 {
  superklass number;

  slots uint-fast32-t;

  const slots-t max = UINT-FAST32-MAX;

  // UINT-FAST32-C(v)
}
klass int-fast64 {
  superklass number;

  slots int-fast64-t;

  const slots-t max = INT-FAST64-MAX;
  const slots-t min = INT-FAST64-MIN;

  // INT-FAST64-C(v)
}
klass uint-fast64 {
  superklass number;

  slots uint-fast64-t;

  const slots-t max = UINT-FAST64-MAX;

  // UINT-FAST64-C(v)
}
klass int-least8 {
  superklass number;

  slots int-least8-t;

  const slots-t max = INT-LEAST8-MAX;
  const slots-t min = INT-LEAST8-MIN;

  // INT-LEAST8-C(v)
}
klass uint-least8 {
  superklass number;

  slots uint-least8-t;

  const slots-t max = UINT-LEAST8-MAX;

  // UINT-LEAST8-C(v)
}
klass int-least16 {
  superklass number;

  slots int-least16-t;

  const slots-t max = INT-LEAST16-MAX;
  const slots-t min = INT-LEAST16-MIN;

  // INT-LEAST16-C(v)
}
klass uint-least16 {
  superklass number;

  slots uint-least16-t;

  const slots-t max = UINT-LEAST16-MAX;

  // UINT-LEAST16-C(v)
}
klass int-least32 {
  superklass number;

  slots int-least32-t;

  const slots-t max = INT-LEAST32-MAX;
  const slots-t min = INT-LEAST32-MIN;

  // INT-LEAST32-C(v)
}
klass uint-least32 {
  superklass number;

  slots uint-least32-t;

  const slots-t max = UINT-LEAST32-MAX;

  // UINT-LEAST32-C(v)
}
klass int-least64 {
  superklass number;

  slots int-least64-t;

  const slots-t max = INT-LEAST64-MAX;
  const slots-t min = INT-LEAST64-MIN;

  // INT-LEAST64-C(v)
}
klass uint-least64 {
  superklass number;

  slots uint-least64-t;

  const slots-t max = UINT-LEAST64-MAX;

  // UINT-LEAST64-C(v)
}
klass intmax {
  superklass number;

  slots intmax-t;

  const slots-t max = INTMAX-MAX;
  const slots-t min = INTMAX-MIN;

  // INTMAX-C(v)
}
klass uintmax {
  superklass number;

  slots uintmax-t;

  const slots-t max = UINTMAX-MAX;

  // UINTMAX-C(v)
}
klass intptr {
  superklass number;

  slots intptr-t;

  const slots-t max = INTPTR-MAX;
  const slots-t min = INTPTR-MIN;

  // INTPTR-C(v)
}
klass uintptr {
  superklass number;

  slots uintptr-t;

  const slots-t max = UINTPTR-MAX;

  // INTPTR-C(v)

  method dump(object-t self) -> object-t {
    $dump(super);
    fprintf(stderr, "%p { slots=\"%lu\" }\n",
            cast(ptr-t)self, unbox(self));
    return self;
  }
}

klass ptrdiff {
  slots ptrdiff-t;

  const slots-t max = PTRDIFF-MAX;
  const slots-t min = PTRDIFF-MIN;
}
klass sig-atomic {
  superklass number;

  slots sig-atomic-t;

  const slots-t max = SIG-ATOMIC-MAX;
  const slots-t min = SIG-ATOMIC-MIN;
}
