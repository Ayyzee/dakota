// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cinttypes>
# include <cstdint>

module dakota-core;

klass number;

klass int8 {
  superklass number;
  
  slots int8-t;

  const slots-t min = INT8_MIN;
  const slots-t max = INT8_MAX;

  // INT8_C(v)
}
klass int16 {
  superklass number;
  
  slots int16-t;

  const slots-t min = INT16_MIN;
  const slots-t max = INT16_MAX;

  // INT16_C(v)
}
klass int32 {
  superklass number;
  
  slots int32-t;

  const slots-t min = INT32_MIN;
  const slots-t max = INT32_MAX;

  // INT32_C(v)
}
klass int64 {
  superklass number;
  
  slots int64-t;

  const slots-t min = INT64_MIN;
  const slots-t max = INT64_MAX;

  // INT64_C(v)
}
klass int-fast8 {
  superklass number;
  
  slots int-fast8-t;

  const slots-t min = INT_FAST8_MIN;
  const slots-t max = INT_FAST8_MAX;
}
klass int-fast16 {
  superklass number;
  
  slots int-fast16-t;

  const slots-t min = INT_FAST16_MIN;
  const slots-t max = INT_FAST16_MAX;
}
klass int-fast32 {
  superklass number;
  
  slots int-fast32-t;

  const slots-t min = INT_FAST32_MIN;
  const slots-t max = INT_FAST32_MAX;
}
klass int-fast64 {
  superklass number;
  
  slots int-fast64-t;

  const slots-t min = INT_FAST64_MIN;
  const slots-t max = INT_FAST64_MAX;
}
klass int-least8 {
  superklass number;
  
  slots int-least8-t;

  const slots-t min = INT_LEAST8_MIN;
  const slots-t max = INT_LEAST8_MAX;
}
klass int-least16 {
  superklass number;
  
  slots int-least16-t;

  const slots-t min = INT_LEAST16_MIN;
  const slots-t max = INT_LEAST16_MAX;
}
klass int-least32 {
  superklass number;
  
  slots int-least32-t;

  const slots-t min = INT_LEAST32_MIN;
  const slots-t max = INT_LEAST32_MAX;
}
klass int-least64 {
  superklass number;
  
  slots int-least64-t;

  const slots-t min = INT_LEAST64_MIN;
  const slots-t max = INT_LEAST64_MAX;
}
klass intmax {
  superklass number;
  
  slots intmax-t;

  const slots-t min = INTMAX_MIN;
  const slots-t max = INTMAX_MAX;

  // INTMAX_C(v)
}
klass intptr {
  superklass number;
  
  slots intptr-t;

  const slots-t min = INTPTR_MIN;
  const slots-t max = INTPTR_MAX;
}
klass uint8 {
  superklass number;
  
  slots uint8-t;

  const slots-t max = UINT8_MAX;

  // UINT8_C(v)
}
klass uint16 {
  superklass number;
  
  slots uint16-t;

  const slots-t max = UINT16_MAX;

  // UINT16_C(v)
}
klass uint32 {
  superklass number;
  
  slots uint32-t;

  const slots-t max = UINT32_MAX;

  // UINT32_C(v)

  method compare(object-t self, object-t other) -> int-t {
    assert(nullptr != other);
    int-t result;
    if (klass-of(other) == klass || $instance?(other, klass))
      result = dkt-normalize-compare-result(cast(int-t)(unbox(self) - unbox(other)));
    else
      result = $compare(super, other);
    return result;
  }
}
klass uint64 {
  superklass number;
  
  slots uint64-t;

  const slots-t max = UINT64_MAX;

  // UINT64_C(v)
}
klass uint-fast8 {
  superklass number;
  
  slots uint-fast8-t;

  const slots-t max = UINT_FAST8_MAX;
}
klass uint-fast16 {
  superklass number;
  
  slots uint-fast16-t;

  const slots-t max = UINT_FAST16_MAX;
}
klass uint-fast32 {
  superklass number;
  
  slots uint-fast32-t;

  const slots-t max = UINT_FAST32_MAX;
}
klass uint-fast64 {
  superklass number;
  
  slots uint-fast64-t;

  const slots-t max = UINT_FAST64_MAX;
}
klass uint-least8 {
  superklass number;
  
  slots uint-least8-t;

  const slots-t max = UINT_LEAST8_MAX;
}
klass uint-least16 {
  superklass number;
  
  slots uint-least16-t;

  const slots-t max = UINT_LEAST16_MAX;
}
klass uint-least32 {
  superklass number;
  
  slots uint-least32-t;

  const slots-t max = UINT_LEAST32_MAX;
}
klass uint-least64 {
  superklass number;
  
  slots uint-least64-t;

  const slots-t max = UINT_LEAST64_MAX;
}
klass uintmax {
  superklass number;
  
  slots uintmax-t;

  const slots-t max = UINTMAX_MAX;

  // UINTMAX_C(v)
}
klass uintptr {
  superklass number;
  
  slots uintptr-t;

  const slots-t max = UINTPTR_MAX;

  method dump(object-t self) -> object-t {
    $dump(super);
    fprintf(stderr, "%p:%p { slots=\"%lu\" }\n",
            cast(ptr-t)self, cast(ptr-t)unbox(self), unbox(self));
    return self;
  }
}
