// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include-for <functional> std::function;

module dakota-core;

// returned by $iterator-func(), $forward-iterator-func(), $backward-iterator-func()
klass iterator-func {
  slots std::function<object-t ()>;
}
klass iterator {
  method next(object-t self) -> object-t;
  method next?(object-t self) -> bool-t;
  method item(object-t self) -> object-t;
  method set-item(object-t self, object-t item) -> object-t;
  method remove(object-t self) -> object-t;
}

// for|loop [forward] ([object-t] i in s)
// =>
// for (iterator-func-t _f = $forward-iterator-func(s); object-t i = _f(); /**/)

// for|loop backward ([object-t] i in s)
// =>
// for (iterator-func-t _f = $backward-iterator-func(s); object-t i = _f(); /**/)

// s.each[-forward] { |[object-t] i| ... }
// =>
// for (iterator-func-t _f = $forward-iterator-func(s); object-t i = _f(); /**/) { ... }

// s.each-backward { |[object-t] i| ... }
// =>
// for (iterator-func-t _f = $backward-iterator-func(s); object-t i = _f(); /**/) { ... }
