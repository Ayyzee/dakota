// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota-core;

// returned by $iterator-context() or collection::iterator-context()
klass iterator-context {
  slots {
    object-t iter;
    method-t next;
  }
}
trait iterator {
  method next(object-t self) -> object-t;
  method next?(object-t self) -> bool-t;
  method element(object-t self) -> object-t;
  method set-element(object-t self, object-t element) -> object-t;
  method remove(object-t self) -> object-t;
}

// only next() (or prev()) (iterator-context() is already provided)

// for|loop [forward] (object-t e in s)
// =>
// for (iterator-context-t _c_ = $iterator-context(self, selector(next(object-t));
//                                                 object-t e = _c_.next(_c_.iter); /**/)
// or
//
// for|loop backward (object-t e in s)
// =>
// for (iterator-context-t _c_ = $iterator-context(self, selector(prev(object-t));
//                                                 object-t e = _c_.next(_c_.iter); /**/)
