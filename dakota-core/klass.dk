// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cassert>
# include <cinttypes>
# include <cstdio>
# include <cstring>

# include "config.hh"
# include "dakota-rt-private.hh"
# include "dso.hh" // dso-symbol-for-address()
# include "private.hh"
# include "safe-str.hh"
# include "sorted-array.hh"

# if 0

# define SET-METHOD-FOR-SELECTOR( methods, selector, method) (methods)->addrs[(selector)] = (method)
# define METHOD-FOR-SELECTOR(     methods, selector)         (methods)->addrs[(selector)]

# else

func alloc-instance(ssize-t total-size, symbol-t kls-name, symbol-t instance-name) -> object::slots-t* {
  object::slots-t* instance = cast(object::slots-t*)dkt::alloc(total-size);
# if defined DEBUG
  echo-stuff(instance, "alloc", kls-name, instance-name);
# endif
  return instance;
}
inline func SET-METHOD-FOR-SELECTOR(methods::slots-t* methods,
                                    selector-t        selector,
                                    method-t          method) -> void {
  methods->addrs[selector] = method;
  return;
}
inline func METHOD-FOR-SELECTOR(const methods::slots-t* methods,
                                selector-t              selector) -> method-t {
  return methods->addrs[selector];
}
# endif

module dakota-core;

klass assoc-node;
klass bit-vector;
klass method-alias;
klass named-info;
klass no-such-method-exception;
klass object-output-stream;
klass property;
klass result;
klass selector-node;
klass sorted-array;
klass std-compare;
klass symbol;
klass vector;

thread-local super-t            dkt-current-context =   {nullptr, nullptr};
thread-local const signature-t* dkt-current-signature = nullptr;

[[so-export]] func dkt-null-method(object-t o) -> object_t {
  throw $make(no-such-method-exception::klass(), #object: o, #context: &dkt-current-context, #signature: dkt-current-signature);
  return o; // should never be reached, but code fails user -fsanitize=address when return type is 'void'
}
klass selector-pair-compare {
  slots (*)(const selector-pair-t*, const selector-pair-t*) -> cmp-t;
}
klass selector-pair {
  slots {
    const signature-t* key;
    selector-node-t*   element;
  }
  method compare(const slots-t* s, const slots-t* other-s) -> cmp-t {
    assert(s != nullptr);
    assert(other-s != nullptr);
    cmp-t result = 0;
    if (s->key != other-s->key)
      result = signature::compare(s->key, other-s->key);
    return result;
  }
}
static const int64-t gbl-num-generics = 512;
static selector-pair-t[gbl-num-generics] gbl-selectors;
static sorted-array-t gbl-selectors-table = { .elements = gbl-selectors,
                                              .count =    0,
                                              .capacity = scountof(gbl-selectors),
                                              .size =     ssizeof(gbl-selectors[0]),
                                              .compare =  cast(std-compare-t)cast(selector-pair-compare-t)selector-pair::compare };
static const int64-t selector-count-max = 255;
/*LOCAL*/ func selector-count() -> int64-t {
  assert(0 < gbl-selectors-table.count);
  assert(selector-count-max > gbl-selectors-table.count);
  return gbl-selectors-table.count;
}

//   void dump-selectors()
//   {
//     for (int64-t index = 0; index < selector-count(); index++)
//     {
//       symbol-t   selector =  gbl-selectors[index]->name;
//       int64-t selector =  *gbl-selectors[index]->ptr;
//       char-t[1024] buffer; buffer[0] = NUL;

//       printf("pair[%03u]: selector = %03u, selector = %s\n",
//              index, selector, selector);
//     }
//     return;
//   }
/*LOCAL*/ func default-superklass-name() -> symbol-t {
  return #object;
}
static func default-superklass() -> object-t {
  assert(object::_klass_ != nullptr);
  return object::_klass_;
}
static func selector-for-signature(const signature-t* signature) -> selector-t {
  selector-pair-t pair = { .key = signature, .element = nullptr };
  selector-pair-t* found-pair =
    cast(selector-pair-t*)sorted-array::bsearch(&gbl-selectors-table, &pair);
  selector-t selector = *(found-pair->element->ptr);
  return selector;
}
static func method-for-signature(const methods::slots-t* methods, const signature-t* signature) -> method-t {
  selector-t selector = selector-for-signature(signature);
  assert(selector < methods->count);
  method-t m = METHOD-FOR-SELECTOR(methods, selector);
  return m;
}
/*LOCAL*/ func import-selectors(signature-t** signatures, selector-node-t* selector-nodes) -> void {
  int64-t i = 0;
  while (1) {
    signature-t*     signature =     signatures[i];
    selector-node-t* selector-node = &selector-nodes[i];
    i++;

    assert((signature == nullptr && selector-node->ptr == nullptr) ||
           (signature != nullptr && selector-node->ptr != nullptr));
    if (signature == nullptr)
      break;
    selector-pair-t pair = { .key = signature, .element = selector-node };
    result-t found-result = sorted-array::search(&gbl-selectors-table, &pair);
    selector-pair-t* found-pair = cast(decltype(found-pair))found-result.element;

    if (found-pair == nullptr) {
      *(pair.element->ptr) = cast(selector-t)(gbl-selectors-table.count); // may be zero
      pair.element->next = nullptr;
      sorted-array::add-at(&gbl-selectors-table, &pair, found-result.offset);
    } else {
      *(selector-node->ptr) = *(found-pair->element->ptr);
      selector-node->next = found-pair->element;
      found-pair->element->next = selector-node;
    }
  }
  return;
}
// iterate over list of named-info-t
static func ptr-from-info(named-info-t* info, symbol-t key) -> const void* {
  named-info-t* current-info = info;
  const void* previous-element = nullptr;
  const void* element = nullptr;
  do {
    element = cast(const void*)named-info::at(current-info, key);
    assert((previous-element == nullptr && element != nullptr) ||
           (previous-element != nullptr && element == nullptr) ||
           (previous-element == element));
    if (element == nullptr && previous-element != nullptr)
      element = previous-element;
  } while ((current-info = current-info->next) != nullptr);

  return element;
}
static func size-from-info(named-info-t* info, symbol-t key) -> ssize-t {
  named-info-t* current-info = info;
  ssize-t previous-element = 0;
  ssize-t element = 0;
  do {
    element = named-info::at(current-info, key);
    assert((previous-element == 0 && element != 0) ||
           (previous-element != 0 && element == 0) ||
           (previous-element == element));
    if (element == 0 && previous-element != 0)
      element = previous-element;
    else
      previous-element = element;
  } while ((current-info = current-info->next) != nullptr);

  return element;
}
static func superklass-from-info(named-info-t* info) -> object-t {
  object-t result = nullptr;
  object-t* superkls-ptr = cast(object-t*)ptr-from-info(info, #superklass);
  if (superkls-ptr)
    result = *superkls-ptr;
  return result;
}
// the extra arg (name) is so we can determin if there is an interposer registered
static func superklass-from-info(named-info-t* info, symbol-t name) -> object-t {
  object-t superkls = superklass-from-info(info);
  USE(name);
  return superkls;
}
/*LOCAL*/ func superklass-name-from-info(named-info-t* info) -> symbol-t {
  symbol-t superkls-name = cast(symbol-t)ptr-from-info(info, #superklass-name);

  if (superkls-name == nullptr && name-from-info(info) != #object)
    superkls-name = default-superklass-name();
  return superkls-name;
}
/*LOCAL*/ func superklass-name-from-info(named-info-t* info, symbol-t name) -> symbol-t {
  symbol-t superkls-name = superklass-name-from-info(info);
  if (superkls-name == nullptr) {
    object-t superkls = superklass-from-info(info, name);
    if (!root-superklass?(superkls))
      superkls-name = name-of(superkls);
  }
  if (name != nullptr) {
    symbol-t interposer-name = interposer-name-for-klass-name(name);
    if (interposer-name != nullptr) {
//       fprintf(stderr, "{ name: %s, interposer-name: %s },\n", name, interposer-name);
      if (superkls-name != nullptr && superkls-name != interposer-name) {
//         fprintf(stderr, "{ interposer-name: %s, superklass-name: %s },\n", interposer-name, superkls-name);
        add-interpose-prop(interposer-name, superkls-name);
        superkls-name = interposer-name;
      }
    }
  }
  return superkls-name;
}
/*LOCAL*/ func name-from-info(named-info-t* info) -> symbol-t {
  symbol-t name = cast(symbol-t)ptr-from-info(info, #name);
  return name;
}
/*LOCAL*/ func klass-name-from-info(named-info-t* info) -> symbol-t {
  symbol-t kls-name = cast(symbol-t)ptr-from-info(info, #klass-name);

  if (kls-name == nullptr)
    kls-name = default-klass-name();
  return kls-name;
}
const size-t k-alignment = 8;

inline func round-alignment(size-t n) -> size-t {
  size-t result = (n + (k-alignment - 1)) & ~(k-alignment - 1);
  return result;
}
/*LOCAL*/ func size-from-info(named-info-t* info) -> ssize-t {
  ssize-t size = size-from-info(info, #size);
  return size;
}
// offset is 'offset() of superklass' + 'size of superklass'
/*LOCAL*/ func offset-from-info(named-info-t* info) -> ssize-t {
  ssize-t result;

  symbol-t name = name-from-info(info);
  if (name == #object)
  { // klass is "object"
    result = 0;
  } else {
    symbol-t superkls-name = superklass-name-from-info(info, name);
    if (superkls-name == nullptr)
      superkls-name = default-superklass-name();
    named-info-t* superkls-info = info-for-name(superkls-name);
    ssize-t superkls-offset = offset-from-info(superkls-info); // recursive
    ssize-t superkls-size =   size-from-info(superkls-info);
    result = superkls-offset + superkls-size;
  }
  result = cast(ssize-t)round-alignment(cast(size-t)result);
  return result;
}
klass resource-usage {
  slots {
    int64-t memory;
    int64-t instances;
    int64-t method-memory;
    int64-t method-count;
  }
  method add-alloc(slots-t* s, ssize-t size) -> slots-t* {
    s->instances++;
    s->memory += size;
    return s;
  }
  method log-alloc(const slots-t* s, object-t o) -> const slots-t* {
    printf("%3zi, size = %2zi, total-memory = %4zi, name = \"%s\"\n",
           s->instances,
           klass::unbox(o).offset + klass::unbox(o).size,
           s->memory,
           name-of(o));
    return s;
  }
  method log-alloc(const slots-t* s, ssize-t size, symbol-t name) -> const slots-t* {
    printf("%3zi, size = %2zi, total-memory = %4zi, name = \"%s\"~\n",
           s->instances, size, s->memory, name);
    return s;
  }
  method log-method-alloc(const slots-t* s) -> const slots-t* {
    printf("method-count=%zi, method-memory=%zi\n", s->method-count, s->method-memory);
    return s;
  }
}
# if defined DKT-DUMP-MEM-FOOTPRINT
resource-usage::slots-t gbl-ru = { .memory = 0, .instances = 0, .method-memory = 0, .method-count = 0 };
# endif

klass initialize-func { slots (*)(object-t) -> void; }
klass finalize-func   { slots (*)(object-t) -> void; }

klass methods {
  slots {
    method-t* addrs; // first so its offset is 0
    ssize-t   count;
  }
}
klass klass {
  slots {
    ssize-t          offset; // first so its offset is 0
    methods-t        methods;
    ssize-t          size;
    object-t         superklass;
    symbol-t         name; // redundant but convenient
    const symbol-t*  traits; // redundant but convenient
    named-info-t*    info;
    object-t         behavior; // bit-vector
  }
  method alloc(object-t self, str-t file, ssize-t line) -> object-t {
    DKT-LOG-OBJECT-ALLOC("'file':'%s','line':'%zi','func':'%s','args':['%s']",
                         file, line, __method__->name, name-of(self));
    object-t instance = $alloc(self);
    return instance;
  }
  method alloc(object-t self) -> object-t {
    ssize-t total-size = self.offset + self.size;

# if defined DKT-DUMP-MEM-FOOTPRINT
    resource-usage::add-alloc(&gbl-ru, total-size);
    resource-usage::log-alloc(&gbl-ru, self);
# endif
    object::slots-t* instance-slots = alloc-instance(total-size, name-of(self));
    instance-slots->klass =     self;
    instance-slots->ref-count = 0;
    object-t instance = object-t{instance-slots};
    return instance;
  }
  method name(object-t self) -> symbol-t {
    symbol-t name = name-of(self);
    return name;
  }
  static func alloc-methods(object-t self, ssize-t methods-count) -> object-t {
    assert(0 < methods-count);
    assert(selector-count-max > methods-count);
    self.methods.count = methods-count;
    self.methods.addrs = cast(method-t*)dkt::alloc(ssizeof(method-t) * self.methods.count);

# if defined DKT-DUMP-MEM-FOOTPRINT
    gbl-ru.method-count =  self.methods.count;
    gbl-ru.method-memory += gbl-ru.method-count * ssizeof(method-t);
    resource-usage::log-method-alloc(&gbl-ru);
# endif

    for (ssize-t index = 0; index < self.methods.count; index++)
      self.methods.addrs[index] = DKT-NULL-METHOD;
    return self;
  }
  static func init-methods(object-t self) -> object-t {
    if (!root-superklass?(superklass-of(self))) {
      memcpy(self.methods.addrs, unbox(superklass-of(self)).methods.addrs,
             cast(size-t)(ssizeof(method-t) * unbox(superklass-of(self)).methods.count));
    }
    return self;
  }
  // method va-method-for-selector(object-t self, selector-t selector) -> va-method-t {
  //   throw $make(exception::klass(), #msg: "not yet implemented");
  //   // return nullptr
  // }
  method method-for-selector?(object-t self, selector-t selector) -> bool-t {
    assert(selector < self.methods.count);
    bool-t result = false;
    method-t m = $method-for-selector(self, selector);
    if (m != DKT-NULL-METHOD) {
      result = true;
    }
    return result;
  }
  method method-for-selector(object-t self, selector-t selector) -> method-t {
    assert(selector < self.methods.count);
    method-t m = METHOD-FOR-SELECTOR(&self.methods, selector);
    return m;
  }
  method remove-method-for-selector(object-t self, selector-t selector) -> method-t {
    assert(selector < self.methods.count);
    method-t m = METHOD-FOR-SELECTOR(&self.methods, selector);
    SET-METHOD-FOR-SELECTOR(&self.methods, selector, DKT-NULL-METHOD); // hackhack
    if (self.behavior != nullptr)
      bit-vector::set-bit(self.behavior, cast(ssize-t)selector, false);
    return m;
  }
  method add-method-for-selector(object-t self, selector-t selector, method-t m) -> method-t {
    assert(selector < self.methods.count);
    method-t prev-m = METHOD-FOR-SELECTOR(&self.methods, selector);
    SET-METHOD-FOR-SELECTOR(&self.methods, selector, m); // hackhack
    if (self.behavior != nullptr)
      bit-vector::set-bit(self.behavior, cast(ssize-t)selector, true);
    return prev-m;
  }
  method dump(object-t self) -> object-t {
    $dump(super);
    fprintf(stderr, "%p {", cast(ptr-t)self);

    // name
    if (name-of(self) != nullptr)
      fprintf(stderr, " name=%p #%s", cast(ptr-t)(name-of(self)), name-of(self));
    else
      fprintf(stderr, " name=%s", #nullptr);

    // superklass
    if (!root-superklass?(superklass-of(self)))
      fprintf(stderr, ", superklass=%p <%s>", cast(ptr-t)superklass-of(self), name-of(superklass-of(self)));
    else if (superklass-of(self) == null)
      fprintf(stderr, ", superklass=%p %s", cast(ptr-t)superklass-of(self), #null);
    else if (superklass-of(self) == nullptr)
      fprintf(stderr, ", superklass=%s", #nullptr);

    // size
    fprintf(stderr, ", size=%zi", self.size);
    // offset
    fprintf(stderr, ", offset=%zi", self.offset);

    // methods.count, methods.addrs
    fprintf(stderr, ", methods.count=%zi", self.methods.count);
    fprintf(stderr, ", methods.addrs=%p",  cast(ptr-t)self.methods.addrs);

    // traits
    fprintf(stderr, ", traits=["); {
      const symbol-t* traits = self.traits;;
      if (traits != nullptr) {
        fprintf(stderr, " ");
        str-t delim = "";
        ssize-t i = 0;
        symbol-t trait-name;
        while ((trait-name = traits[i++]) != nullptr) {
          fprintf(stderr, "%s#%s", delim, trait-name);
          delim = ", ";
        }
        fprintf(stderr, " ");
      }
    }
    fprintf(stderr, "]");
    fprintf(stderr, ", behavior=%p", cast(ptr-t)self.behavior);
    fprintf(stderr, " }\n");
    if (0)
      if (self.behavior != nullptr)
        $dump(self.behavior);
    return self;
  }
  method traits(object-t self) -> object-t {
    object-t seq = $make(vector::klass());
    const symbol-t* traits = self.traits;;

    if (traits != nullptr) {
      ssize-t i = 0;
      symbol-t trait-name;
      while ((trait-name = traits[i++]) != nullptr)
        $add-last(seq, symbol::box(trait-name));
    }
    return seq;
  }
  method dump-methods(const slots-t* s) -> ssize-t {
    if (s->behavior != nullptr)
      $dump(s->behavior);
    selector-pair-t* selectors = cast(selector-pair-t*)(gbl-selectors-table.elements);
    ssize-t max-width = 0;

    if (1) {
      for (ssize-t index = 0; index < s->methods.count; index++) {
        const signature-t* signature = cast(const signature-t*)selectors[index].key;
        method-t m = method-for-signature(&s->methods, signature);
        if (m != nullptr) {
          ssize-t width = cast(ssize-t)safe-strlen(signature->name) + 1 +
                          cast(ssize-t)safe-strlen(signature->param-types) + 1;
          if (width > max-width)
            max-width = width;
        }
      }
    }
    stream-t out = stdout;

    fprintf(out, "{\n");
    for (ssize-t index = 0; index < s->methods.count; index++) {
      const signature-t* signature =  cast(const signature-t*)selectors[index].key;
      method-t m = method-for-signature(&s->methods, signature);

      if (m != nullptr) {
        fprintf(out, "  '%s(%s)'", signature->name, signature->param-types);
        ssize-t width = cast(ssize-t)safe-strlen(signature->name) + 1 +
                        cast(ssize-t)safe-strlen(signature->param-types) + 1;
        while (width < max-width) {
          fprintf(out, " ");
          width++;
        }
        str-t symbol-name = dso-symbol-name-for-addr(cast(ptr-t)(m));

        if (symbol-name != nullptr) {
          str-t demangled-symbol-name = dkt::demangle(symbol-name);
          fprintf(out, " : '%s',", demangled-symbol-name);
          dkt::demangle-free(demangled-symbol-name);
        } else {
          fprintf(out, " : %p,", cast(ptr-t)m);
        }
        fprintf(out, "\n");
      }
    }
    fprintf(out, "},\n");
    return s->methods.count;
  }
  // use for both klasses (and klass-x) and traits (and trait-x)
  static func add-methods(object-t      self,
                          named-info-t* info,
                          symbol-t      symbol-method-signatures,
                          symbol-t      symbol-method-addresses,
                          bool-t       should-override) -> void {
    named-info-t* current-info = info;
    do {
      signature-t** method-signatures = cast(signature-t**)named-info::at(current-info, symbol-method-signatures);
      method-t*    method-addresses = cast(method-t*)named-info::at(current-info, symbol-method-addresses);
      assert((method-signatures != nullptr && method-addresses != nullptr) ||
             (method-signatures == nullptr && method-addresses == nullptr));
      if (method-signatures != nullptr) {
        ssize-t index = 0;
        signature-t* signature;
        method-t   address;

        FUNC add-method-and-set-behavior = [&](selector-t _selector, method-t _address) -> method-t {
          method-t prev-address = add-method-for-selector(self, _selector, _address);
          if (self.behavior != nullptr) {
            bit-vector::set-bit(self.behavior, cast(ssize-t)_selector, true); // $set-bit()
          }
          return prev-address;
        };

        while ((signature = method-signatures[index]) != nullptr) {
          if ((address = method-addresses[index]) != nullptr) {
            // can NOT dynamicly dispatch
            selector-t selector = selector-for-signature(signature); // $selector-for-signature()
            if (!should-override) { // don't set if an already valid method is present
              method-t prev-address = method-for-selector(self, selector);
              if (prev-address == nullptr || prev-address == dkt-null-method) { // not DKT-NULL-METHOD
                prev-address = add-method-and-set-behavior(selector, address);
                assert(prev-address == nullptr || prev-address == dkt-null-method); // not DKT-NULL-METHOD
              }
            } else {
              add-method-and-set-behavior(selector, address);
            }
          } else {
            // ???
          }
          index++;
        }
      }
    } while ((current-info = current-info->next) != nullptr);
    return;
  }
  static func load-traits(const symbol-t* traits) -> void {
    if (traits == nullptr || traits[0] == nullptr)
      return;
    ssize-t i = 0;
    symbol-t trait-name;
    while ((trait-name = traits[i++]) != nullptr) {
      named-info-t* trait-info = info-for-name(trait-name);
      load-traits(cast(const symbol-t*)named-info::at(trait-info, #traits));
    }
    return;
  }
  static func add-traits(object-t self, const symbol-t* traits) -> void {
    if (traits == nullptr || traits[0] == nullptr)
      return;
    ssize-t i = 0;
    symbol-t trait-name;
    while ((trait-name = traits[i++]) != nullptr) {
      named-info-t* trait-info = info-for-name(trait-name);
      add-traits(self, cast(const symbol-t*)named-info::at(trait-info, #traits));
      bool-t should-override;
      add-methods(self, trait-info, #method-signatures, #method-addresses, should-override = false);
      add-methods(self, trait-info, #exported-method-signatures, #exported-method-addresses, should-override = false);
    }
    return;
  }
  static func traits-initialize(object-t self, const symbol-t* traits) -> void {
    if (traits == nullptr || traits[0] == nullptr)
      return;
    ssize-t i = 0;
    symbol-t trait-name;
    while ((trait-name = traits[i++]) != nullptr) {
      named-info-t* trait-info = info-for-name(trait-name);
      initialize-func-t initialize = cast(initialize-func-t)named-info::at(trait-info, #initialize);
      if (initialize != nullptr) {
        DKT-LOG-INITIAL-FINAL("'action':'%s','args':['%s:%s'],'klass':'%s','file':'%s'",
                              "initialize", trait-name, "klass", name-of(self),
                              cast(symbol-t)named-info::at(self.info, #file));
        initialize(self); // calls user code
      }
    }
    return;
  }
  static func klass-initialize(object-t self) -> void {
    if (self.traits != nullptr)
      traits-initialize(self, self.traits); // calls user code (eventually)
    initialize-func-t initialize = cast(initialize-func-t)named-info::at(self.info, #initialize);
    if (initialize != nullptr) {
      DKT-LOG-INITIAL-FINAL("'action':'%s','args':['%s'],'klass':'%s','file':'%s'",
                            "initialize", "klass", name-of(self),
                            cast(symbol-t)named-info::at(self.info, #file));
      initialize(self); // calls user code
    }
    return;
  }
  // func traits-finalize(object-t self, const symbol-t* traits) -> void {
  //   if (traits == nullptr || traits[ == nullptr0])
  //     return;
  //   ssize-t i = 0;
  //   symbol-t trait-name;
  //   // finalization must be in the opposite order of initialization
  //   while (traits[i] != nullptr)
  //     i++;
  //   // traits[i] is nullptr here
  //   while (0 < i) {
  //     trait-name = traits[--i];
  //     named-info-t* info = info-for-name(trait-name);

  //     if (info != nullptr) {
  //       method-t trait-finalize = cast(method-t)named-info::at(info, #finalize);
  //       if (trait-finalize != nullptr) {
  //         DKT-LOG-INITIAL-FINAL("'action':'%s','args':['%s:%s'],'klass':'%s','file':'%s'",
  //                               "finalize", trait-name, "klass",
  //                               cast(symbol-t)named-info::at(self.info, #name),
  //                               cast(symbol-t)named-info::at(self.info, #file));
  //         trait-finalize(self);
  //       }
  //     }
  //   }
  //   return;
  // }
  method behavior?(object-t self, object-t kls) -> bool-t {
# if defined DKT-OMIT-BEHAVIOR
    return false;
# endif
    assert((self.behavior != nullptr) || (unbox(kls).behavior != nullptr));
    bool-t state = $bit-and?(self.behavior, unbox(kls).behavior);
    return state;
  }
  static func behavior(object-t self, ssize-t methods-count) -> object-t {
# if defined DKT-OMIT-BEHAVIOR
    return nullptr;
# endif
    assert(0 < methods-count);
    assert(selector-count-max > methods-count);
    assert(self.behavior == nullptr);
    self.behavior = $make(bit-vector::klass(), #initial-capacity: methods-count);
    return self.behavior;
  }
  method behavior(object-t self) -> object-t {
# if defined DKT-OMIT-BEHAVIOR
    return nullptr;
# endif
    if (self.behavior != nullptr)
      return self.behavior;
    self.behavior = behavior(self, selector-count());
    for (ssize-t index = 0; index < self.methods.count; index++)
      if (self.methods.addrs[index] != DKT-NULL-METHOD)
        bit-vector::set-bit(self.behavior, index, true);
    return self.behavior;
  }
  method dealloc(object-t self) -> object-t {
# if defined DEBUG
    echo-stuff(cast(object::slots-t*)self, "dealloc", name-of(klass-of(self)));
# endif
    dkt::dealloc(self.methods.addrs);
    object-t result = $dealloc(super);
    return result;
  }
  static func set-all-klass-ptrs(object-t self) -> void {
    assoc-node-t* imported-klss = imported-klasses-for-klass(name-of(self));
    if (null)
      set-read-write();
    assoc-node::set-elements(imported-klss, self); // write-kls-ptr
    if (null)
      set-read-only();
    return;
  }
  static func dump-random(object-t self) -> void {
    if (getenv("DKT_DUMP_RANDOM") != nullptr) {
      printf("klass: %s\n", name-of(self));
      for (ssize-t index = 0; index < self.methods.count; index++) {
        printf("method: %p\n", cast(ptr-t)self.methods.addrs[index]);
      }
    }
    return;
  }
  // called from init-klass() from dk-init-runtime()
  /*LOCAL*/ func init(object-t self, named-info-t* info) -> object-t {
    assert(info != nullptr);
    named-info::sort(info);
    self.info = info;
    self.name = name-from-info(self.info);
//     printf("init(): kls-name: %s\n", self.name);
    assert(name-of(self) != nullptr);
    assert(#trait != cast(symbol-t)named-info::at(self.info, #type));
    // fprintf(stderr, "%p { name=%s }\n", cast(ptr-t)self, name-of(self));
    self.offset = offset-from-info(self.info);
    self.size = size-from-info(self.info);
    self.superklass = superklass-from-info(self.info, name-of(self)); // interposing
    if (superklass-of(self) == nullptr) {
      symbol-t superkls-name = superklass-name-from-info(self.info, name-of(self));
      if (superkls-name == nullptr)
        self.superklass = default-superklass();
      else
        self.superklass = dk-klass-for-name(superkls-name);
    }
    self.methods = { .addrs = nullptr, .count = 0 };
    self.behavior = nullptr;
# if !defined DKT-OMIT-BEHAVIOR
    if (bit-vector::_klass_ != nullptr) // don't change to bit-vector::klass(), it will fail
      self.behavior = behavior(self, selector-count());
# endif
    alloc-methods(self, selector-count());
    init-methods(self);
    bool-t should-override;
    add-methods(self, self.info, #method-signatures, #method-addresses, should-override = true);
    add-methods(self, self.info, #exported-method-signatures, #exported-method-addresses, should-override = true);
    method-alias-t* method-aliases = cast(method-alias-t*)named-info::at(self.info, #method-aliases);
    if (method-aliases != nullptr) {
      ssize-t i = 0;
      const signature-t* method-signature;
      while ((method-signature = method-aliases[i].method-signature) != nullptr) {
        const signature-t* alias-signature = method-aliases[i].alias-signature;
        selector-t alias-selector =  selector-for-signature(alias-signature);
        selector-t method-selector = selector-for-signature(method-signature);
        add-method-for-selector(self,
                                alias-selector,
                                METHOD-FOR-SELECTOR(&self.methods, method-selector));
        i++;
      }
    }
    self.traits = cast(const symbol-t*)named-info::at(self.info, #traits);
    if (self.traits != nullptr) {
      load-traits(self.traits);
      add-traits(self, self.traits);
    }
    set-all-klass-ptrs(self); // do this as late as possible, but before calling klass-initialize()
    klass-initialize(self);
    dump-random(self);
    return self;
  } // init(object-t self, named-info-t*)
  method init(object-t      self,
              named-info-t* info-slots: nullptr,
              object-t      info:       nullptr) -> object-t {
    self = $init(super);
    assert(!(info-slots == nullptr &&
             info == nullptr));
    named-info-t* tmp-info-slots;
    if (info == nullptr)
      tmp-info-slots = info-slots;
    else
      tmp-info-slots = &named-info::mutable-unbox(info);
    object-t result = init(self, tmp-info-slots);
# if defined DEBUG
    echo-stuff(cast(object::slots-t*)self, "init", name-of(klass-of(self)), name-of(self));
# endif
    return result;
  }
  method subklass?(object-t self, object-t kls) -> bool-t {
    bool-t state = false;
    object-t tmp-kls = self;

    while (!root-superklass?((tmp-kls = superklass-of(tmp-kls)))) {
      if (tmp-kls == kls) {
        state = true;
        break;
      }
    }
    return state;
  }
  method klass-with-trait(object-t self, symbol-t trait) -> object-t {
    return::klass-with-trait(self, trait);
  }
  method str(object-t self) -> str-t {
    symbol-t name = name-of(self);
    ssize-t name-len = cast(ssize-t)safe-strlen(name);
    char-t* buffer = cast(char-t*)dkt::alloc(ssizeof(char-t) * (name-len + (1)));
    snprintf(buffer, cast(size-t)(name-len + (1)), "%s", name);
    return buffer;
  }
  method write-slots(object-t self, object-t out) -> object-t {
    $write-slots(super, out);
    $write-slots-start(out, _klass_);

    $write-element(out, name-of(self),   "name");
    $write-element(out, self.size,   "size");
    $write-element(out, self.offset, "offset");
    $write-element-idref(out, superklass-of(self), "superklass");

    $write-slots-end(out);
    return self;
  }
}
func dkt-dump-methods(const klass::slots-t* s) -> ssize-t {
  return klass::dump-methods(s);
}
func dkt-dump-methods(object-t kls) -> ssize-t {
  const klass::slots-t& kls-s = unbox(kls);
  return dkt-dump-methods(&kls-s);
}
