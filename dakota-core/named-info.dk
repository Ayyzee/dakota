// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cinttypes>
# include <cstdlib>
# include <cstring>

# include "private.h"
# include "named-info.h"

module dakota-core;

klass cmp;
klass property-compare;
klass property;
klass std-compare;
klass symbol;

klass named-info-compare {
  slots (*)(const named-info-t*, const named-info-t*) -> cmp-t;
}
klass named-info {
  slots {
    slots-t*    next;
    ssize-t     count;    // sizeof(property)/sizeof(property[0])
    property-t* items; // property
  //            size = sizeof(property::slots-t)
  //            compare = property::compare()
  }
  method init(object-t self) -> object-t {
    self = $init(super);
    self.next =  nullptr;
    self.count = 0;
    self.items = nullptr;
    return self;
  }
  method check(const slots-t* s) -> ssize-t {
    for (int64-t i = 0; i < s->count; i++) {
      // need to add test for #name (since its required)

      property-t item = s->items[i];
      property::check(&item);
    }
    return 0;
  }
  method sort(slots-t* s) -> slots-t* {
    qsort(s->items,
          cast(size-t)s->count,
          sizeof(s->items[0]),
          cast(std-compare-t)cast(property-compare-t)property::compare);
    return s;
  }
  method at(const slots-t* s, symbol-t key) -> intptr-t {
    intptr-t item = cast(intptr-t)nullptr;
    property::slots-t property = {.key =  cast(symbol-t)key,
                                  .item = cast(intptr-t)nullptr};
    property::slots-t* property-result =
      cast(property::slots-t*)bsearch(&property,
                                      s->items,
                                      cast(size-t)s->count,
                                      sizeof(s->items[0]),
                                      cast(std-compare-t)cast(property-compare-t)property::compare);
    if (property-result != nullptr)
      item = property-result->item;
    return item;
  }
  method at(const slots-t* s, symbol-t key, intptr-t default-item) -> intptr-t {
    intptr-t item = at(s, key);
    if (item == cast(intptr-t)nullptr) // nullptr (i.e. zero) must be illegal for this to work
      item = default-item;
    return item;
  }
  method dump(const slots-t* s) -> const slots-t* {
    const slots-t* current = s;
    while (current != nullptr) {
      printf("{\n");
      for (int64-t i = 0; i < current->count; i++) {
        symbol-t key =  current->items[i].key;
        intptr-t item = current->items[i].item;
        printf("  #%s: %p", key, cast(ptr-t)item);

        switch (key) {
          case #file:
            printf("  \"%s\",", cast(str-t)(item));
            break;
          case #name:
          case #type:
            printf("  #%s,",    cast(symbol-t)(item));
            break;
          default:
            ;
        }
        printf("\n");
      }
      printf("},\n");
      current = current->next;
    }
    return s;
  }
  method compare(const slots-t* s, const slots-t* other-s) -> cmp-t {
    assert(s != nullptr);
    assert(other-s != nullptr);
    cmp-t result = 0;
    if (s != other-s) {
      symbol-t s-name =       cast(symbol-t)at(s,       #name);
      symbol-t other-s-name = cast(symbol-t)at(other-s, #name);
      result =                symbol::compare(s-name, other-s-name);
    }
    return result;
  }
  method compare(object-t self, object-t other) -> cmp-t {
    assert(other != nullptr);
    cmp-t result = 0;
    if (self != other) {
      if (klass-of(other) == _klass_ || $instance-of?(other, _klass_))
        result = compare(&unbox(self), &unbox(other));
      else
        result = $compare(super, other);
    }
    return result;
  }
}
func dk-va-make-named-info(symbol-t name, va-list-t args) -> named-info-t* {
//   assert(name != nullptr);
  symbol-t key;
  intptr-t item;

  int64-t     props-capacity = 4;
  property-t* props =          cast(property-t*)dkt::alloc(ssizeof(property-t) * props-capacity);
  ssize-t     count =          0;

  props[count].key =  #name;
  props[count].item = cast(intptr-t)(name);
  count++;

  // symbol-t, intptr-t, <repeat>
  while ((key = va-arg(args, symbol-t)) != nullptr) {
    item = va-arg(args, intptr-t);
    if (props-capacity == count + 1) {
      props-capacity *= 2; // resize-factor should be consumer settable
      props = cast(property-t*)dkt::alloc(ssizeof(property-t) * props-capacity, props);
    }
    props[count].key =  key;
    props[count].item = item;
    count++;
  }
  // hackhack: should be allocated in previous (initial) dkt::alloc()
  named-info-t* info = cast(named-info-t*)dkt::alloc(ssizeof(named-info-t));
  info->items = props;
  info->count = count;
  info->next =  nullptr;
  sort(info);
  return info;
}
[[sentinel]] func dk-make-named-info(symbol-t name, ...) -> named-info-t* {
  va-list-t args;
  va-start(args, name);
  named-info-t* info-slots = dk-va-make-named-info(name, args);
  va-end(args);
  return info-slots;
}
func dkt-dump-named-info(const named-info-t* info) -> const named-info-t* {
  return named-info::dump(info);
}
