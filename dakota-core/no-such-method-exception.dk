// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cassert>

module dakota-core;

klass output-stream;

klass no-such-method-exception {
  superklass exception;

  slots {
    super-t      context; // used as context xor just .object (for object-t self aka 'object')
    signature-t* signature;
  }
  method init(object-t     self,
              str-t        src-file : nullptr,
              int-t        src-line : -1,
              object-t     object : nullptr,
              super-t      context : { nullptr, nullptr },
              signature-t* signature : nullptr) -> object-t {
    self = $init(super, #src-file : src-file, #src-line : src-line);
    self.signature = signature;
    if ((!object && !context.object) || (object && context.object))
      std::abort();
    self.context = { nullptr, nullptr };
    if (nullptr != context.object)
      self.context = context;
    else if (nullptr != object) 
      self.context.object = object;
    return self;
  }
  method print(object-t self, object-t out) -> object-t {
    if (nullptr == out || null == out)
      out = std-error;
    $print(super, out);
    object-t kls = klass-of(self.context.object);
    if (self.context.klass)
      kls = superklass-of(self.context.klass);

    if (nullptr == self.signature) {
      if ($instance?(self.context.object, klass::klass)) {
        $print-format(out, ", \"instance\": \"%s\", \"klass\": \"%s\"",
                         name-of(self.context.object),
                         name-of(klass-of(self.context.object)));
      } else {
        $print-format(out, ", \"instance\": %s, \"klass\": \"%s\"",
                         $str(self.context.object),
                         name-of(klass-of(self.context.object)));
      }
    } else {
      assert(kls == klass-of(self.context.object) ||
             kls == superklass-of(klass-of(self.context.object)));

      if (superklass-of(kls) == kls) {
        if ($instance?(self.context.object, klass::klass)) {
          $print-format(out, ", \"instance\": \"%s\", \"klass\": \"%s\", \"method\": \"%s(%s)\"",
                           name-of(self.context.object),
                           name-of(kls),
                           self.signature->name,
                           self.signature->param-types);
        } else {
          $print-format(out, ", \"instance\": %s, \"klass\": \"%s\", \"method\": \"%s(%s)\"",
                           $str(self.context.object),
                           name-of(kls),
                           self.signature->name,
                           self.signature->param-types);
        }
      } else {
        if ($instance?(self.context.object, klass::klass)) {
          $print-format(out, ", \"instance\": \"%s\", \"klass\": \"%s\", \"method\": \"%s(%s)\"",
                           name-of(self.context.object),
                           name-of(kls),
                           self.signature->name,
                           self.signature->param-types);
        } else {
          $print-format(out, ", \"instance\": %s, \"klass\": \"%s\". \"method\": \"%s(%s)\"",
                           $str(self.context.object),
                           name-of(kls),
                           self.signature->name,
                           self.signature->param-types);
        }
      }
    }
    return self;
  }
}
