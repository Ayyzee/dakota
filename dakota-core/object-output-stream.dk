// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cassert>

module dakota-core;

klass pair;
klass sorted-set;
klass sorted-table;
klass std-compare;
klass int64;

klass object-output-stream {
  superklass output-stream;
  klass      klass;

  slots {
    object-t objects;    // sorted-set (ptr) <objects already written>
    object-t object-from-id; // sorted-table key=id, value=object <objects to be written>
    int64-t  id;
    object-t id-from-object;        // sorted-table (ptr) key=object, value=id
  }
  method init(object-t self, stream-t stream : stdout) -> object-t {
    self = $init(super, #slots : stream);
    assert(nullptr != stream);
//     equal-t equals? = cast(equal-t)$method-for-selector(object::_klass_,
//                                                         SELECTOR(equals?(object-t, object-t));
//     compare-t compare = cast(compare-t)$method-for-selector(object::_klass_,
//                                                             SELECTOR(compare(object-t, object-t));
    self.objects =        make(sorted-set::klass());
    self.object-from-id = make(sorted-table::klass());
    self.id-from-object = make(sorted-table::klass());
    self.id =         0;
    return self;
  }
  method write-slots-start(object-t self, object-t kls) -> object-t {
    $write-table-start(self, cast(str-t)nullptr);
    if (1)
      $write-element(self, $name(kls), "-slots"); //optional
    return self;
  }
  method write-slots-end(object-t self) -> object-t {
    $write-table-end(self);
    return self;
  }
  method write(object-t self, object-t object) -> object-t {
    $write-table-start(self, cast(str-t)nullptr);
    $write-element-id(self, object);
    $write-table-end(self);
    return self;
  }
  method write-element-id(object-t self, object-t object) -> object-t {
    unless ($in?(self.objects, object)) {
      $add(self.objects, object); // only grows, never shrinks
      object-t id = $at(self.id-from-object, object, cast(object-t)nullptr);

      if (nullptr == id) {
        id = int64::box(self.id);
        $add(self.id-from-object, object, id);
        self.id++;
      }
      $remove(self.object-from-id, id); // remove if present
      $write-sequence-start(self, $str(id));
//       object-t object-klass = klass-of(object);
//       $write-element(self, $name(object-klass), "-klass");

//       if ($instance?(object, klass::_klass_))
//         $write-element(self, $name(object), "name");

      $write-slots(object, self);
      $write-sequence-end(self);
  
      while (object-t o = $remove-last(self.object-from-id))
        $write-element-id(self, $first(o)); // recursive
    }
    return self;
  }
  method write-element-idref(object-t self, object-t object, str-t key) -> object-t {
    // bugbug: key == nullptr is valid
    object-t id = $at(self.id-from-object, object, cast(object-t)nullptr);
    
    if (nullptr == id) {
      id = int64::box(self.id);
      $add(self.id-from-object, object, id);
      self.id++;
    }
    $add(self.object-from-id, id, object);

    $write-table-start(self, key);
    $write-element(self, $str(id), "idref");
    $write-table-end(self);

    return self;
  }
  method write-element(object-t self, str-t t, str-t key) -> object-t;
  method write-element(object-t self, ssize-t t, str-t key) -> object-t;
  method write-element(object-t self, ssize-t t, str-t key) -> object-t;
  method write-sequence-start(object-t self, str-t key) -> object-t;
  method write-sequence-end(object-t self) -> object-t;
  method write-table-start(object-t self, str-t key) -> object-t;
  method write-table-end(object-t self) -> object-t;
}
