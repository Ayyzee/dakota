// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cinttypes>
# include <cstdlib>
# include <atomic>

# include "private.hh"

module dakota-core;

klass exception;
klass hash;
klass resource-usage;
klass object-output-stream;
klass output-stream;
klass unbox-illegal-klass-exception; 
static func echo-stuff-common(object::slots-t* instance, str-t action, symbol-t kls-name, symbol-t instance-name = nullptr) -> void {
  if (instance-name)
    fprintf(stdout, "%p %s #instance-of %s #name %s\n", cast(ptr-t)instance, action, kls-name, instance-name);
  else
    fprintf(stdout, "%p %s #instance-of %s\n", cast(ptr-t)instance, action, kls-name);
  fflush(stdout);
  return;
}
func echo-stuff(object::slots-t* instance, str-t action) -> void {
  if (getenv?("DKT_ECHO_ALLOC_INIT_DEALLOC"))
    if (instance->klass != klass::_klass_) // not completely correct (should be !instance?())
      echo-stuff-common(instance, action, name-of(klass-of(instance)));
  return;
}
func echo-stuff(object::slots-t* instance, str-t action, symbol-t kls-name, symbol-t instance-name) -> void {
  if (getenv?("DKT_ECHO_ALLOC_INIT_DEALLOC"))
    echo-stuff-common(instance, action, kls-name, instance-name);
  return;
}
klass object {
  slots {
    object-t                  klass;
    std::atomic<int-fast32-t> ref-count;
  }

  method write-slots(object-t self, object-t out) -> object-t {
  //$write-slots(super, out);
    $write-slots-start(out, _klass_);

    $write-element-idref(out, klass-of(self), "klass");

    $write-slots-end(out);
    return self;
  }
  method compare(object-t self, object-t other) -> cmp-t {
    assert(other != nullptr);
    cmp-t result = 0;
    if (self != other)
      result = dk-cmp(cast(intptr-t)self, cast(intptr-t)other);
    return result;
  }
  method equals?(object-t self, object-t other) -> bool-t {
    //printf("%s('%s', '%s')\n", __method__, name-of(klass-of(self)), name-of(klass-of(other)));
    bool-t state = false;

    if ($compare(self, other) == 0)
      state = true;
    return state;
  }
  method instance?(object-t self, object-t kls) -> bool-t {
    bool-t state = false;
    object-t tmp-kls = klass-of(self);

    while (!root-superklass?(tmp-kls)) {
      if (tmp-kls == kls) {
        state = true;
        break;
      }
      tmp-kls = superklass-of(tmp-kls);
    }
    return state;
  }
  method perform-method-for-selector(object-t self, selector-t selector) -> object-t {
    object-t kls = klass-of(self);
    method-t m = $method-for-selector(kls, selector);
    object-t value = m(self);
    return value;
  }
  // documented to do nothing
  method init(object-t self) -> object-t {
# if defined DEBUG
    echo-stuff(cast(object::slots-t*)self, "init");
# endif
    return self;
  }
  // documented to do nothing
  method dealloc(object-t self) -> object-t {
# if defined DEBUG
    echo-stuff(cast(object::slots-t*)self, "dealloc");
# endif
    return nullptr;
  }
  method copy(object-t self) -> object-t {
    USE(self);
    throw $make(exception::klass(), #msg: "not yet implemented");
    return nullptr;
  }
  method hash(object-t self) -> hash-t {
    size-t result = cast(size-t)self;
    return result;
  }
  method dump(object-t self) -> object-t {
    // if (klass::_klass_ != klass-of(self))
    //   $dump(klass-of(self));

    fprintf(stderr, "%p { klass=%p <%s>, ref-count=%i }\n",
            cast(ptr-t)self,
            cast(ptr-t)klass-of(self),
            name-of(klass-of(self)),
            cast(int-fast32-t)self->ref-count);
    return self;
  }
  method str(object-t self) -> str-t {
    ssize-t len = 2 + PRIxPTR-WIDTH + (1);
    char-t* buffer = cast(char-t*)dkt::alloc(len);
    snprintf(buffer, cast(size-t)len, "%p", cast(ptr-t)self);
    return cast(str-t)(buffer);
  }
  method print(object-t self, object-t out) -> object-t {
    if (out == nullptr || out == null)
      out = std-output;
    str-t str = $str(self);
    $print(out, str);
    return self;
  }
  method println(object-t self, object-t out) -> object-t {
    if (out == nullptr || out == null)
      out = std-output;
    $print(self, out);
    $print(out, "\n");
    return self;
  }
}
func dkt-dump(object-t obj) -> object-t {
  return $dump(obj);
}
func dkt-unbox-check(object-t obj, object-t kls) -> void {
  assert(obj != nullptr);
  assert(kls != nullptr);
  DKT-LOG-TRACE-RUNTIME("'func':'%s','args':['%p','%s::klass']",
                        __func__, cast(ptr-t)(obj), $name(kls));
  unless (object::instance?(obj, kls)) {
    str-t object-kls-name = name-of(klass-of(obj));
    str-t kls-name = name-of(kls);

    if (object::instance?(obj, klass::_klass_))
      dkt-log(dkt::k-log-error, "%s::unbox(%p {klass='%s', name='%s'})",
              kls-name, cast(ptr-t)obj, object-kls-name, name-of(obj));
    else
      dkt-log(dkt::k-log-error, "%s::unbox(%p {klass='%s'})",
              kls-name, cast(ptr-t)obj, object-kls-name);

    throw $make(unbox-illegal-klass-exception::klass());
  }
  return;
}
# if (OUT_OF_LINE_REF_COUNTING != 0)
  # include <dakota-object-defn.inc>
  # include <dakota-weak-object-defn.inc>
# endif
