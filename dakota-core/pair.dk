// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota-core;

# include <cassert>

klass object-output-stream;
klass hash;

klass pair {
  slots {
    object-t first;
    object-t last;
  }
  // other pairs:
  //   { object-t, symbol-t }, { object-t, symbol-t, int64-t }
  //   klass symbol-object-pair { slots { symbol-t first; object-t last; } }
  //   klass symbol-symbol-pair { slots { symbol-t first; symbol-t last; } }
  //   klass symbol-int64-pair { slots { symbol-t first; int64-t last; } }
  //   klass object-int64-pair { slots { object-t first; int64-t last; } }
  
  method init(object-t self,
              object-t first : null,
              object-t last :  null) -> object-t {
    self = $init(super);
    self.first = first;
    self.last =  last;
    return self;
  }
  method dump(object-t self) -> object-t {
    $dump(super);
    $dump(self.first);
    $dump(self.last);
    return self;
  }
  method write-slots(object-t self, object-t out) -> object-t {
    $write-slots(super, out);
    $write-slots-start(out, klass);

    $write-element-idref(out, self.first, "first");
    $write-element-idref(out, self.last,  "last");

    $write-slots-end(out);
    return self;
  }
  method compare(object-t self, object-t other) -> cmp-t {
    object-t first = self.first;
    assert(nullptr != first);
    object-t other-first;
    if (klass == klass-of(other))
      other-first = unbox(other).first;
    else-if ($method-for-selector?(klass-of(other), SELECTOR(first(object-t))))
      other-first = $first(other);
    else
      other-first = other;
    assert(nullptr != other-first);
    cmp-t result = $compare(first, other-first);
    return result;
  }
  method hash(object-t self) -> hash-t {
    object-t first = self.first;
    assert(nullptr != first);
    hash-t result = $hash(first);
    return result;
  }
  method first(slots-t* s) -> object-t {
    object-t result = s->first;
    return result;
  }
  method last(slots-t* s) -> object-t {
    object-t result = s->last;
    return result;
  }
}
