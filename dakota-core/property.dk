// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cstring>

# include "private.hh"

module dakota-core;

klass cmp;

klass property-compare {
  slots (*)(const property-t*, const property-t*) -> cmp-t;
}
klass property {
  slots {
    symbol-t key;
    intptr-t element;
  }
  method init(object-t self, slots-t slots: {.key = nullptr, .element = 0}) -> object-t {
    self = $init(super);
    mutable-unbox(self) = slots;
    return self;
  }
  method check(const slots-t* s) -> ssize-t {
    if (s->key == nullptr)
      std::abort();
    return 0;
  }
  method compare(const slots-t* s, const slots-t* other-s) -> cmp-t {
    assert(s != nullptr);
    assert(other-s != nullptr);
    cmp-t result = 0;
    if (s->key != other-s->key)
      result = symbol::compare(s->key, other-s->key);
    return result;
  }
  method compare(object-t self, object-t other) -> cmp-t {
    assert(other != nullptr);
    cmp-t result = 0;
    if (self != other) {
      if (klass-of(other) == _klass_ || $instance?(other, _klass_))
        result = compare(&unbox(self), &unbox(other));
      else
        result = $compare(super, other);
    }
    return result;
  }
}
