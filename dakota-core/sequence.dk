// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <functional>

module dakota-core;

klass vector;
trait iterator;

func map(object-t seq, std::function<object-t (object-t)> f) -> object-t {
  object-t result = $make(klass-of(seq));
  for (object-t o in seq) {
    object-t e = f(o);
    if (e != nullptr)
      $add(result, e);
  }
  return result;
}
func map(object-t[] objects, std::function<object-t (object-t)> f) -> object-t {
  object-t result = $make(vector::klass());
  object-t o;
  object-t* args = objects;
  while ((o = *args++) != nullptr) {
    object-t e = f(o);
    if (e != nullptr)
      $add(result, e);
  }
  return result;
}

// first, last, at, ...
klass sequence {
  superklass collection;

  method write-lite(object-t self, object-t out) -> object-t {
    $write(out, "[");
    str-t delim = "";

    for (object-t element in self) {
      $write(out, delim);
      $write-lite(element, out);
      delim = ",";
    }
    $write(out, "]");
    return self;
  }
  method add-all-first(object-t self, object-t collection) -> object-t {
    for (object-t element in collection)
      $add-first(self, element);
    return collection;
  }
  method add-all-last(object-t self, object-t collection) -> object-t {
    for (object-t element in collection)
      $add-last(self, element);
    return collection;
  }
  method in?(object-t self, object-t element) -> bool-t {
    bool-t state = false;
    for (object-t e in self) {
      if ((state = $equals?(e, element)))
        break;
    }
    return state;
  }
//   method add-first(object-t self, object-t element) -> object-t;
//   method add-last(object-t self, object-t element) -> object-t;
//   method remove-first(object-t self) -> object-t;
//   method remove-last(object-t self) -> object-t;

  //     method first-index(object-t self, object-t element) -> ssize-t;
  //     method last-index(object-t self, object-t element) -> ssize-t;

  //     method first(object-t self) -> object-t;
  //     method last(object-t self) -> object-t;
  //     method add-first(object-t self, object-t element) -> object-t;
  //     method add-last(object-t self, object-t element) -> object-t;
  //     method remove-first(object-t self) -> object-t;
  //     method remove-last(object-t self) -> object-t;
  //     method replace-first(object-t self, object-t element) -> object-t;
  //     method replace-last(object-t self, object-t element) -> object-t;
  //     method reverse(object-t self) -> object-t;

  //     method add-at(object-t self, ssize-t offset, object-t element) -> object-t;
  //     method remove-at(object-t self, ssize-t offset) -> object-t;
  //     method at(object-t self, ssize-t offset) -> object-t; // o = a[i]  vs  o = at(a, i);
  //     method replace-at(object-t self, ssize-t offset, object-t object) -> object-t;
}
