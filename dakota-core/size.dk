// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include-for <sys/types.h> ssize-t;
include-for <cstddef>     size-t;
include-for <cstdint>     intptr-t,
                          uintptr-t;
module dakota-core;

klass size {
  slots size-t;

  const slots-t max = SIZE-MAX;

  method init(object-t self, slots-t slots: 0) -> object-t {
    self = $init(super);
    mutable-unbox(self) = slots;
    return self;
  }
  method compare(slots-t slots, slots-t other) -> cmp-t {
    cmp-t result = 0;
    if (slots != other)
      result = dk-cmp(slots, other);
    return result;
  }
}
// essentially a signed size-t
klass ssize {
  slots ssize-t;

  const slots-t max = SSIZE-MAX;

  method init(object-t self, slots-t slots: 0) -> object-t {
    self = $init(super);
    mutable-unbox(self) = slots;
    return self;
  }
  method compare(slots-t slots, slots-t other) -> cmp-t {
    cmp-t result = 0;
    if (slots != other)
      result = dk-cmp(slots, other);
    return result;
  }
}
static-assert(sizeof(size-t) == sizeof(uintptr-t),
              "The types size-t and uintptr-t must be interchangable with respect to their size.");
static-assert(sizeof(ssize-t) == sizeof(intptr-t),
              "The types ssize-t and intptr-t must be interchangable with respect to their size.");
static-assert(sizeof(ssize-t) == sizeof(size-t),
              "The types ssize-t and size-t must be interchangable with respect to their size.");
