// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include "sorted-set-core.hh"

# include <cassert>
# include <cstdlib>
# include <cstring>

# define   ref(t, p) !(t->is-ptr) ? (p) : &(p)
# define deref(t, p) !(t->is-ptr) ? (p) : *(cast(const void**)(p))

module dakota-core;

klass result;
klass std-compare;

klass sorted-set-core {
  slots {
    ptr-t         items;
    ssize-t       count;
    ssize-t       capacity;
    ssize-t       size;
    std-compare-t compare;
    bool-t        is-ptr;
  }
  func create(ssize-t       capacity,
              ssize-t       size,
              std-compare-t compare,
              bool-t        is-ptr) -> slots-t* {
    assert(capacity > 0);
    assert(size > 0);
    assert(compare != nullptr);
    slots-t* slots = cast(slots-t*)dkt::alloc(ssizeof(slots-t));
    slots->items = cast(ptr-t)dkt::alloc(size * capacity);
    slots->count =    0;
    slots->capacity = capacity;
    slots->size =     size;
    slots->compare =  compare;
    slots->is-ptr =   is-ptr;
    return slots;
  }
  func destroy(slots-t* slots) -> std::nullptr-t {
    slots->items = dkt::dealloc(slots->items);
    slots =           dkt::dealloc(slots);
    return nullptr;
  }
  func sort(slots-t* t) -> slots-t* {
    qsort(t->items, cast(size-t)t->count, cast(size-t)t->size, t->compare);
    return t;
  }

  //(-(insertion point) - 1)
  func result-at(const slots-t* t, const void* key) -> result-t {
    assert(key != nullptr);

    result-t result = { .item = nullptr, .offset = -1 };
    cmp-t cmp;
    bool-t should-increment = false;

    int64-t i = 0;
    int64-t l = 0;
    int64-t u = t->count;

    while (l < u) {
      i = l + ((u - l) / 2); // calc midpoint without overflowing
      const void* p = cast(const void*)(cast(uint8-t*)(t->items) + (i * t->size));
      cmp = t->compare(deref(t, p), key);

      if (0 < cmp) {
        should-increment = false;
        u = i;
      }
      else if (0 > cmp) {
        should-increment = true;
        l = i + 1;
      } else {
        result.item = deref(t, p);
        break;
      }
    }
    if (result.item == nullptr && should-increment)
      i++;
    result.offset = i;
    return result;
  }
  func add-at(slots-t* t, ssize-t offset, const void* key) -> const void* {
    assert(key != nullptr);
    assert(0 <= offset);
    assert(offset <= t->count);

    if (t->count == t->capacity) {
      t->capacity *= 2; // the growth algorithm should be consumer settable
      t->items = cast(ptr-t*)dkt::alloc(t->size * t->capacity, t->items);
    }
    memmove(cast(ptr-t)(cast(uint8-t*)(t->items) + (t->size * (offset + 1))),
            cast(ptr-t)(cast(uint8-t*)(t->items) + (t->size * (offset + 0))),
            cast(size-t)((t->count - offset) * t->size));
    memcpy(cast(uint8-t*)(t->items) + (t->size * (offset + 0)), ref(t, key), cast(size-t)t->size);
    t->count++;
    return key;
  }
  func at(const slots-t* t, ssize-t offset) -> const void* {
    assert(0 <= offset);
    assert(offset < t->count);
    assert(0 < t->count);

    const void* item = deref(t, cast(const void*)(cast(uint8-t*)(t->items) + (t->size * offset)));
    return item;
  }
  
  func remove-at(slots-t* t, ssize-t offset) -> const void* {
    assert(0 <= offset);
    assert(offset < t->count);
    assert(0 < t->count);

    const void* item = at(t, offset);
    memmove(cast(ptr-t)(cast(uint8-t*)(t->items) + (t->size * (offset + 0))),
            cast(ptr-t)(cast(uint8-t*)(t->items) + (t->size * (offset + 1))),
            cast(size-t)((t->count - offset - 1) * t->size)); // this arg may be zero
    memset(cast(uint8-t*)(t->items) + (t->size * t->count), 0, cast(size-t)t->size);
    t->count--;
    return item;
  }
  func remove(slots-t* t, const void* key) -> const void* {
    assert(key != nullptr);
    result-t result = result-at(t, key);
    const void* item = remove-at(t, result.offset);
    return item;
  }
  func remove-first(slots-t* t) -> const void* {
    const void* item = remove-at(t, 0);
    return item;
  }
  func first(slots-t* t) -> const void* {
    ssize-t offset;
    const void* item = at(t, offset = 0); // returns nullptr when empty
    return item;
  }
  func last(slots-t* t) -> const void* {
    const void* item = nullptr;
    ssize-t offset;
    if (t->count != 0)
      item = at(t, offset = t->count - 1);
    return item;
  }
  func add(slots-t* t, const void* key) -> const void* {
    assert(key != nullptr);
    const void* item;
    result-t result = result-at(t, key);
    if (result.item == nullptr)
      item = add-at(t, result.offset, key);
    else
      item = result.item;
    return item;
  }
  func remove-last(slots-t* t) -> const void* {
  //assert(0 < t->count);

    const void* item;
    if (t->count != 0) {
      item = at(t, t->count - 1);
      memset(cast(uint8-t*)(t->items) + (t->size * t->count), 0, cast(size-t)t->size);
      t->count--;
    } else {
      item = nullptr;
    }
    return item;
  }
}
