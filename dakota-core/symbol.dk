// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cstring>

include-for <cinttypes> strtoimax;
include-for <cerrno>    errno;

# include "safe-str.hh"
# include "private.hh"

module dakota-core;

klass hash;
klass sorted-set;

klass symbol-klass {
  superklass klass;

  slots {
    object-t pool; // set
  }
  method va::init(object-t self, va-list-t args) -> object-t {
    self = $va::init(super, args);
    self.pool = $make(sorted-set::klass()); // should be consumer settable
    return self;
  }
  method add(object-t self, object-t element) -> object-t {
    object-t result = $add(self.pool, element);
    return result;
  }
}
klass symbol-compare {
  slots (*)(symbol-t, symbol-t) -> int-t;
}
klass symbol {
  klass symbol-klass;
  slots str-t;

  method init(object-t self, slots-t slots: nullptr) -> object-t {
    self = $init(super);
    mutable-unbox(self) = slots;
    self = $add(klass-of(self), self); // leakleak
    return self;
  }
  method intmax-value(object-t self) -> ssize-t {
    errno = 0;
    intmax-t result = cast(intmax-t)strtoimax(unbox(self), nullptr, 10); // base 10
    if (errno)
      throw "oop!";
    return result;
  }
  method length(slots-t s) -> ssize-t {
    ssize-t result = cast(ssize-t)safe-strlen(s);
    return result;
  }
  method compare(slots-t s, slots-t other-s) -> cmp-t {
    assert(s != nullptr);
    assert(other-s != nullptr);
    cmp-t result = 0;
    if (s != other-s)
      result = dk-cmp(cast(intptr-t)s, cast(intptr-t)other-s);
    return result;
  }
  method compare(object-t self, object-t other) -> cmp-t {
    assert(other != nullptr);
    cmp-t result = 0;
    if (self != other) {
      if (klass-of(other) == _klass_ || $instance?(other, _klass_))
        result = compare(unbox(self), unbox(other));
      else
        result = $compare(super, other);
    }
    return result;
  }
  method dump(object-t self) -> object-t {
    $dump(super);
    fprintf(stderr, "%p { \"%s\" }\n",
            cast(ptr-t)self, $str(self));
    return self;
  }
  method hash(slots-t s) -> hash-t {
    hash-t result = dk-hash(s);
    return result;
  }
  method str(object-t self) -> str-t {
    str-t str = unbox(self);
    return str;
  }
  method write-lite(object-t self, object-t out) -> object-t {
    str-t str = $str(self);
    $write(out, "\"");
    $write(out, str);
    $write(out, "\"");
    return self;
  }
}
