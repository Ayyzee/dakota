// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cassert>
# include <cinttypes>
# include <cstdlib>
# include <cstring>

module dakota-core;

klass exception;
klass int64;
klass object-output-stream;
klass ssize;

klass vector-klass {
  superklass klass;

  slots {
    ssize-t  resize-factor;
    object-t fill-item;
    ssize-t  initial-capacity;
  }
  method va::init(object-t self, va-list-t args) -> object-t {
    self = $va::init(super, args);
    self.resize-factor = 2;
    self.fill-item = null;
    self.initial-capacity = 64;
    return self;
  }
  method set-resize-factor(object-t self, ssize-t resize-factor) -> object-t {
    self.resize-factor = resize-factor;
    return self;
  }
  method set-fill-item(object-t self, object-t fill-item) -> object-t {
    self.fill-item = fill-item;
    return self;
  }
  method set-initial-capacity(object-t self, ssize-t initial-capacity) -> object-t {
    self.initial-capacity = initial-capacity;
    return self;
  }
  method resize-factor(object-t self) -> ssize-t {
    return self.resize-factor;
  }
  method fill-item(object-t self) -> object-t {
    return self.fill-item;
  }
  method initial-capacity(object-t self) -> ssize-t {
    return self.initial-capacity;
  }
}
klass vector {
  superklass sequence;
  klass      vector-klass;
  trait      stack;
  trait      forward-iterating;

  slots {
    object-t* items;
    ssize-t   count;
    ssize-t   capacity;
    ssize-t   size; // sizeof(items[0])
    object-t  fill-item;
    ssize-t   iterator-state;
  }
  func initialize(object-t kls) -> void {
    $set-resize-factor(kls, 2);
    $set-fill-item(kls, null);
    $set-initial-capacity(kls, 64);
    return;
  }
  // 'items' is a collection (of objects)
  // 'objects' is a nullptr terminated array (of objects)
  // using compound literals 'objects' can be used as follows:
  // $init(o, #objects: { o1, o2 });
  method init(object-t   self,
              ssize-t    initial-capacity: $initial-capacity(klass-of(self)),
              object-t   fill-item:        $fill-item(klass-of(self)),
              object-t   items:            nullptr,
              object-t[] objects:          nullptr) -> object-t {
    // it IS legal to have the 'fill-item' value be nullptr
    // it is required for the hashed-set implementation
    assert(initial-capacity > 0);
    self = $init(super);
    self.fill-item = fill-item;
    self.count = 0;
    self.iterator-state = 0;
    self.capacity = initial-capacity;
    self.size = ssizeof(self.items[0]);
    self.items = cast(object-t*)dkt::alloc(self.size * self.capacity); // want to be able to realloc()
    for (ssize-t index = 0; index < self.capacity; index++)
      self.items[index] = self.fill-item;
    if (items != nullptr)
      $add-all(self, items);
    if (objects != nullptr)
      $add-objects(self, objects);
    return self;
  }
  method dealloc(object-t self) -> object-t {
    $empty(self);
    self.items =     dkt::dealloc(self.items);
    self.fill-item = nullptr;
    return $dealloc(super);
  }
  method dump(object-t self) -> object-t {
    $dump(super);
    fprintf(stderr, "%p { count=%zi, capacity=%zi, items=[] }\n",
            cast(ptr-t)self, self.count, self.capacity);
    for (object-t item in self)
      $dump(item);
    return self;
  }
  [[alias(copy)]] method copy-shallow(object-t self) -> object-t {
    object-t kls = klass-of(self);
    object-t copy = $make(kls, #capacity: self.capacity);
    const slots-t& s1 = unbox(self);
    slots-t& s2 = mutable-unbox(copy);
    s2 = s1;
    memcpy(s2.items, s1.items, cast(size-t)(s2.size * s2.capacity));
    s2.iterator-state = 0;
    return copy;
  }
  method empty?(object-t self) -> bool-t {
    bool-t result = (self.count == 0);
    return result;
  }
  method empty(object-t self) -> object-t {
    for (ssize-t i = 0; i < self.count; i++)
      self.items[i] = self.fill-item;
    self.iterator-state++;
    return self;
  }
  // reverse in place
  method reverse!(object-t self) -> object-t {
    ssize-t head-offset = 0, tail-offset = self.count - 1;
    while (head-offset < tail-offset) {
      object-t head-item = self.items[head-offset];
      self.items[head-offset] = self.items[tail-offset];
      self.items[tail-offset] = head-item;
      head-offset++; tail-offset--;
    }
    self.iterator-state++;
    return self;
  }
  static func check-index(object-t self, ssize-t index) -> void {
    if (index >= self.capacity)
      throw $make(exception::klass(), #msg: "oops");
    return;
  }
  // should be auto-generated!!!
  method remove-at(object-t self, object-t boxed-index) -> object-t {
    ssize-t index = ssize::unbox(boxed-index);
    object-t item = $remove-at(self, index);
    return item;
  }
  method remove-at(object-t self, ssize-t index) -> object-t {
    check-index(self, index);
    object-t item = self.items[index];
    self.items[index] = nullptr; // for ref-counting
    if (index + 1 < self.capacity)
      memmove(&self.items[index],
              &self.items[index + 1], cast(size-t)(self.size * (self.count - index - 1)));
    self.items[self.capacity - 1] = self.fill-item;
    self.count--;
    self.capacity--; // dumb
    return item;
  }
  method remove-all(object-t self, object-t item) -> object-t {
    // item could be null
    // any/all items could be null
    object-t object = null; // returns 'null' if item was not present
    for (ssize-t index = 0; index < self.count; index++) {
      object-t e = self.items[index];
      if ($equals?(e, item)) {
        remove-at(self, index);
        object = item;
      }
    }
    self.items = cast(object-t*)dkt::alloc(self.size * self.capacity, self.items); // dumb
    self.iterator-state++;
    return object;
  }
  method remove-first(object-t self) -> object-t {
    assert(self.count != 0);
    object-t item = self.items[0];
    self.items[0] = nullptr;
    memmove(self.items, self.items + 1, cast(size-t)(self.size * (self.count - 1)));
    self.count--;
    return item;
  }
  [[alias(pop)]] method remove-last(object-t self) -> object-t {
    assert(self.count != 0);
    object-t item = self.items[self.count - 1];
    self.items[self.count - 1] = nullptr;
    self.count--;
    return item;
  }
  method replace-all(object-t self, object-t object1, object-t object2) -> object-t {
    for (object-t iterator = $forward-iterator(self);
         $next?(iterator);
         $next(iterator)) {
      if ($equals?($item(iterator), object1))
        $set-item(iterator, object2);
    }
    return object1;
  }
  //     method replace-first(object-t self, object-t item) -> object-t;
  //     method replace-last(object-t self, object-t item) -> object-t;

  // should be auto-generated!!!
  method at(object-t self, object-t boxed-index, object-t default-item) -> object-t {
    ssize-t index = ssize::unbox(boxed-index);
    object-t item = $at(self, index, default-item);
    return item;
  }
  method at(object-t self, ssize-t index, object-t default-item) -> object-t {
    check-index(self, index);
    object-t item = default-item;
    if (self.count > index) {
      item = self.items[index];
      if (default-item != nullptr)
        assert(item != nullptr);
    }
    return item;
  }
  // should be auto-generated!!!
  method at(object-t self, object-t boxed-index) -> object-t {
    ssize-t index = ssize::unbox(boxed-index);
    object-t item = $at(self, index);
    return item;
  }
  method at(object-t self, ssize-t index) -> object-t {
    check-index(self, index);
    object-t item = $at(self, index, nullptr);
    if (item == nullptr)
      throw $make(exception::klass(), #msg: "oops");
    return item;
  }
  // should be auto-generated!!!
  method replace-at(object-t self, object-t boxed-index, object-t item) -> object-t {
    ssize-t index = ssize::unbox(boxed-index);
    object-t prev-item = $replace-at(self, index, item);
    return prev-item;
  }
  method replace-at(object-t self, ssize-t index, object-t item) -> object-t {
    check-index(self, index);
    object-t prev-item = self.items[index];
    self.items[index] = item;
    if (self.count < index + 1)
      self.count = index + 1;
    return prev-item;
  }
  method size(object-t self) -> ssize-t {
    return self.count;
  }
  // should be auto-generated!!!
  method add-at(object-t self, object-t boxed-index, object-t item) -> object-t {
    ssize-t index = ssize::unbox(boxed-index);
    object-t result = $add-at(self, index, item);
    return result;
  }
  method add-at(object-t self, ssize-t index, object-t item) -> object-t {
    check-index(self, index);
    self.items[index] = item;
    if (self.count < index + 1)
      self.count = index + 1;
    return self;
  }
  method add-first(object-t self, object-t item) -> object-t {
    assert(item != nullptr);
    if (self.count == self.capacity) {
      self.capacity *= $resize-factor(klass-of(self));
      self.items = cast(object-t*)dkt::alloc(self.size * self.capacity, self.items);
    }
    memmove(self.items + 1, self.items, cast(size-t)(self.size * self.count));
    self.items[0].object = nullptr;
    self.items[0] = item;
    self.count++;
    self.iterator-state++;
    return item;
  }
  [[alias(add,push)]] method add-last(object-t self, object-t item) -> object-t {
    assert(item != nullptr);
    if (self.count == self.capacity) {
      self.capacity *= $resize-factor(klass-of(self));
      self.items = cast(object-t*)dkt::alloc(self.size * self.capacity, self.items);
    }
    self.items[self.count].object = nullptr; // for ref-counting
    self.items[self.count] = item;
    self.count++;
    self.iterator-state++;
    return item;
  }
  method first(object-t self) -> object-t {
    assert(self.count != 0);
    return self.items[0];
  }
  [[alias(top)]] method last(object-t self) -> object-t {
    assert(self.count != 0);
    return self.items[self.count - 1];
  }
  method iterator-klass(object-t self) -> object-t {
    USE(self);
    return vector-iterator::klass();
  }
  method write-slots(object-t self, object-t out) -> object-t {
    $write-slots(super, out);
    $write-slots-start(out, _klass_);
    $write-sequence-start(out, "items");
    for (ssize-t index = 0; index < self.count; index++)
      $write-item-idref(out, self.items[index], cast(str-t)nullptr);
    $write-sequence-end(out);
    $write-slots-end(out);
    return self;
  }
  static func next-index(object-t self, ssize-t index) -> ssize-t {
    check-index(self, index);
    //assert(index <= self.count);
    ssize-t result = index;
    if (result < self.count) {
      while (self.items[result] == nullptr) {
        result++;
        if (result == self.count)
          break;
      }
    }
    //       printf("%s(%p, %zi): %zi/%zi\n", __func__, self, index, result, self.count);
    return result;
  }
  static func first-index(object-t self) -> ssize-t {
    ssize-t index = 0;
    ssize-t result = index;
    result = next-index(self, index);
    //       printf("%s(%p): %zi/%zi\n", __func__, self, result, self.count);
    return result;
  }
}
klass vector-iterator {
  superklass iterator;

  slots {
    object-t vector;
    ssize-t  count;
    ssize-t  index;
    ssize-t  iterator-state;
  }
  static func check-iterator-state(object-t self) -> void {
    const vector::slots-t& d = vector::unbox(self.vector);
    if (self.iterator-state != d.iterator-state)
      throw $make(exception::klass(), #msg: "oops");
    return;
  }
  method init(object-t self, object-t collection:) -> object-t {
    self = $init(super);
    assert(collection != null);
    const vector::slots-t& v = vector::unbox(collection);
    self.vector =         collection;
    self.count =          v.count;
    self.index =          vector::first-index(self.vector);
    self.iterator-state = v.iterator-state;
    return self;
  }
  method first?(object-t self) -> bool-t {
    bool-t result = (self.index == 0);
    return result;
  }
  method set-item(object-t self, object-t item) -> object-t {
    $replace-at(self.vector, self.index, item);
    return self;
  }
  method next?(object-t self) -> bool-t {
    check-iterator-state(self);
    bool-t result = ($at(self.vector, self.index, nullptr) != nullptr);
    return result;
  }
  method next(object-t self) -> object-t {
    check-iterator-state(self);
    object-t item = nullptr;
    if ($next?(self)) {
      item = $item(self);
      self.index = vector::next-index(self.vector, self.index + 1);
    }
    //       printf("%s:%s(%p) = %p\n",
    //              "vector-iterator", __func__, (ptr-t)self, (ptr-t)item);
    return item;
  }
  method item(object-t self) -> object-t {
    check-iterator-state(self);
    object-t item = nullptr;
    if ($next?(self)) {
      item = $at(self.vector, self.index);
      assert(item != nullptr);
    }
    return item; // returns nullptr on error
  }
}
