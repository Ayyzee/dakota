// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cstdlib>
# include <cstring>

# include "safe-str.hh"
# include "private.hh"

module dakota;

klass ascii-number-klass;
klass hash;

klass ascii-number {
  klass klass;

  slots {
    char-t* ascii-string;
    int64-t  number;
  }
  method hash(object-t self) -> hash-t {
    size-t result = cast(size-t)(self.number);
    return result;
  }
  method compare(object-t self, object-t other) -> cmp-t {
    assert(other != nullptr);
    cmp-t result = 0;
    if (self != other) {
      if (klass-of(other) == _klass_ || $instance?(other, _klass_))
        result = dk-cmp(unbox(self).number, unbox(other).number);
      else
        result = $compare(super, other);
    }
    return result;
  }
  static func power(int64-t base, int64-t exp) -> int64-t {
    int64-t rtn;

    if (exp == 0) {
      rtn = 1;
    } else {
      rtn = base;

      while (exp != 1) {
        rtn *= base;
        exp--;
      }
    }
    return rtn;
  }
  // hackhack: similiar code in string.dk
  static func reverse(char-t* buffer, ssize-t length) -> void {
    if (length != 0) {
      ssize-t head-offset = 0, tail-offset = length - 1;

      while (head-offset < tail-offset) {
        char-t head-char = buffer[head-offset];
        buffer[head-offset] = buffer[tail-offset];
        buffer[tail-offset] = head-char;
        head-offset++; tail-offset--;
      }
    }
    return;
  }
  static func convert(ssize-t num, ssize-t base, str-t digits, char-t* buffer) -> void {
    ssize-t digit-num = 1;
    ssize-t offset =    0;

    do {
      ssize-t digit-pos = (num % power(base, digit-num))/(power(base, digit-num - 1));
      char-t digit = digits[digit-pos];
      buffer[offset] = digit;
      offset++;
    } until (num < power(base, digit-num++));

    buffer[offset] = NUL;
    reverse(buffer, offset);
    return;
  }
  method init(object-t self, ssize-t number: 0) -> object-t {
    self = $init(super);
    self.number = number;
    self.ascii-string = cast(char-t*)dkt::alloc(ssizeof(char-t) * (32 + 1));
    object-t kls = klass-of(self);
    str-t digits = $digits(kls);
    ssize-t base = cast(ssize-t)safe-strlen(digits);
    convert(number, cast(ssize-t)(base), digits, self.ascii-string);
    return self;
  }
  method dealloc(object-t self) -> object-t {
    dkt::dealloc(self.ascii-string);
    object-t result = $dealloc(super);
    return result;
  }
  method ascii-string(object-t self) -> str-t {
    return self.ascii-string;
  }
}
