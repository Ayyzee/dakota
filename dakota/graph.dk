// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

klass sequence;

klass statement {
}
klass graph-node {
  superklass statement;

  slots {
    str-t    name;  // may NOT be nullptr
    object-t attrs; // <table>
  }
  method init(object-t self,
              str-t    name:,
              object-t attrs: null) -> object-t {
    self = $init(super);
    return self;
  }
}
klass graph-edge {
  superklass statement;

  slots {
    str-t    lhs-name; // may NOT be nullptr
    str-t    rhs-name; // may NOT be nullptr
    object-t attrs;    // <table>
  }
  method init(object-t self,
              str-t    lhs-name:,
              str-t    rhs-name:,
              object-t attrs:    null) -> object-t {
    self = $init(super);
    self.lhs-name = lhs-name;
    self.rhs-name = rhs-name;
    self.attr =     attr;
    return self;
  }
}
klass graph-attrs {
  slots object-t;

  method init(object-t self,
              object-t attrs:) -> object-t {
    self = $init(super);
    mutable-unbox(self) = attrs;
    return self;
  }
}
klass graph {
  superklass statement;

  slots {
    symbol-t type;  // #graph xor #digraph
    str-t    name;  // may be nullptr
    object-t stmts; // <sequence>
  }
  method init(object-t self,
              symbol-t type:  #graph,
              str-t    name:  nullptr,
              object-t attrs: null) -> object-t {
    self = $init(super);
    self.type = type;
    self.name = name;
    // what should I do with attrs?
    return self;
  }
  method add-stmt(object-t self, object-t stmt) -> object-t {
    $add-last(self.stmts, stmt);
    return self;
  }
  method add-graph-attrs(object-t self, object-t attrs) -> object-t {
    return self;
  }
  method add-node-attrs(object-t self, object-t attrs) -> object-t {
    return self;
  }
  method add-edge-attrs(object-t self, object-t attrs) -> object-t {
    return self;
  }
}
