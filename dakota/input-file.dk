// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota;

# include <cassert>
# include <cctype>
# include <cerrno>
# include <cstdio>
# include <cstring>

static boole-t
space?(int-t c) {
  return isspace(c);
}

klass exception;
klass token;
klass type-func;
klass str128;
klass stream;
klass system-exception;
klass vector;

klass input-file {
  slots {
    off-t    length;
    off-t    current-position;
    char8-t* buffer;

    str-t    file;
    int64-t   line;
    int64-t   column;
  }
  method init(object-t self,
                       stream-t stream :   nullptr,
                       str-t    file : nullptr) -> object-t {
    self = $init(super);
    assert(!(nullptr != stream && nullptr != file)); // these are mutually exclusive
    assert(stdout != stream);
    assert(stderr != stream);

    if (nullptr == stream && nullptr == file)
      stream = stdin; // default

    if (nullptr != file) {
      stream = fopen(file, "r");

      if (nullptr == stream)
        throw make(system-exception::klass, #errnum : errno);
    }
    self.file = file; // copycopy: should make a copy?
    fpos-t fpos;
    fgetpos(stream, &fpos);
    fseeko(stream, 0L, SEEK-END);
    self.length = ftello(stream); // this might be longer than needed
    fsetpos(stream, &fpos);
    self.buffer = cast(char8-t*)dkt::alloc(ssizeof(char8-t) * (self.length + 1));
    fread(self.buffer, sizeof(char8-t), cast(size-t)self.length, stream);
    self.buffer[self.length] = NUL;

    // check for embedded NUL?

    if (nullptr != file)
      fclose(stream);
    else
      fsetpos(stream, &fpos);

    self.current-position = 0;
    self.column = 0;
    self.line = 1;
    return self;
  }
  method dealloc(object-t self) -> object-t {
    dkt::dealloc(self.buffer);
    object-t result = $dealloc(super);
    return result;
  }
  method file(object-t self) -> str-t {
    return cast(str-t)(self.file);
  }
  
  method put-char8(object-t self, char8-t c) -> object-t {
    if (0 == self.current-position)
      throw make(exception::klass, #msg : "oops");
    if (c != self.buffer[self.current-position - 1])
      throw make(exception::klass, #msg : "oops");
    self.current-position--;
    if ('\n' == c) {
      self.line--;
      // where is column left?
    } else {
      self.column--;
    }
    return null;
  }
  method get-char8(object-t self) -> char8-t {
    char8-t c = self.buffer[self.current-position++];
    if (0 != c) {
      if ('\n' == c) {
        self.line++;
        self.column = 0;
      } else {
        self.column++;
      }
    }
    return c;
  }
  method split(object-t self, type-func-t type?) -> object-t {
    object-t result = make(vector::klass);

    if (nullptr == type?)
      type? = space?;
    
    char8-t c = NUL;
    while (1) {
    # if 0
      str128-t  ws-buf = "";
      int64-t ws-buf-pos = 0;
      while (type?(c = $get-char8(self))) {
        ws-buf[ws-buf-pos] = c;
        ws-buf-pos++;
        ws-buf[ws-buf-pos] = NUL;
      }
    # endif
      if (NUL == c)
        return result;
      $put-char8(self, c);

      str128-t  buf = "";
      int64-t buf-pos = 0;
      until (type?(c = $get-char8(self))) {
        buf[buf-pos] = c;
        buf-pos++;
        buf[buf-pos] = NUL;
      }
      object-t t = make(token::klass, #line : self.line, #column : self.column, #buffer : buf);
      $add-last(result, t);

      if (NUL == c)
        return result;
    }
    return result;
  }
}
