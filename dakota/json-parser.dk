// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cassert>
# include <cctype>
# include <cerrno>
# include <cinttypes>
# include <cstdlib>
# include <cstring>

module dakota;

klass exception;
klass hashed-table;
klass pair;
klass str128;
klass string;
klass token;
klass tokenid;
klass vector;

[[format-printf(4)]] static func print-error(str-t file, ssize-t line, ssize-t column, str-t format, ...) -> int-t {
  cmp-t result = fprintf(stderr, "%s:%zi:%zi ", file, line, column);
  if (result != -1) {
    va-list-t args;
    va-start(args, format);
    result += vfprintf(stderr, format, args);
    va-end(args);
  }
  return result;
}
klass json-parser {
  slots {
    stream-t in;
    str-t    file;
    int64-t  line;
    int64-t  column;
  }
  method init(object-t self,
              stream-t stream: stdin,
              str-t    file:   nullptr) -> object-t {
    self = $init(super);
    assert(!(stdin != stream &&
             nullptr  != file)); // these are mutually exclusive

    if (file != nullptr) {
      self.file = file;
      self.in =   fopen(self.file, "r");

      if (self.in == nullptr) {
        str128-t buf = "";
        strerror-r(errno, buf, sizeof(buf));
        fprintf(stderr, "%s: %s", file, buf);
        throw $make(exception::klass(), #msg: "oops");
      }
    } else {
      self.file = nullptr;
      self.in =   stream;
    }
    self.line =   1;
    self.column = 0;
    return self;
  }
  method read(object-t self, ptr-t buffer, ssize-t element-size, ssize-t num-elements-max) -> ssize-t {
    ssize-t num-elements-read = cast(ssize-t)fread(buffer, cast(size-t)element-size, cast(size-t)num-elements-max, self.in);

    // fread() does not distinguish between end-of-file and error, and callers must use
    // feof(3) and ferror(3) to determine which occurred.

    return num-elements-read;
  }
  /* method */ static func putback(object-t self, int-t c) -> void {
    if (c == '\n')
      self.line--;
      // where is column left?
    else
      self.column--;
    ungetc(c, self.in);
    return;
  }
  /* method */ static func get(object-t self) -> int-t {
    int-t c = getc(self.in);
    if (c != EOF) {
      if (c == '\n') {
        self.line++;
        self.column = 0;
      } else {
        self.column++;
      }
    }
    return c;
  }
  //static func error-msg(char-t* file, ssize-t line, ssize-t column, str-t msg0, ...) -> void; // one or more msg strings

  /* method */ static func lex(object-t self) -> object-t {
    int-t c;
    while (1) {
      while (isspace(c = json-parser::get(self))) {
      }
      if (c == EOF)
      { return null; }
      switch (c) {
        // self.column needs to be adjusted by the length of the token
        case '[': { return $make(token::klass(), #tokenid: '[', #buffer: "[",
                                #line: self.line, #column: self.column - 1); }
        case ']': { return $make(token::klass(), #tokenid: ']', #buffer: "]",
                                #line: self.line, #column: self.column - 1); }
        case '{': { return $make(token::klass(), #tokenid: '{', #buffer: "{",
                                #line: self.line, #column: self.column - 1); }
        case '}': { return $make(token::klass(), #tokenid: '}', #buffer: "}",
                                #line: self.line, #column: self.column - 1); }
        case ',': { return $make(token::klass(), #tokenid: ',', #buffer: ",",
                                #line: self.line, #column: self.column - 1); }
        case '#': {
          while ((c = json-parser::get(self)) != '\n') {
            if (c == EOF)
              return null;
          }
          break;
        }
        case '=': {
          c = json-parser::get(self);
          if (c == EOF || c != '>') {
            print-error(self.file, self.line, self.column - 2, "unknown token '='\n");
            return null;
          } else {
            return $make(token::klass(), #tokenid: ':', #buffer: ":",
                        #line: self.line, #column: self.column - 2);
          }
        }
        case '\'': {
          int64-t quote-type = '\'';
          object-t token = $make(token::klass(), #tokenid: 'sqst',
                                #line: self.line, #column: self.column - 1);
          bool-t is-escaped;
          c = json-parser::get(self);
          if (c == EOF) {
            print-error(self.file, self.line, self.column, "unterminated string\n");
            return null;
          }
          if (quote-type == c)
            return token; // empty string
          do {
            $append-char(token, cast(int64-t)c);

            if (c == '\\')
              is-escaped = true;
            else
              is-escaped = false;

            c = json-parser::get(self);
            if (c == EOF) {
              print-error(self.file, self.line, self.column, "unterminated string\n");
              return null;
            }
          } while ((quote-type != c) || is-escaped);

          return token;
        }
        //case '"':
        //{
        //}
        case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g':
        case 'h': case 'i': case 'j': case 'k': case 'l': case 'm': case 'n':
        case 'o': case 'p': case 'q': case 'r': case 's': case 't': case 'u':
        case 'v': case 'w': case 'x': case 'y': case 'z':

        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G':
        case 'H': case 'I': case 'J': case 'K': case 'L': case 'M': case 'N':
        case 'O': case 'P': case 'Q': case 'R': case 'S': case 'T': case 'U':
        case 'V': case 'W': case 'X': case 'Y': case 'Z':

        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':

        case '_': {
          object-t token = $make(token::klass(), #tokenid: 'st', // 'st' should be 'idnt'
                                #line: self.line, #column: self.column - 1);
          do {
            $append-char(token, cast(int64-t)c);
            c = json-parser::get(self);
          } while (isalnum(c) || c == '_');
          if (c != EOF)
            json-parser::putback(self, c);
          return token;
        }
        default: {
          print-error(self.file, self.line, self.column, "unknown token '%c'\n", c);
          return null;
        }
      }
    }
  }

  /* method */ func get-table(object-t self) -> object-t;
  /* method */ func get-vector(object-t self) -> object-t;

  /* method */ static func key(object-t self) -> object-t {
    object-t token = json-parser::lex(self);
    if (token == null) {
      print-error(self.file, self.line, self.column, "incomplete table\n");
      return null;
    }
    object-t key;
    switch ($tokenid(token)) {
      case 'sqst':
        key = $make(string::klass(), #bytes: $buffer(token));
        break;
      case 'dqst':
        key = $make(string::klass(), #bytes: $buffer(token));
        break;
      case 'st':
        key = $make(string::klass(), #bytes: $buffer(token));
        break;
      case '}':
        return null;
      default:
        print-error(self.file, self.line, self.column, "expected <string> or '}' but got '%s'\n", $buffer(token));
        return null;
    }
    return key;
  }
  /* method */ static func get-corresponds-to(object-t self) -> object-t {
    object-t token = json-parser::lex(self);
    if (token == null) {
      print-error(self.file, self.line, self.column, "incomplete table\n");
      return null;
    }
    if ($tokenid(token) != ':') {
      print-error(self.file, self.line, self.column, "expected ':' but got '%s'\n", $buffer(token));
      return null;
    }
    return $make(string::klass(), #bytes: $buffer(token));
  }
  // get table element - element is NOT optional
  /* method */ static func get-element(object-t self) -> object-t {
    object-t token = json-parser::lex(self);
    if (token == null) {
      print-error(self.file, self.line, self.column, "incomplete table\n");
      return null;
    }
    object-t element;
    switch ($tokenid(token)) {
      case 'null':
        element = null;
        break;
      case 'sqst':
        element = $make(string::klass(), #bytes: $buffer(token));
        break;
      case 'dqst':
        element = $make(string::klass(), #bytes: $buffer(token));
        break;
      case 'st':
        element = $make(string::klass(), #bytes: $buffer(token));
        break;
      case '{':
        element = json-parser::get-table(self);
        break;
      case '[':
        element = json-parser::get-vector(self);
        break;
      default:
        print-error(self.file, self.line, self.column, "expected <string> or 'null' or '{' or '[' but got '%s'\n", $buffer(token));
        return null;
    }
    return element;
  }
  // get vector element - element is optional
  /* method */ static func element(object-t self) -> object-t {
    object-t token = json-parser::lex(self);
    if (token == null) {
      print-error(self.file, self.line, self.column, "incomplete table\n");
      return null;
    }
    object-t element;
    switch ($tokenid(token)) {
      case 'null':
        element = null;
        break;
      case 'sqst':
        element = $make(string::klass(), #bytes: $buffer(token));
        break;
      case 'dqst':
        element = $make(string::klass(), #bytes: $buffer(token));
        break;
      case 'st':
        element = $make(string::klass(), #bytes: $buffer(token));
        break;
      case '{':
        element = json-parser::get-table(self);
        break;
      case '[':
        element = json-parser::get-vector(self);
        break;
      case ']': // only difference from get-element()
        return null;
      default:
        print-error(self.file, self.line, self.column, "expected <string> or 'null' or '{' or '[' or ']' but got '%s'\n", $buffer(token));
        return null;
    }
    return element;
  }
  /* method */ static func get-table-pair(object-t self) -> object-t {
    object-t key = json-parser::key(self);
    if (key == null)
      return nullptr;
    object-t corresponds-to = json-parser::get-corresponds-to(self);
    if (corresponds-to == null)
      return nullptr;
    object-t element = json-parser::get-element(self);
    if (element == null)
      return nullptr;
    return pair::box({key, element});
  }
  // hackhack - multiple return statements
  /* method */ func get-vector(object-t self) -> object-t {
    object-t vector = $make(vector::klass());
    object-t token;
    do {
      object-t element = json-parser::element(self);
      if (element == null)
        return vector;

      // add 'element' to 'vector'
      $add-last(vector, element);

      token = json-parser::lex(self);
      if (token == null) {
        print-error(self.file, self.line, self.column, "incomplete vector\n");
        return null;
      }
    } while ($tokenid(token) == ',');


    if ($tokenid(token) != ']') {
      print-error(self.file, self.line, self.column, "expected ',' or ']' but got '%s'\n", $buffer(token));
      return null;
    }
    return vector;
  }
  /* method */ func get-table(object-t self) -> object-t {
    object-t table = $make(hashed-table::klass());
    object-t token;
    do {
      object-t table-pair = json-parser::get-table-pair(self);
      if (table-pair == nullptr)
        return table;

      // add 'table-pair' to 'table'
      $add(table, table-pair);

      token = json-parser::lex(self);
      if (token == null) {
        print-error(self.file, self.line, self.column, "incomplete table\n");
        return null;
      }
    } while ($tokenid(token) == ',');

    if ($tokenid(token) != '}') {
      print-error(self.file, self.line, self.column, "expected ',' or '}' but got '%s'\n", $buffer(token));
      return null;
    }
    return table;
  }

  //      method read-property-list(object-t self) -> object-t {
  //        object-t token;
  //        while ((token = json-parser::lex(self)) != null)
  //          $token::print(token, stdout);
  //        return null;
  //      }
  method read-property-list(object-t self) -> object-t {
    object-t token = json-parser::lex(self);
    if (token == null)
      return null;

    switch ($tokenid(token)) {
      case 'null':
        return null;
      case 'sqst':
        return $make(string::klass(), #bytes: $buffer(token));
      case 'dqst':
        return $make(string::klass(), #bytes: $buffer(token));
      case 'st':
        return $make(string::klass(), #bytes: $buffer(token));
      case '{':
        return json-parser::get-table(self);
      case '[':
        return json-parser::get-vector(self);
      default:
        print-error(self.file, self.line, self.column, "expected <string> or 'null' or '{' or '[' but got '%s'\n", $buffer(token));
        return null;
    }
  }
}
