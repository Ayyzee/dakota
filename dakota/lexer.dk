// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cassert>
# include <cctype>
# include <cerrno>
# include <cstdio>
# include <cstring>

module dakota;

klass str-buffer;
klass deque;
klass exception;
klass open-token;
klass str128;
klass syntax-exception;
klass token;
klass tokenid;
klass vector;

static func ident-type?(str-buffer-t buf) -> boole-t {
  boole-t result = false;
  if (3 <= buf.len)
    if ((('_' == buf.ptr[buf.len - 2]) ||
         ('-' == buf.ptr[buf.len - 2])) &&
         ('t' == buf.ptr[buf.len - 1]))
      result = true;
  return result;
}
klass lexer {
  slots {
    off-t    length;
    off-t    current-position;
    char8-t* buffer;

    str-t    file;
    int64-t  line;
    int64-t  previous-column;
    int64-t  column;

    object-t open-tokens;
  }
  method init(object-t self,
              stream-t stream :   stdin,
              str-t    file : nullptr) -> object-t {
    self = $init(super);

    if (nullptr != file) {
      self.file = file;
      stream = fopen(self.file, "r");
      if (nullptr == stream) {
        str128-t buf = "";
        strerror-r(errno, buf, sizeof(buf));
        fprintf(stderr, "%s", buf);
        throw $make(exception::klass(), #msg : "oops");
      }
      fseeko(stream, 0L, SEEK-END);
      self.length = ftello(stream);
      rewind(stream);
      self.buffer = cast(char8-t*)dkt::alloc(ssizeof(char8-t) * (self.length + 1));
      fread(self.buffer, sizeof(char8-t), cast(size-t)self.length, stream);
      // check for embedded NUL?
      self.buffer[self.length] = NUL;
      fclose(stream);
      self.current-position = 0;
    } else {
      self.file = nullptr;
      fpos-t fpos;
      fgetpos(stream, &fpos);
      fseeko(stream, 0L, SEEK-END);
      self.length = ftello(stream);
      fsetpos(stream, &fpos);
      self.buffer = cast(char8-t*)dkt::alloc(ssizeof(char8-t) * (self.length + 1));
      fread(self.buffer, sizeof(char8-t), cast(size-t)self.length, stream);
      // check for embedded NUL?
      self.buffer[self.length] = NUL;
      fsetpos(stream, &fpos);
      self.current-position = 0;
    }
    self.line =     1;
    self.previous-column = 0;
    self.column =   0;

    self.open-tokens = $make(deque::klass());
    return self;
  }
  method dealloc(object-t self) -> object-t {
    dkt::dealloc(self.buffer);
    object-t result = $dealloc(super);
    return result;
  }
  method file(object-t self) -> str-t {
    return cast(str-t)(self.file);
  }
    
  /* method */ inline func previous-char8(object-t self) -> char8-t {
    assert(0 != self.current-position);
    char8-t c = self.buffer[self.current-position - 1];
    return c;
  }
  /* method */ inline func current-char8(object-t self) -> char8-t {
    char8-t c = self.buffer[self.current-position];
    return c;
  }
  /* method */ inline func unget-char8(object-t self) -> void {
    assert(0 != self.current-position);
    self.current-position--;
    char8-t c = current-char8(self);
    if ('\n' == c) {
      self.line--;
      self.column = self.previous-column;
    } else {
      if (0 == self.column) {
        self.line--;
        self.column = self.previous-column;
      } else {
        //
        self.column--;
      }
    }
    return;
  }
  /* method */ inline func get-char8(object-t self) -> char8-t {
    char8-t c = current-char8(self);
    self.current-position++;
    if (NUL != c) {
      if ('\n' == c) {
        self.previous-column = self.column + 1;
        self.line++;
        self.column = 0;
      } else {
        self.previous-column = self.column;
        //
        self.column++;
      }
    }
    return c;
  }
  method tokenize(object-t self) -> object-t {
    object-t seq = $make(vector::klass());
    object-t token;
    object-t leading-ws = $make(vector::klass());

    while (nullptr != (token = $lex(self))) {
      if (0 == $tokenid(token)) {
        $add-last(leading-ws, token);
      } else {
        unless ($empty?(leading-ws)) {
          $set-leading-ws(token, leading-ws);
          leading-ws = $make(vector::klass());
        }
        $add-last(seq, token);
      }
    }
    return seq;
  }
  method lex(object-t self) -> object-t {
    while (1) {
      char8-t c1 = get-char8(self);
      switch (c1) {
        // whitespace
        case '\t': case ' ':
        case '\n': case '\r': case '\v': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          while (1) {
            char8-t c2 = get-char8(self);
            switch (c2) {
              case '\t': case ' ':
              case '\n': case '\r': case '\v': {
                str-buffer::concat(&buf, c2);
                break;
              }
              default: {
                unget-char8(self);
                object-t token = $make(token::klass(), #tokenid : 0, #buffer : buf.ptr,
                                      #line : -1, #column : -1);
                return token;
              }
            }
          }
        }
        // cpp directive 
        case '#': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          boole-t is-escaped = false;
          while (1) {
            char8-t c2 = get-char8(self);
            str-buffer::concat(&buf, c2);
            switch (c2) {
              case '\\':
                is-escaped = true;
                break;
              case '\n':
                if (is-escaped) {
                  is-escaped = false;
                } else {
                  is-escaped = false;
                  object-t token = $make(token::klass(), #tokenid : 0, #buffer : buf.ptr,
                                        #line : -1, #column : -1);
                  return token;
                }
                break;
              default:
                is-escaped = false;
            }
          }
        }
        case '/': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          while (1) {
            char8-t c2 = get-char8(self);
            switch (c2) {
              // // comments
              case '/': {
                str-buffer::concat(&buf, c2);
                while (1) {
                  char8-t c3 = get-char8(self);
                  str-buffer::concat(&buf, c3);
                  switch (c3) {
                    case '\n': {
                      object-t token = $make(token::klass(), #tokenid : 0, #buffer : buf.ptr,
                                            #line : -1, #column : -1);
                      return token;
                    }
                  }
                }
                std::abort();
              }
              // /* comments
              case '*': {
                str-buffer::concat(&buf, c2);
                char8-t c3;
                char8-t c4 = get-char8(self);
                while (1) {
                  c3 = c4;
                  str-buffer::concat(&buf, c3);
                  c4 = get-char8(self);

                  if ('*' == c3 && '/' == c4)
                    break;
                }
                str-buffer::concat(&buf, c4);
                object-t token = $make(token::klass(), #tokenid : 0, #buffer : buf.ptr,
                                      #line : -1, #column : -1);
                return token;
                // / op
              }
            } // switch (c2)
            unget-char8(self);
            object-t token = $make(token::klass(), #tokenid : '/', #buffer : buf.ptr,
                                  #line : self.line, #column : self.column - buf.len);
            return token;
          } // while (1)
          break;
        } // case '/':

        // single quoted string
        case '\'': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          boole-t is-escaped = false;
          while (1) {
            char8-t c2 = get-char8(self);
            str-buffer::concat(&buf, c2);
            switch (c2) {
              case '\\':
                is-escaped = !is-escaped;
                break;
              case '\'':
                if (is-escaped) {
                  is-escaped = false;
                } else {
                  is-escaped = false;
                  object-t token = $make(token::klass(), #tokenid : 'sqst', #buffer : buf.ptr,
                                        #line : self.line, #column : self.column - buf.len);
                  return token;
                }
                break;
              default:
                is-escaped = false;
            }
          }
        }
        // double quoted string
        case '"': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          boole-t is-escaped = false;
          while (1) {
            char8-t c2 = get-char8(self);
            str-buffer::concat(&buf, c2);
            switch (c2) {
              case '\\':
                is-escaped = !is-escaped;
                break;
              case '"':
                if (is-escaped) {
                  is-escaped = false;
                } else {
                  is-escaped = false;
                  object-t token = $make(token::klass(), #tokenid : 'dqst', #buffer : buf.ptr,
                                        #line : self.line, #column : self.column - buf.len);
                  return token;
                }
                break;
              default:
                is-escaped = false;
            }
          }
        }
        case '0': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          char8-t c2 = get-char8(self);
          switch (c2) {
            case 'x': case 'X': {
              do {
                str-buffer::concat(&buf, c2);
                c2 = get-char8(self);
              }while (isxdigit(c2));
              unget-char8(self);
              object-t token = $make(token::klass(), #tokenid : 'nmbr', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
            case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': {
              do {
                str-buffer::concat(&buf, c2);
                c2 = get-char8(self);
              }while (isdigit(c2) && '8' != c2 && '9' != c2);
              unget-char8(self);
              object-t token = $make(token::klass(), #tokenid : 'nmbr', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
          }
          unget-char8(self);
          object-t token = $make(token::klass(), #tokenid : 'nmbr', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          do {
            str-buffer::concat(&buf, c1);
            c1 = get-char8(self);
          }while (isdigit(c1));
          unget-char8(self);
          object-t token = $make(token::klass(), #tokenid : 'nmbr', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g':
        case 'h': case 'i': case 'j': case 'k': case 'l': case 'm': case 'n':
        case 'o': case 'p': case 'q': case 'r': case 's': case 't': case 'u':
        case 'v': case 'w': case 'x': case 'y': case 'z':

        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G':
        case 'H': case 'I': case 'J': case 'K': case 'L': case 'M': case 'N':
        case 'O': case 'P': case 'Q': case 'R': case 'S': case 'T': case 'U':
        case 'V': case 'W': case 'X': case 'Y': case 'Z':

        case '_': {
        //case '-':
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          //str-buffer::concat(&buf, c1);
          do {
            str-buffer::concat(&buf, c1);
            c1 = get-char8(self);
          }while (isalnum(c1) || '_' == c1 || '-' == c1);
          unget-char8(self);
          while (!isalnum(previous-char8(self)) && '_' != previous-char8(self)) {
            unget-char8(self);
            buf.ptr[buf.len - 1] = NUL;
            buf.len--;
          }
          tokenid-t tokenid = 'idnt';
          if (ident-type?(buf))
            tokenid = 'type';
          object-t token = $make(token::klass(), #tokenid : tokenid, #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '!': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          char8-t c2 = get-char8(self);
          switch (c2) {
            case '!': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '!!', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
            case '=': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '!=', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
          }
          unget-char8(self);
          object-t token = $make(token::klass(), #tokenid : '!', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '$': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          object-t token = $make(token::klass(), #tokenid : '$', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '%': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          char8-t c2 = get-char8(self);
          switch (c2) {
            case '=': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '%=', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
          }
          unget-char8(self);
          object-t token = $make(token::klass(), #tokenid : '%', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '&': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          char8-t c2 = get-char8(self);
          switch (c2) {
            case '&': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '&&', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
            case '=': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '&=', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
          }
          unget-char8(self);
          object-t token = $make(token::klass(), #tokenid : '&', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '(': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          object-t open-token = $make(open-token::klass(), #tokenid : '(', #buffer : buf.ptr,
                                     #line : self.line, #column : self.column - buf.len);
          $push(self.open-tokens, open-token);
          return open-token;
        }
        case ')': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          object-t token = $make(token::klass(), #tokenid : ')', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          object-t open-token;
          do {
            open-token = $pop(self.open-tokens);
          } while ('<' == $tokenid(open-token));

          if ('(' != $tokenid(open-token))
            throw $make(syntax-exception::klass(), #token : token, #file : self.file, #msg : "not balenced");
          $set-close-token(open-token, token);
          return token;
        }
        case '*': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          char8-t c2 = get-char8(self);
          switch (c2) {
            case '/': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '*/', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
            case '=': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '*=', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
          }
          unget-char8(self);
          object-t token = $make(token::klass(), #tokenid : '*', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '+': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          char8-t c2 = get-char8(self);
          switch (c2) {
            case '+': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '++', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
            case '=': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '+=', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
          }
          unget-char8(self);
          object-t token = $make(token::klass(), #tokenid : '+', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case ',': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          object-t token = $make(token::klass(), #tokenid : ',', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '-': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          char8-t c2 = get-char8(self);
          switch (c2) {
            case '-': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '--', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
            case '=': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '-=', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
            case '>': {
              str-buffer::concat(&buf, c2);
              char8-t c3 = get-char8(self);
              switch (c3) {
                case '*': {
                  str-buffer::concat(&buf, c3);
                  object-t token = $make(token::klass(), #tokenid : '->*', #buffer : buf.ptr,
                                        #line : self.line, #column : self.column - buf.len);
                  return token;
                }
              }
              unget-char8(self);
              object-t token = $make(token::klass(), #tokenid : '->', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
          }
          unget-char8(self);
          object-t token = $make(token::klass(), #tokenid : '-', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '.': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          char8-t c2 = get-char8(self);
          switch (c2) {
            case '*': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '.*', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
            case '.': {
              str-buffer::concat(&buf, c2);
              char8-t c3 = get-char8(self);
              switch (c3) {
                case '.': {
                  str-buffer::concat(&buf, c3);
                  object-t token = $make(token::klass(), #tokenid : '...', #buffer : buf.ptr,
                                        #line : self.line, #column : self.column - buf.len);
                  return token;
                }
              }
              unget-char8(self);
              object-t token = $make(token::klass(), #tokenid : '..', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
          }
          unget-char8(self);
          object-t token = $make(token::klass(), #tokenid : '.', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case ':': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          char8-t c2 = get-char8(self);
          switch (c2) {
            case ':': {
              str-buffer::concat(&buf, c2);
              char8-t c3 = get-char8(self);
              switch (c3) {
                case '*': {
                  str-buffer::concat(&buf, c3);
                  object-t token = $make(token::klass(), #tokenid : '::*', #buffer : buf.ptr,
                                        #line : self.line, #column : self.column - buf.len);
                  return token;
                }
              }
              unget-char8(self);
              object-t token = $make(token::klass(), #tokenid : '::', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
          }
          unget-char8(self);
          object-t token = $make(token::klass(), #tokenid : ':', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case ';': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          object-t token = $make(token::klass(), #tokenid : ';', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '<': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          char8-t c2 = get-char8(self);
          switch (c2) {
            case '<': {
              str-buffer::concat(&buf, c2);
              char8-t c3 = get-char8(self);
              switch (c3) {
                case '=': {
                  str-buffer::concat(&buf, c3);
                  object-t token = $make(token::klass(), #tokenid : '<<=', #buffer : buf.ptr,
                                        #line : self.line, #column : self.column - buf.len);
                  return token;
                }
              }
              unget-char8(self);
              object-t token = $make(token::klass(), #tokenid : '<<', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
            case '=': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '<=', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
          }
          unget-char8(self);
          object-t open-token = $make(open-token::klass(), #tokenid : '<', #buffer : buf.ptr,
                                     #line : self.line, #column : self.column - buf.len);
          $push(self.open-tokens, open-token);
          return open-token;
        }
        case '=': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          char8-t c2 = get-char8(self);
          switch (c2) {
            case '=': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '==', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
            case '>': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : ':', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
          }
          unget-char8(self);
          object-t token = $make(token::klass(), #tokenid : '=', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '>': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          char8-t c2 = get-char8(self);
          switch (c2) {
            case '=': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '>=', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
            case '>': {
              char8-t c3 = get-char8(self);
              switch (c3) {
                case '=': {
                  str-buffer::concat(&buf, c3);
                  object-t token = $make(token::klass(), #tokenid : '>>=', #buffer : buf.ptr,
                                        #line : self.line, #column : self.column - buf.len);
                  return token;
                }
              }
              unget-char8(self);
              object-t token = $make(token::klass(), #tokenid : '>>', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
          }
          unget-char8(self);
          object-t token = $make(token::klass(), #tokenid : '>', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          object-t open-token = $pop(self.open-tokens);
          if ('<' != $tokenid(open-token))
            $push(self.open-tokens, open-token);
          else
            $set-close-token(open-token, token);
          return token;
        }
        case '?': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          object-t token = $make(token::klass(), #tokenid : '?', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '@': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          object-t token = $make(token::klass(), #tokenid : '@', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '[': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          object-t open-token = $make(open-token::klass(), #tokenid : '[', #buffer : buf.ptr,
                                     #line : self.line, #column : self.column - buf.len);
          $push(self.open-tokens, open-token);
          return open-token;
        }
        case ']': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          object-t token = $make(token::klass(), #tokenid : ']', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          object-t open-token;
          do {
            open-token = $pop(self.open-tokens);
          } while ('<' == $tokenid(open-token));

          if ('[' != $tokenid(open-token))
            throw $make(syntax-exception::klass(), #token : token, #file : self.file, #msg : "not balenced");
          $set-close-token(open-token, token);
          return token;
        }
        case '^': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          char8-t c2 = get-char8(self);
          switch (c2) {
            case '=': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '^=', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
          }
          unget-char8(self);
          object-t token = $make(token::klass(), #tokenid : '^', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '`': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          object-t token = $make(token::klass(), #tokenid : '`', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '{': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          object-t open-token = $make(open-token::klass(), #tokenid : '{', #buffer : buf.ptr,
                                     #line : self.line, #column : self.column - buf.len);
          $push(self.open-tokens, open-token);
          return open-token;
        }
        case '|': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          char8-t c2 = get-char8(self);
          switch (c2) {
            case '=': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '|=', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
            case '|': {
              str-buffer::concat(&buf, c2);
              object-t token = $make(token::klass(), #tokenid : '||', #buffer : buf.ptr,
                                    #line : self.line, #column : self.column - buf.len);
              return token;
            }
          }
          unget-char8(self);
          object-t token = $make(token::klass(), #tokenid : '|', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        case '}': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          object-t token = $make(token::klass(), #tokenid : '}', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          object-t open-token;
          do {
            open-token = $pop(self.open-tokens);
          } while ('<' == $tokenid(open-token));

          if ('{' != $tokenid(open-token))
            throw $make(syntax-exception::klass(), #token : token, #file : self.file, #msg : "not balenced");
          $set-close-token(open-token, token);
          return token;
        }
        case '~': {
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          object-t token = $make(token::klass(), #tokenid : '~', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
        default: {
          if (NUL == c1)
            return nullptr;
          char8-t[512] chunk = ""; str-buffer-t buf = { chunk, 0, ssizeof(chunk) };
          str-buffer::concat(&buf, c1);
          object-t token = $make(token::klass(), #tokenid : 'undf', #buffer : buf.ptr,
                                #line : self.line, #column : self.column - buf.len);
          return token;
        }
      }
    }
  }
}
