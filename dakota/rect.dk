// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota;

klass dimension;
klass point;

klass rect {
  slots {
    point::slots-t     point;
    dimension::slots-t dimension;
  }
  method init(object-t self, slots-t slots : {{.x = 0, .y = 0}, {.width = 0, .height = 0}}) -> object-t {
    self = $init(super);
    mutable-unbox(self) = slots;
    return self;
  }
  method compare(const slots-t* slots, const slots-t* other-slots) -> cmp-t {
    cmp-t result = 0;
    if (slots != other-slots) {
      if (0)
        ;
      else if (0 != (result = intptr-compare(slots->point.x, other-slots->point.x)))
        ;
      else if (0 != (result = intptr-compare(slots->point.y, other-slots->point.y)))
        ;
      else if (0 != (result = intptr-compare(slots->dimension.width, other-slots->dimension.width)))
        ;
      else if (0 != (result = intptr-compare(slots->dimension.height, other-slots->dimension.height)))
        ;
    }
    return result;
  }
}
