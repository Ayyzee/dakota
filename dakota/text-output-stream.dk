// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cassert>

module dakota;

klass features {
  slots enum {
    k-none =             0,
    k-indent =           1 << 0,
    k-leading-newline =  1 << 1,
    k-trailing-newline = 1 << 2,
    k-leading-ws =       1 << 3,
    k-trailing-ws =      1 << 4
  }
}
klass text-output-stream {
  superklass object-output-stream;
  klass      klass;

  slots {
    int64-t    column;
    int64-t    column-width;
    features-t previous-features;
  }
  static str-t const[] ws = {
    "",
    " ",
    "  ",
    "   ",
    "    ",
    "     ",
    "      ",
    "       ",
    "        ",
  };
  method init(object-t self, stream-t stream: stdout, ssize-t column-width: 2) -> object-t {
    self = $init(super, #stream: stream);
    self.column = 0;
    if (column-width > scountof(ws))
      column-width = scountof(ws);
    self.column-width = column-width;
    self.previous-features = features-t::k-trailing-newline;
    return self;
  }
  method column-incr(object-t self) -> object-t {
    self.column++;
    return self;
  }
  method column-decr(object-t self) -> object-t {
    if (0 != self.column)
      self.column--;
    return self;
  }
  method write(object-t self, str-t string, features-t features) -> object-t {
    assert(!((features & features-t::k-indent) &&
             (features & features-t::k-leading-ws)));

    if (0 != (features & features-t::k-indent))
      for (int64-t i = 0; i < self.column; i++)
        $write(self, ws[self.column-width]);

    if (0 != (features & features-t::k-leading-ws))
      if (0 == (self.previous-features & features-t::k-trailing-newline))
        $write(self, " ");

    if (0 != (features & features-t::k-leading-newline))
      if (0 == (self.previous-features & features-t::k-trailing-newline))
        $write(self, "\n");

    $write(self, string);

    if (0 != (features & features-t::k-trailing-ws))
      $write(self, " ");

    if (0 != (features & features-t::k-trailing-newline))
      $write(self, "\n");

    self.previous-features = features;
    return self;
  }
}
