// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cinttypes>
# include <cstring>

module dakota;

klass features;
klass text-output-stream;

using features::k-none;
using features::k-indent;
using features::k-leading-newline;
using features::k-trailing-newline;
using features::k-leading-ws;
using features::k-trailing-ws;

klass xml-object-output-stream {
  superklass text-output-stream;

  slots {
    ssize-t indent-level;

    str-t key-delim;
    str-t element-delim;

    str-t start-seq-delim;
    str-t end-seq-delim;

    str-t start-tbl-delim;
    str-t end-tbl-delim;
  }
  method init(object-t self, stream-t stream : stdout) -> object-t {
    self = $init(super, #stream : stream);
    self.indent-level = 1; // set to zero for maximum compactness

    self.start-seq-delim = "<sequence>";
    self.end-seq-delim = "</sequence>";

    self.start-tbl-delim = "<table>";
    self.end-tbl-delim = "</table>";

    if (0 != self.indent-level) {
      self.key-delim = "";
      self.element-delim = "";

    } else {
      self.key-delim = "";
      self.element-delim = "";
    }
    return self;
  }
  static func features(object-t self, int-t flags) -> features-t {
    if (0 != self.indent-level)
      return cast(features-t)(flags);
    else
      return k-none;
  }
  method write-element(object-t self, str-t element, str-t key) -> object-t {
    char8-t[128] buffer;
    if (nullptr != key)
      snprintf(buffer, sizeof(buffer), "\"%s\"%s\"%s\"%s",  key, self.key-delim, element, self.element-delim);
    else
      snprintf(buffer, sizeof(buffer), "\"%s\"%s", element, self.element-delim);
    $write(self, buffer, features(self, k-indent | k-trailing-newline));
    return self;
  }
  method write-element(object-t self, ssize-t element, str-t key) -> object-t {
    char8-t[128] buffer;
    if (nullptr != key)
      snprintf(buffer, sizeof(buffer), "\"%s\"%s%zi%s",  key, self.key-delim, element, self.element-delim);
    else
      snprintf(buffer, sizeof(buffer), "%zi%s", element, self.element-delim);
    $write(self, buffer, features(self, k-indent | k-trailing-newline));
    return self;
  }
  method write-element(object-t self, size-t element, str-t key) -> object-t {
    char8-t[128] buffer;
    if (nullptr != key)
      snprintf(buffer, sizeof(buffer), "\"%s\"%s%zi%s",  key, self.key-delim, element, self.element-delim);
    else
      snprintf(buffer, sizeof(buffer), "%zi%s", element, self.element-delim);
    $write(self, buffer, features(self, k-indent | k-trailing-newline));
    return self;
  }
  method write-table-start(object-t self, str-t key) -> object-t {
    char8-t[128] buffer;
    if (nullptr != key)
      snprintf(buffer, sizeof(buffer), "\"%s\"%s%s", key, self.key-delim, self.start-tbl-delim);
    else
      snprintf(buffer, sizeof(buffer), "%s", self.start-tbl-delim);
    $write(self, buffer, features(self, k-indent | k-trailing-newline));
    $column-incr(self);
    return self;
  }
  method write-table-end(object-t self) -> object-t {
    char8-t[128] buffer;
    snprintf(buffer, sizeof(buffer), "%s%s", self.end-tbl-delim, self.element-delim);
    $column-decr(self);
    $write(self, buffer, features(self, k-indent | k-trailing-newline));
    return self;
  }
  method write-sequence-start(object-t self, str-t key) -> object-t {
    char8-t[128] buffer;
    if (nullptr != key)
      snprintf(buffer, sizeof(buffer), "\"%s\"%s%s", key, self.key-delim, self.start-seq-delim);
    else
      snprintf(buffer, sizeof(buffer), "%s", self.start-seq-delim);
    $write(self, buffer, features(self, k-indent | k-trailing-newline));
    $column-incr(self);
    return self;
  }
  method write-sequence-end(object-t self) -> object-t {
    char8-t[128] buffer;
    snprintf(buffer, sizeof(buffer), "%s%s", self.end-seq-delim, self.element-delim);
    $column-decr(self);
    $write(self, buffer, features(self, k-indent | k-trailing-newline));
    return self;
  }
}
