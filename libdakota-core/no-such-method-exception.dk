// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cassert>

module dakota-core;

klass output-stream;

klass no-such-method-exception {
  superklass exception;

  slots {
    object-t           obj;
    object-t           kls;
    const signature-t* sig;
  }
  method init(object-t           self,
              object-t           object:    nullptr,
              object-t           klass:     nullptr,
              const signature-t* signature: nullptr,
              str-t              src-file:  nullptr,
              int-t              src-line:  0) -> object-t {
    self = $init(super, #src-file: src-file, #src-line: src-line);
    self.obj = object;
    self.kls = klass;
    self.sig = signature;
    return self;
  }
  method print(object-t self, object-t out) -> object-t {
    if (out == nullptr || out == null)
      out = std-error;
    $print(super, out);
    if (self.obj) {
      str-t instance-name;
      if ($instance-of?(self.obj, klass::_klass_))
        instance-name = name-of(self.obj);
      else
        instance-name = $str(self.obj);
      object-t kls;
      if (self.kls)
        kls = superklass-of(self.kls);
      else
        kls = klass-of(self.obj);
      $print-format(out, ", \"instance\": \"%s\", \"klass\": \"%s\"",
                    instance-name,
                    name-of(kls));
    }
    if (self.sig)
      $print-format(out, ", \"method\": \"%s(%s)\"",
                    self.sig->name,
                    self.sig->param-types);
    return self;
  }
}
