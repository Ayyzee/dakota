// -*- mode: dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2017 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cassert>

module dakota;

klass object-output-stream;
klass output-stream;

klass open-token {
  superklass token;

  slots {
    object-t close-token;
  }
  method va::init(object-t self, va-list-t args) -> object-t {
    self = $va::init(super, args);
    self.close-token = nullptr;
    return self;
  }
  method write-slots(object-t self, object-t out) -> object-t {
    $write-slots(super, out);
    $write-slots-start(out, _klass_);

    $write-item-idref(out, self.close-token, "close-token");

    $write-slots-end(out);
    return self;
  }
  method set-close-token(object-t self, object-t close-token) -> object-t {
    assert(close-token != nullptr);
    self.close-token = close-token;
    return self;
  }
  method close-token(object-t self) -> object-t {
    assert(self.close-token != nullptr);
    return self.close-token;
  }
}
