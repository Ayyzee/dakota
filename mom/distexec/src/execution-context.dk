// -*- mode: C++; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007, 2008, 2009 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include <stdio.h>;
include <string.h>;

include "common.h";

/*noexport*/ const char8-t  cdelim = '*';
noexport char8-t const* sdelim = "*";

klass execution-context
{
//   slots
//   {
//     char8-t   cnt[4 + 1];
//     char8-t*  cwd;
//     size-t   cwdlen;
//     char8-t*  path;
//     size-t   pathlen;
//     char8-t** args;
//     size-t   argslen;
//     char8-t** vars;
//     size-t   varslen;
//   }
  
  method char8-t* serialize(object-t self,
                           char8-t*  cmd, size-t cmdlen,
                           char8-t* cnt,
                           const char8-t*  cwd,
                           const char8-t*  path,
                           const char8-t* const* args,
                           const char8-t* const* vars)
  {
    cmd[0] = (char8-t)0;

    sys:strcat(cmd, cnt);
    sys:strcat(cmd, sdelim);

    sys:strcat(cmd, cwd);
    sys:strcat(cmd, sdelim);

    sys:strcat(cmd, path);
    sys:strcat(cmd, sdelim);

    if (NULL != args)
    {
      while (NULL != *args)
      {
        sys:strcat(cmd, *args);
        sys:strcat(cmd, sdelim);
        args++;
      }
      sys:strcat(cmd, sdelim);
    }
  
    if (NULL != vars)
    {
      while (NULL != *vars)
      {
        sys:strcat(cmd, *vars);
        sys:strcat(cmd, sdelim);
        vars++;
      }
      sys:strcat(cmd, sdelim);
    }
    return cmd;
  }
}

klass execution-context-klass
{
  superklass klass;

  method const char8-t* deserialize(object-t self,
                                   const char8-t*  cmd,
                                   char8-t*  cnt,
                                   char8-t*  cwd,  size-t cwdlen,
                                   char8-t*  path, size-t pathlen,
                                   char8-t** args, size-t argslen,
                                   char8-t** vars, size-t varslen)
  {
    char8-t* d;
    d = sys:strchr(cmd, cdelim);
    // bugbug
//     *d = (char8-t)0;
    d++;
    sys:strncpy(cnt, d, 4 + (1)); // hackhack
//     cmd = d;

    d = sys:strchr(d, cdelim);
    // bugbug
//     *d = (char8-t)0;
    d++;
    sys:strncpy(cwd, d, cwdlen);
//     cmd = d;

    d = sys:strchr(d, cdelim);
//     *d = (char8-t)0;
    d++;
    sys:strncpy(path, d, pathlen);
//     cmd = d;

    for(size-t i = 0; i < argslen; i++)
    {
      args[i] = d;
      d = sys:strchr(d, cdelim);
      if (NULL == d)
      { break; }
      else
      {
//         cmd = d;
//         *cmd = (char8-t)0;
        d++;
        if (cdelim == *d)
        {
          args[i + 1] = NULL;
//           cmd++;
          break;
        }
      }
    }

    for(size-t i = 0; i < varslen; i++)
    {
      vars[i] = d;
      d = sys:strchr(d, cdelim);
      if (NULL == d)
      { break; }
      else
      {
//         cmd = d;
//         *cmd = (char8-t)0;
        d++;
        if (cdelim == *d)
        {
          vars[i + 1] = NULL;
//           cmd++;
          break;
        }
      }
    }
    MOM-LOG(mom:LOG-GENERIC-FLAG, "context: %s, %s, %s, [%s, %s], [%s]",
           cnt, cwd, path, args[0], args[1], vars[0]);
    return cmd;
  }
}
