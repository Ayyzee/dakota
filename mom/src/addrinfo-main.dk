// -*- mode: C++; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007, 2008, 2009 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include <assert.h>;
include <netdb.h>;
include <stdio.h>;
include <string.h>;
include <sys/socket.h>;
include <sys/types.h>;

namespace va
{
  static void error(const char8-t* format, va-list-t args)
  {
    fprintf(stderr, "error: ");
    vfprintf(stderr, format, args);
    fprintf(stderr, "\n");
    exit(1);
  }
}
static void error(const char8-t* format, ...)
{
  va-list-t args;
  va-start(args, format);
  va:error(format, args);
  va-end(args);
}

int-t main(int-t argc, char8-t** argv)
{
  if (!(5 == argc || 4 == argc))
    error("usage: %s <addr> <port> stream|dgram [passive]", argv[0]);
  struct addrinfo* result = NULL;
  struct addrinfo hints = {0};

  if (5 == argc)
  {
    if (0 != strcmp("passive", argv[argc - 1]))
      error("expected 'passive' but found '%s'", argv[argc - 1]);
    hints.ai-flags |= AI-PASSIVE; // server
  }
  if (0 == strcmp("stream", argv[3]))
    hints.ai-socktype = xsocket:k-stream;
  else if (0 == strcmp("dgram", argv[3]))
    hints.ai-socktype = xsocket:k-dgram;
  else
    error("expected 'stream' or 'dgram' but found '%s'", argv[3]);
  hints.ai-family = AF-UNSPEC; // wildcard
  hints.ai-protocol = 0; // wildcard
  int-t n = getaddrinfo(argv[1], argv[2], &hints, &result);
  if (0 != n)
    error("%s", gai-strerror(n));

  struct addrinfo *ai;

  for (ai = result; ai; ai = ai->ai-next)
  {
    printf("socket(%i, %i, %i)\n", ai->ai-family, ai->ai-socktype, ai->ai-protocol);
  }
  return 0;
}
