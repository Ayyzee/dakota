// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include <assert.h>;
include <errno.h>;
include <stdlib.h>;
include <string.h>;
include <sys/time.h>;
include <sys/types.h>;
include <time.h>;
include <unistd.h>;

#ifndef __STDC-FORMAT-MACROS
#define __STDC-FORMAT-MACROS
#endif //__STDC-FORMAT-MACROS
include <inttypes.h>;

include "config.h";
include "log.h";
include "sys.h";

namespace mom
{
  /*noexport*/ const uint32-t default-log-flags =
#if 1
  mom:LOG-ALL
  //   mom:LOG-INVOKE-FLAG
  // | mom:LOG-CHANGE-EVENT-FLAG
  // | mom:LOG-CALLBACK-FLAG
  // | mom:LOG-EOF-FLAG
  // | mom:LOG-IOMUX-FLAG
  // | mom:LOG-READ-FLAG
  // | mom:LOG-WRITE-FLAG
  // | mom:LOG-CLOSE-FLAG
  // | mom:LOG-HOST-FLAG
  // | mom:LOG-SOCKINFO-FLAG
  // | mom:LOG-FD-FLAG
  // | mom:LOG-PROC-FLAG
  ;
#else
  0
  ;
#endif

  noexport uint32-t log-flags = 0;
} // namespace mom

static void __attribute__((constructor)) initializer()
{
  char8-t* hexstr = sys:getenv("DE_LOG_FLAGS");

  if (NULL != hexstr)
  {
    mom:log-flags = sys:strtoumax(hexstr, (char8-t**)NULL, 16);  zeroneen(errno);
  }
  else
  {
    mom:log-flags = mom:default-log-flags;
  }
  return;
}

#if USE-SYSLOG
#else
noexport char8-t logfile-name[1024] = "/tmp/mom.log";
noexport FILE* logfile = stderr;
noexport const char8-t* ident = "";
noexport pid-t pid = 0;

namespace mom
{
  noexport void set-log-file(const char8-t* log-file); // hackhack
  noexport void add-watch(); // hackhack
}

noexport void mom:set-log-file(const char8-t* log-file)
{
  sys:strcpy(logfile-name, log-file); // bugbug
  return;
}

noexport void mom:add-watch()
{
  FILE* watch = sys:fopen("distexec.watch", "a");
  sys:fprintf(watch, "%s\n", logfile-name);
  sys:fclose(watch);
  return;
}

export void mom:openlog(const char8-t* id, int-t logopt, int-t facility)
{
  ident = id;

  if (NULL == ident)
  {
    ident = sys:getprogname();
  }
  pid = sys:getpid();
  //sys:snprintf(logfile-name, sizeof(logfile-name) - (1), "%s.%i.log", ident, pid);
  logfile = sys:fopen(logfile-name, "a");
  if (NULL == logfile)
  {
    logfile = stderr; // hackhack
  }
  //mom:add-watch();
  return;
}

export void mom:closelog()
{
  if (stderr != logfile)
    sys:fclose(logfile);
  return;
}

export void mom:syslog(int-t priority, const char8-t* message, ...)
{
  va-list-t args;
  va-start(args, message);
  mom:vsyslog(priority, message, args);
  va-end(args);
  return;
}
export void mom:vsyslog(int-t priority, const char8-t* message, va-list-t args)
{
  struct timeval tv = {0};
  int-t n = sys:gettimeofday(&tv, NULL);  sc(n);
  struct tm tm-to-sec;
  sys:localtime-r(&tv.tv-sec, &tm-to-sec);

  char8-t buf[4 + 1 + 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 + 6 + (1)];
  sys:strftime(buf, sizeof(buf) - (1), "%F %T", &tm-to-sec);
  sys:fprintf(logfile, "%s.%06i %s[%i]: ", buf, tv.tv-usec, ident, pid);
  sys:vfprintf(logfile, message, args);
  sys:fprintf(logfile, "\n");
  mom:syslog-flush();
  return;
}
export int-t mom:setlogmask(int-t priority-mask)
{
  throw "not yet implemented";
  return 0; // hackhack
}
noexport void mom:syslog-flush()
{
  sys:fflush(logfile);
  return;
}

noexport boole-t mom:va:should-log(mom:log-t flag, va-list-t args)
{
  boole-t state = false;
  return state;
}
noexport boole-t mom:should-log(mom:log-t flag, ...)
{
  va-list-t args;
  va-start(args, flag);
  boole-t state = mom:va:should-log(flag, args);
  va-end(args);
  return state;
}
#endif // USE-SYSLOG
