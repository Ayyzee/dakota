// -*- mode: c++ -*-

// slots <fq-type> ;

// slots        ;
// slots        { ... }
// slots struct ;
// slots struct { ... }
// slots union  ;
// slots union  { ... }

// slots enum                    ;
// slots enum                    { ... }
// slots enum        : <fq-type> ;
// slots enum        : <fq-type> { ... }
// slots enum struct             ;
// slots enum struct             { ... }
// slots enum struct : <fq-type> ;
// slots enum struct : <fq-type> { ... }

digraph {
  graph [ rankdir = LR ];
  node [ shape = circle, width = 0.5, fixedsize = true ];
  node [ label = "", width = 0.25 ];

  000 -> 010 [ label = "slots" ];
  010 -> 020 [ label = "enum" ];
  010 -> 030 [ label = "enum" ];
  010 -> 050 [ label = "enum" ];
  020 -> 030 [ label = "struct" ];
  020 -> 025 [ label = ";" ];
  030 -> 040 [ label = ":" ];
  030 -> 035 [ label = ";" ];
  040 -> 050 [ label = "<fq-type>", fontcolor = blue ];
  050 -> 055 [ label = ";" ];
  050 -> 060 [ label = "{" ];
  060 -> 070 [ label = "<enum-body-in>", fontcolor = blue ];
  070 -> 080 [ label = "}" ];

  000 -> 100 [ label = "slots" ];
  140 -> 100 [ label = "struct | union" ];
  100 -> 110 [ label = "{" ];
  100 -> 105 [ label = ";" ];
  110 -> 120 [ label = "<struct-union-body-in>", fontcolor = blue ];
  120 -> 130 [ label = "}" ];

  000 -> 140 [ label = "slots" ];
  140 -> 150 [ label = "<fq-type>", fontcolor = blue ];
  150 -> 155 [ label = ";" ];

  subgraph {
    graph [ rank = same ];
    050;
    100;
  }
  subgraph {
    graph [ rank = same ];
    040;
    140;
  }
}
