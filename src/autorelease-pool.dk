// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>

module dakota;

klass pair;
klass deque;
klass named-info;
trait stack;

klass autorelease-pool-klass
{
  superklass klass;

  slots
  {
    object-t pools;
  }

  object-t initialize(object-t kls)
  {
    dk-klass-for-name(#deque); // hackhack
    return kls;
  }

  object-t finalize(object-t kls)
  {
    return kls;
  }

  method object-t init(object-t self,
                       named-info::slots-t* info-slots : nullptr,
                       object-t                 info :      nullptr)
  {
    self = dk::init(super, #info-slots : info-slots, #info : info);
    self.pools = make(deque::klass);
    return self;
  }

  method object-t pools(object-t self)
  {
    object-t result = self.pools;
    return result;
  }

  method object-t current-pool(object-t self)
  {
    assert(false == dk::empty?(self.pools));
    object-t result = dk::top(self.pools);
    return result;
  }
}

klass autorelease-pool
{
  klass autorelease-pool-klass;

  slots
  {
    object-t counted-elements;
  }

  method object-t init(object-t self)
  {
    self = dk::init(super);
    self.counted-elements = make(sorted-counted-set::klass);
    object-t kls = dkt-klass(self);
    object-t pools = dk::pools(kls);
    dk::push(pools, self);
    return self;
  }

  method object-t add(object-t self, object-t element)
  {
    dk::add(self.counted-elements, element);
    return self;
  }

  method object-t release(object-t self)
  {
    for (pair-t* pair in self.counted-elements) {
      uint32-t n = *uint32::unbox(pair->last);
      for (uint32-t i = 0; i < n; i++) {
        dk::release(pair->first);
      }
    }
    object-t kls = dkt-klass(self);
    object-t pools = dk::pools(kls);
    object-t pool = dk::pop(pools);
    assert(self == pool);
    object-t result = dk::dealloc(self);
    return result;
  }

  method object-t dealloc(object-t self)
  {
    dk::dealloc(self.counted-elements);
    object-t result = dk::dealloc(super);
    return result;
  }
}
