// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cassert>

module dakota;

klass pair;
klass deque;
klass named-info;
klass sorted-counted-set;
klass int64;
trait stack;

klass autorelease-pool-klass {
  superklass klass;

  slots {
    object-t pools;
  }
  method va::init(object-t self, va-list-t args) -> object-t {
    self = $va::init(super, args);
    self.pools = make(deque::klass);
    return self;
  }
  method pools(object-t self) -> object-t {
    object-t result = self.pools;
    return result;
  }
  method current-pool(object-t self) -> object-t {
    assert(false == $empty?(self.pools));
    object-t result = $top(self.pools);
    return result;
  }
}
klass autorelease-pool {
  klass autorelease-pool-klass;

  slots {
    object-t counted-elements;
  }
  method init(object-t self) -> object-t {
    self = $init(super);
    self.counted-elements = make(sorted-counted-set::klass);
    object-t kls = klass-of(self);
    object-t pools = $pools(kls);
    $push(pools, self);
    return self;
  }
  method add(object-t self, object-t element) -> object-t {
    $add(self.counted-elements, element);
    return self;
  }
  method release(object-t self) -> object-t {
    for (pair-t& pair in self.counted-elements) {
      int64-t n = int64::unbox(pair.last);
      for (int64-t i = 0; i < n; i++) {
        $release(pair.first);
      }
    }
    object-t kls = klass-of(self);
    object-t pools = $pools(kls);
    object-t pool = $pop(pools);
    assert(self == pool);
    object-t result = $dealloc(self);
    return result;
  }
  method dealloc(object-t self) -> object-t {
    $dealloc(self.counted-elements);
    object-t result = $dealloc(super);
    return result;
  }
}
