#!/usr/bin/perl -w
# -*- mode: cperl -*-
# -*- cperl-close-paren-offset: -2 -*-
# -*- cperl-continued-statement-offset: 2 -*-
# -*- cperl-indent-level: 2 -*-
# -*- cperl-indent-parens-as-block: t -*-
# -*- cperl-tab-always-indent: t -*-

use strict;
use warnings;

use Data::Dumper;
$Data::Dumper::Terse = 1;
$Data::Dumper::Useqq = 1;
$Data::Dumper::Sortkeys = 1;

&main(\@ARGV);

sub main {
  my ($argv) = @_;
  my $result = '';

  foreach my $file (@$argv) {
    my $data = do $file or die;
    $result .= "# $file\n";
    my $last_char = &last_char($result);
    $result .= &process($last_char, $data);
    $result .= $last_char = "\n" if ("\n" ne $last_char);
  }
  print $result;
}
sub process {
  my ($last_char, $data) = @_;
  my $result = '';
  $_ = ref($data);
  SWITCH: {
    /^HASH$/  and $result .= &process_tbl($last_char, $data), last SWITCH;
    /^ARRAY$/ and $result .= &process_seq($last_char, $data), last SWITCH;
    $result .= &process_scalar($last_char, $data);
  }
  return $result;
}
sub first_char {
  my ($str) = @_;
  return substr($str, 0, 1);
}
sub last_char {
  my ($str) = @_;
  return substr($str, -1, 1);
}
sub is_legal_name {
  my ($name) = @_;
  my $result = 0;
  my $first_char = &first_char($name);

  if ($first_char =~ m/[_a-zA-Z]/) {
    $result = 1;
  }
  return $result;
}
sub process_tbl {
  my ($last_char, $data) = @_;
  my $result = '';
  my ($name, $values);

  foreach my $name (sort keys %$data) {
    if (!&is_legal_name($name)) {
      next;
    } else {
      my $legal_name = $name; $legal_name =~ s/-/_/g;
      $result .= $last_char = "\n" if ("\n" ne $last_char);
      $result .= "$legal_name =";
      $last_char = &last_char($result);
      $result .= &process($last_char, $$data{$name});
      $last_char = &last_char($result);
      $result .= $last_char = "\n" if ("\n" ne $last_char);
    }
  }
  return $result;
}
sub process_seq {
  my ($last_char, $data) = @_;
  my $result = '';

  foreach my $value (@$data) {
    $result .= &process($last_char, $value);
    $last_char = &last_char($result);
  }
  $result .= $last_char = "\n" if ("\n" ne $last_char);
  return $result;
}
sub process_scalar {
  my ($last_char, $data) = @_;
  my $result = '';
  #$data = $data ||= '';
  $result .= $last_char = ' ' if (' ' ne $last_char);
  $result .= $data;
  return $result;
}
