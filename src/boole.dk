// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota;

#include <cstdbool>

klass boole-klass {
  superklass klass;

  slots object-t[2];

  static object-t alloc(object-t self) { // intentionally omitted 'method' declaration
    return *unbox(self)[0]; // return false object by default
  }
}
// its George Boole (not George Bool)
klass boole { // a doubleton :-)
  superklass number;
  klass      boole-klass;

  slots bool-t;

  object-t initialize(object-t kls) {
    assert(klass == kls);
    
    auto mk = [](object-t k, boole-t v) {
      object-t self = $alloc(k);
      self = $init(super);
      *unbox(self) = v;
      return self;
    };
    boole-t f = false;
    *boole-klass::unbox(kls)[f] = mk(kls, f);
    boole-t t = true;
    *boole-klass::unbox(kls)[t] = mk(kls, t);
    $add-method-for-selector(klass-of(kls), SELECTOR(alloc(object-t)), boole-klass::alloc);

    return kls;
  }
  method object-t init(object-t self, slots-t slots : false) {
    // intentionally not chaining $init()
    assert(false == *unbox(self));
    assert(1 >= slots);
    if (slots)
      self = *boole-klass::unbox(klass-of(self))[slots]; // intentionally throwing away self
    return self;
  }
}
static-assert(0 == false, "Boolean false must equal 0");
static-assert(1 == true,  "Boolean true must equal 1");

// $init(super, ...
// $init(super(self), ...
