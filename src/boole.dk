// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota;

#include <cstdbool>

klass boole-klass {
  superklass klass;

  slots {
    object-t f;
    object-t t;
  }
  method object-t va::init(object-t self, va-list-t args) {
    self = $va::init(super, args);
    self.f = make(boole::klass, #slots : false);
    self.t = make(boole::klass, #slots : true);
    return self;
  }
  object-t initialize(object-t kls) {
    dk-klass-for-name(#boole);
    return kls;
  }

}
// its George Boole (not George Bool)
klass boole { // a doubleton :-)
  superklass number;
  klass      boole-klass;

  slots bool-t;

  method object-t init(object-t self, slots-t slots : false) {
    self = $init(super); // self = super.$init();
    *unbox(self) = slots;
    boole-klass::slots-t* ks = boole-klass::unbox(klass-of(self));
    if (slots) {
      if (nullptr == ks->t)
        ks->t = self;
      self = ks->t; // intentionally throw away self if not needed 
    } else {
      if (nullptr == ks->f)
        ks->f = self;
      self = ks->f; // intentionally throw away self if not needed 
    }
    return self;
  }
}
