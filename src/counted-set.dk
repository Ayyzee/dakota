// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota;

klass pair;
klass uint32;
klass vector;

trait counted-set {
  //provides set;
  require collection;

  method object-t elements(object-t self) {
    object-t set-kls = superklass-of(klass-of(self));
    object-t result = make(set-kls);
    for (pair-t* pair in self)
      dk::add(result, pair->first);
    return result;
  }
  method object-t counts(object-t self) {
    object-t result = make(vector::klass, #size : dk::size(self));
    for (pair-t* pair in self)
      dk::add-last(result, pair->last);
    return result;
  }
  method uint32-t count-at(object-t self, object-t first, uint32-t default-last) {
    uint32-t last-content = default-last;
    object-t pair = dk::pair-at(self, first, cast(object-t)nullptr);

    if (nullptr != pair) {
      pair-t* pair-content = pair::unbox(pair);
      object-t last = pair-content->last;
      last-content = *uint32::unbox(last);
    }
    return last-content;
  }
  method object-t write-lite(object-t self, object-t out) {
    dk::write(out, "{");
    str-t delim = "";

    for (pair-t* pair in self) {
      dk::write(out, delim);
      dk::write-lite(pair->first, out); // must be primitive type
      dk::write(out, ":");
      if (nullptr == pair->last || null == pair->last)
        dk::write(out, "null");
      else
        dk::write-lite(pair->last, out);
      delim = ",";
    }
    dk::write(out, "}");
    return self;
  }
  static object-t add(object-t self, object-t first) {
    object-t pair = dk::pair-at(self, first, cast(object-t)nullptr);

    if (nullptr != pair) {
      pair-t* pair-content = pair::unbox(pair);
      object-t last = pair-content->last;
      uint32-t* last-content = uint32::unbox(last);
      (*last-content)++;
    } else {
      object-t last = uint32::box(1);
      object-t pair1 = pair::box({first, last});
      dk::add-pair(self, pair1);
    }
    return first;
  }
  static object-t at(object-t self, object-t first) {
    object-t pair = dk::pair-at(self, first);
    object-t last = pair::unbox(pair)->last;
    return last;
  }
  static object-t at(object-t self, object-t first, object-t default-last) {
    object-t result = default-last;
    object-t pair = dk::pair-at(self, first, cast(object-t)nullptr);

    if (nullptr != pair) {
      pair-t* pair-content = pair::unbox(pair);
      result = pair-content->last;
    }
    return result;
  }
  object-t initialize(object-t kls) {
    REASSOC-AND-ADD-METHOD-FOR-SELECTOR(kls, selector( pair-at(object-t, object-t)),
                                             selector(      at(object-t, object-t)),
                                             cast(object-t (*)(object-t, object-t))at);

    REASSOC-AND-ADD-METHOD-FOR-SELECTOR(kls, selector( pair-at(object-t, object-t, object-t)),
                                             selector(      at(object-t, object-t, object-t)),
                                             cast(object-t (*)(object-t, object-t, object-t))at);

    REASSOC-AND-ADD-METHOD-FOR-SELECTOR(kls, selector(add-pair(object-t, object-t)),
                                             selector(     add(object-t, object-t)),
                                             cast(object-t (*)(object-t, object-t))add);
    return kls;
  }
  object-t finalize(object-t kls) {
    return kls;
  }
  method object-t pair-at(object-t self, object-t first);
  method object-t pair-at(object-t self, object-t first, object-t default-pair);
  method object-t add-pair(object-t self, object-t pair);
}
