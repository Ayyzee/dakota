# -*- mode: cperl -*-
# -*- cperl-close-paren-offset: -2 -*-
# -*- cperl-continued-statement-offset: 2 -*-
# -*- cperl-indent-level: 2 -*-
# -*- cperl-indent-parens-as-block: t -*-
# -*- cperl-tab-always-indent: t -*-
{
  'soname' => '$(libdir)/$(lib_prefix)dakota.$(SO_EXT)',
  'srcs' => [
    '$(srcdir)/assoc.$(dk_ext)',
    '$(srcdir)/autorelease-pool.$(dk_ext)',
    '$(srcdir)/bit-vector.$(dk_ext)',
    '$(srcdir)/boole.$(dk_ext)',
    '$(srcdir)/char16.$(dk_ext)',
    '$(srcdir)/char32.$(dk_ext)',
    '$(srcdir)/char8.$(dk_ext)',
    '$(srcdir)/collection.$(dk_ext)',
    '$(srcdir)/const-info.$(dk_ext)',
    '$(srcdir)/construct.$(dk_ext)',
    '$(srcdir)/counted-set.$(dk_ext)',
    '$(srcdir)/dakota.$(dk_ext)',
    '$(srcdir)/deque.$(dk_ext)',
    '$(srcdir)/dl.$(dk_ext)',
    '$(srcdir)/enum-info.$(dk_ext)',
    '$(srcdir)/equal-predicate.$(dk_ext)',
    '$(srcdir)/exception.$(dk_ext)',
    '$(srcdir)/file.$(dk_ext)',
    '$(srcdir)/forward-iterator.$(dk_ext)',
    '$(srcdir)/input-stream.$(dk_ext)',
    '$(srcdir)/keyword-exception.$(dk_ext)',
    '$(srcdir)/keyword.$(dk_ext)',
    '$(srcdir)/klass.$(dk_ext)',
    '$(srcdir)/method-alias.$(dk_ext)',
    '$(srcdir)/method.$(dk_ext)',
    '$(srcdir)/missing-keyword-exception.$(dk_ext)',
    '$(srcdir)/module-dakota.$(dk_ext)',
    '$(srcdir)/named-enum-info.$(dk_ext)',
    '$(srcdir)/named-info.$(dk_ext)',
    '$(srcdir)/no-such-keyword-exception.$(dk_ext)',
    '$(srcdir)/no-such-method-exception.$(dk_ext)',
    '$(srcdir)/object-input-stream.$(dk_ext)',
    '$(srcdir)/object-output-stream.$(dk_ext)',
    '$(srcdir)/object.$(dk_ext)',
    '$(srcdir)/output-stream.$(dk_ext)',
    '$(srcdir)/property.$(dk_ext)',
    '$(srcdir)/ptr.$(dk_ext)',
    '$(srcdir)/result.$(dk_ext)',
    '$(srcdir)/safe-str.$(dk_ext)',
    '$(srcdir)/selector-node.$(dk_ext)',
    '$(srcdir)/selector.$(dk_ext)',
    '$(srcdir)/sequence.$(dk_ext)',
    '$(srcdir)/set.$(dk_ext)',
    '$(srcdir)/signature.$(dk_ext)',
    '$(srcdir)/singleton-klass.$(dk_ext)',
    '$(srcdir)/size.$(dk_ext)',
    '$(srcdir)/sorted-array.$(dk_ext)',
    '$(srcdir)/sorted-counted-set.$(dk_ext)',
    '$(srcdir)/sorted-ptr-array.$(dk_ext)',
    '$(srcdir)/sorted-set.$(dk_ext)',
    '$(srcdir)/sorted-table.$(dk_ext)',
    '$(srcdir)/stack.$(dk_ext)',
    '$(srcdir)/std-compare.$(dk_ext)',
    '$(srcdir)/stdint.$(dk_ext)',
    '$(srcdir)/str.$(dk_ext)',
    '$(srcdir)/str128.$(dk_ext)',
    '$(srcdir)/str256.$(dk_ext)',
    '$(srcdir)/str32.$(dk_ext)',
    '$(srcdir)/str512.$(dk_ext)',
    '$(srcdir)/str64.$(dk_ext)',
    '$(srcdir)/strerror-name.$(dk_ext)',
    '$(srcdir)/string.$(dk_ext)',
    '$(srcdir)/super.$(dk_ext)',
    '$(srcdir)/symbol.$(dk_ext)',
    '$(srcdir)/system-exception.$(dk_ext)',
    '$(srcdir)/table.$(dk_ext)',
    '$(srcdir)/trace.$(dk_ext)',
    '$(srcdir)/vector.$(dk_ext)'
  ],
  'name' => '$(lib_prefix)dakota.$(SO_EXT)',
  'libs' => [
  ],
  'include-dirs' => [
    '$(srcdir)',
    '$(srcdir)/../include',
  ],
  'macros' => [
    'DKT_WORKAROUND',
    'HAVE_CONFIG_HH',
    'MOD_SIZE_CAST_HACK',
  ],
  'LIB_FILES' => [
    '$(libdir)/$(lib_prefix)dakota.$(SO_EXT)',
    '$(libdir)/dakota/dakota.$(pm_ext)',
    '$(libdir)/dakota/parse.$(pm_ext)',
    '$(libdir)/dakota/rewrite.$(pm_ext)',
    '$(libdir)/dakota/generate.$(pm_ext)',
    '$(libdir)/dakota/sst.$(pm_ext)',
    '$(libdir)/dakota/util.$(pm_ext)',
    '$(libdir)/dakota/macros.$(pl_ext)',
    '$(libdir)/dakota/compiler-darwin-gcc.$(json_ext)',
    '$(libdir)/dakota/compiler-darwin-clang.$(json_ext)',
    '$(libdir)/dakota/compiler-linux-gcc.$(json_ext)',
    '$(libdir)/dakota/compiler-linux-clang.$(json_ext)',
  ],
  'INCLUDE_FILES' => [
    '$(includedir)/dakota-log.$(hxx_ext)',
    '$(includedir)/dakota-finally.$(hxx_ext)',
    '$(includedir)/dakota.$(hxx_ext)',
  ],
  'BIN_FILES' => [
    '$(bindir)/dakota-info',
    '$(bindir)/dakota',
    '$(bindir)/dakota-fixup-stderr.$(pl_ext)',
    '$(bindir)/dakota-project',
  ],
  'HOME_FILES' => [
    '$(HOME)/.dakota/.gdbinit',
    '$(HOME)/.dakota/.bashrc',
    '$(HOME)/.dakota/emacs/init.el',
    '$(HOME)/.dakota/emacs/dakota-mode.el',
  ],
}
