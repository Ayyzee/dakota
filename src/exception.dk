// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota;

# include <cerrno>
# include <cstdio>
# include <cstdlib>
# include <cstring>
# include <exception>
# include <unistd.h> // getpid()

# if HAVE-CONFIG-HH
  # include "config.hh"
# endif

# include "dakota-private.hh"

klass output-stream;
klass system-exception;

static THREAD-LOCAL str-t current-exception-src-file;
static THREAD-LOCAL int-t current-exception-src-line;

func dkt-capture-current-exception(object-t arg) -> object-t {
  static THREAD_LOCAL object-t result;
  if (nullptr != arg)
    result = arg;
  return result;
}
func dkt-capture-current-exception(str-t arg,
                                   str-t src-file,
                                   int-t src-line) -> str-t {
  current-exception-src-file = src-file;
  current-exception-src-line = src-line;
  static THREAD_LOCAL str-t result;
  if (nullptr != arg)
    result = arg;
  return result;
}
# if !defined HAVE-GETPROGNAME
# if defined HAVE-PROCFS
static char8-t[4 * 1024] gbl-buf;
func getprogname() -> str-t {
  ssize-t n = readlink("/proc/self/exe", gbl-buf, sizeof(gbl-buf) - 1);
  if (-1 == n)
    throw make(system-exception::klass, #errnum : errno);
  gbl-buf[n] = NUL;
  str-t progname = strrchr(gbl-buf, '/');
  if (nullptr != progname)
    progname++;
  else
    progname = gbl-buf;
  return progname;
}
# endif
# endif

[[format-va-printf(2)]] static func va-log(int64-t priority, str-t format, va-list-t args) -> int-t {
  stream-t log-file = stderr;

  if (nullptr != getenv("DEBUG")) {
    fprintf(log-file, "%s[%i]: ", getprogname(), getpid());

    switch (priority) {
      case dkt::k-log-error:
        fprintf(log-file, "error: ");
        break;
      case dkt::k-log-warning:
        fprintf(log-file, "warning: ");
        break;
      case dkt::k-log-info:
        fprintf(log-file, "info: ");
        break;
      case dkt::k-log-debug:
        fprintf(log-file, "debug: ");
        break;
      default:
        std::abort();
    }
  }
  fprintf(log-file, "{");
  int-t result = vfprintf(log-file, format, args);
  fprintf(log-file, "},\n");
  // bugbug: need to adjust result
  return result;
}
[[format-va-printf(2)]] func dkt-va-log(int64-t priority, str-t format, va-list-t args) -> int-t {
  int-t result = va-log(priority, format, args);
  return result;
}
[[format-printf(2)]] func dkt-log(int64-t priority, str-t format, ...) -> int-t {
  va-list-t args;
  va-start(args, format);
  int-t result = dkt-va-log(priority, format, args);
  va-end(args);
  return result;
}
static /*THREAD-LOCAL*/ std::terminate-handler original-terminate =  std::set-terminate(pre-runtime-verbose-terminate);
static /*THREAD-LOCAL*/ std::terminate-handler original-unexpected = std::set-unexpected(pre-runtime-verbose-unexpected);

[[noreturn]] func pre-runtime-verbose-terminate() noexcept -> void {
//   dkt-log(dkt::k-log-info, "%s()", __func__);
  str-t src-file = current-exception-src-file;
  int-t src-line = current-exception-src-line;

  str-t current-exception-str = dkt-capture-current-exception(cast(str-t)nullptr, nullptr, 0);
  dkt-log(dkt::k-log-error, "uncaught/unexpected exception");

  if (nullptr != current-exception-str)
    fprintf(stderr,
            ": \"src-file\": \"%s\""
            ", \"src-line\": %i"
            ", \"exception-str\": \"%s\"" "\n",
            src-file,
            src-line,
            current-exception-str);
  else
    fprintf(stderr, "\n");

  if (nullptr != original-terminate)
    original-terminate();
  std::abort(); // should never get called
}
[[noreturn]] func verbose-terminate() noexcept -> void {
//   dkt-log(dkt::k-log-info, "%s()", __func__);
  str-t src-file = current-exception-src-file;
  int-t src-line = current-exception-src-line;

  str-t    current-exception-str = dkt-capture-current-exception(cast(str-t)nullptr, nullptr, 0);
  object-t current-exception =     dkt-capture-current-exception(cast(object-t)nullptr);

  if (nullptr != (getenv("DKT_DUMP_UNHANDLED_EXCEPTION")))
    if (nullptr != current-exception)
      $dump(current-exception);

  $print-format(std-error,
                "{ \"program-name\": \"%s\""
                ", \"process-id\": %i"
                ", \"root-msg\": \"%s\"",
                getprogname(),
                getpid(),
                "uncaught/unexpected exception");

  if (nullptr != current-exception)
    $print(current-exception, std-error);
    // $print-format(std-error, ", \"exception\": \"%s\"", name-of(klass-of(current-exception)));
  else-if (nullptr != current-exception-str)
    $print-format(std-error,
                  ", \"src-file\": \"%s\""
                  ", \"src-line\": %i"
                  ", \"exception-str\": \"%s\"",
                  src-file,
                  src-line,
                  current-exception-str);
  else
    $print(std-error, "");
  $println(std-error, " }");

  if (nullptr != original-terminate)
    original-terminate();
  std::abort(); // should never get called
}
[[noreturn]] func pre-runtime-verbose-unexpected() noexcept -> void {
//   dkt-log(dkt::k-log-info, "%s()", __func__);

  pre-runtime-verbose-terminate();
}
[[noreturn]] func verbose-unexpected() noexcept -> void {
//   dkt-log(dkt::k-log-info, "%s()", __func__);

  verbose-terminate();
}
klass exception {
  superklass object;

  slots {
    str-t src-file;
    int-t src-line;
    str-t msg;
  }
  method init(object-t self,
              str-t    src-file : nullptr,
              int-t    src-line : -1,
              str-t    msg : name-of(klass-of(self))) -> object-t {
    self = $init(super);
    self.src-file = src-file;
    self.src-line = src-line;
    self.msg = msg;
    return self;
  }
  method print(object-t self, object-t out) -> object-t {
    if (nullptr == out || null == out)
      out = std-error;
    if (self.src-file)
      $print-format(out,
                    ", \"src-file\": \"%s\""
                    ", \"src-line\": %i"
                    ", \"msg\": \"%s\"",
                    self.src-file,
                    self.src-line,
                    self.msg);
    else
      $print-format(out, ", \"msg\": \"%s\"", self.msg);
    return self;
  }
}
