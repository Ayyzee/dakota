// -*- mode: C++; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007, 2008, 2009 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

klass sequence;

klass statement
{
}

klass node
{
  superklass statement;

  slots
  {
    const char8-t* name;  // may NOT be nullptr
    object-t       attrs; // <table>
  }

  method object-t init(object-t self,
                       const char8-t* name =>  {},
                       object-t       attrs => null)
  {
    self = dk:init(super);
    return self;
  }
}

klass edge
{
  superklass statement;

  slots
  {
    const char8-t* lhs-name; // may NOT be nullptr
    const char8-t* rhs-name; // may NOT be nullptr
    object-t       attrs;    // <table>
  }

  method object-t init(object-t self,
                       const char8-t* lhs-name => {},
                       const char8-t* rhs-name => {},
                       object-t       attrs =>    null)
  {
    self = dk:init(super);
    return self;
  }
}

klass attrs
{
  slots object-t;

  method object-t init(object-t self, object-t attrs => {})
  {
    self = dk:init(super);
    *unbox(self) = attrs;
    return self;
  }
}

klass graph
{
  superklass statement;

  slots
  {
    symbol-t       type;  // $graph xor $digraph
    const char8-t* name;  // may be nullptr
    object-t       stmts; // <sequence>
  }

  method object-t init(object-t self,
                       symbol-t       type =>  $graph,
                       const char8-t* name =>  nullptr,
                       object-t       attrs => null)
  {
    self = dk:init(super);
    return self;
  }

  method object-t add-stmt(object-t self, object-t stmt)
  {
    dk:add-last(self.stmts, stmt);
    return self;
  }

  method object-t add-graph-attrs(object-t self, object-t attrs)
  {
    return self;
  }
  method object-t add-node-attrs(object-t self, object-t attrs)
  {
    return self;
  }
  method object-t add-edge-attrs(object-t self, object-t attrs)
  {
    return self;
  }
}
