// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include <cassert>;
include <cerrno>;
include <cstdio>;
include <cstring>;

module dakota;

klass input-stream
{
  slots
  {
    file-t         file;
    str-t filename;
  }

  method object-t init(object-t self,
                       file-t         file =>     nullptr,
                       str-t filename => nullptr)
  {
    self = dk::init(super);
    assert(!(nullptr != file &&
             nullptr != filename)); // these are mutually exclusive
    assert(stdout != file);
    assert(stderr != file);

    if (nullptr == file && nullptr == filename)
      self.file = stdin; // default

    if (nullptr != filename) {
      self.file = fopen(filename, "r");

      if (nullptr == self.file)
        throw make(system-exception::klass, $errnum => errno);
    }
    self.filename = filename;
    return self;
  }

  method uint32-t read(object-t self, void* buffer, uint32-t element-size, uint32-t num-elements-max)
  {
    uint32-t num-elements-read = cast(uint32-t)fread(buffer, cast(size-t)element-size, cast(size-t)num-elements-max, self.file);

    // fread() does not distinguish between end-of-file and error, and callers must use
    // feof(3) and ferror(3) to determine which occurred.

    return num-elements-read;
  }

  method object-t close(object-t self)
  {
    fclose(self.file);
    return self;
  }
}
