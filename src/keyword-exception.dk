// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>

module dakota;

klass output-stream;

klass keyword-exception {
  superklass exception;

  slots {
    object-t     object;
    signature-t* signature;
    symbol-t     keyword;
  }
  method object-t init(object-t self,
                       object-t     object :    {~},
                       signature-t* signature : {~},
                       symbol-t     keyword :   {~}) {
    assert(nullptr != object);
    assert(nullptr != signature);
    assert(nullptr != keyword);

    self = dk::init(super);

    self.object =    object;
    self.signature = signature;
    self.keyword =   keyword;
    return self;
  }
  method object-t dump(object-t self) {
    dk::dump(super);
    fprintf(stderr, "\"%s\": {", dk::utf8-from(self));
    fprintf(stderr, " \"object\": [ %p, \"%s\" ]",
            cast(void*)self.object,
            dk::utf8-from(self.object));
    fprintf(stderr, ", \"signature\": [ %p, \"%s(%s)\" ]",
            cast(void*)self.signature,
            self.signature->name,
            self.signature->parameter-types);
    fprintf(stderr, ", \"keyword\": [ %p, \"#%s\" ]",
            cast(void*)self.keyword,
            self.keyword);
    fprintf(stderr, " }\n");
    dk::dump(self.object);
    return self;
  }
  method object-t print(object-t self, object-t out, str-t msg) {
    dk::print(super, out);
    assert(nullptr != self.object);
    assert(nullptr != self.signature);
    assert(nullptr != self.keyword);

    if (dk::instance?(self.object, klass::klass)) {
      dk::print-format(out, ", \"instance\": \"%s\"", name-of(self.object));
    } else {
      dk::print-format(out, ", \"instance\": \"%s\"", dk::utf8-from(self.object));
    }
    dk::print-format(out, ", \"klass\": \"%s\", \"method\": \"%s(%s)\", \"%s\": \"%s\"",
                     name-of(klass-of(self.object)),
                     self.signature->name,
                     self.signature->parameter-types,
                     msg,
                     self.keyword);
    return self;
  }
}
