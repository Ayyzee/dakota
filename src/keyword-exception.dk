// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>

module dakota;

klass output-stream;

klass keyword-exception {
  superklass exception;

  slots {
    object-t     object;
    signature-t* signature;
    symbol-t     keyword;
  }

  method object-t init(object-t self,
                       object-t     object :    {~},
                       signature-t* signature : {~},
                       symbol-t     keyword :   {~})
  {
    assert(nullptr != object);
    assert(nullptr != signature);
    assert(nullptr != keyword);

    self = dk::init(super);

    self.object = object;
    self.signature = signature;
    self.keyword = keyword;
    return self;
  }

  method object-t dump(object-t self)
  {
    dk::dump(super);
    fprintf(stderr, "%p:%p {", cast(void*)(self), cast(void*)unbox(self));

    // object
    if (nullptr != self.object)
      fprintf(stderr, " object=%p", cast(void*)(self.object));
    else
      fprintf(stderr, " object=%s", #nullptr);

    // signature
    if (nullptr != self.signature)
      fprintf(stderr, ", signature=%p \"%s(%s)\"", cast(void*)(self.signature), self.signature->name, self.signature->parameter-types);
    else
      fprintf(stderr, ", signature=%s", #nullptr);

    // keyword
    if (nullptr != self.keyword)
      fprintf(stderr, ", keyword=%p #%s", cast(void*)(self.keyword), self.keyword);
    else
      fprintf(stderr, ", keyword=%s", #nullptr);

    fprintf(stderr, " }\n");

    if (nullptr != self.object)
      dk::dump(self.object);

    return self;
  }

  method object-t print(object-t self, object-t out, str-t msg)
  {
    dk::print(super, out);

    if (dk::instance?(self.object, klass::klass)) {
      symbol-t name;
      if (nullptr == (name = dk::name(self.object)))
        name = #nullptr;
      dk::print-format(out, ": %p <%s>", self.object, name);
    }
    else-if (nullptr != self.object)
      dk::print-format(out, ": %p", self.object);
    else
      dk::print-format(out, ": %s", nullptr);

    object-t object-klass = dkt-klass(self.object);
    dk::print-format(out, " of <%s> %s(%s): %s '%s'",
                    dk::name(object-klass),
                    self.signature->name,
                    self.signature->parameter-types,
                    msg,
                    self.keyword);
    return self;
  }
}
