// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>

module dakota;

klass output-stream;

klass no-such-method-exception {
  superklass exception;

  slots {
    object-t     object;
    object-t     kls;
    signature-t* signature;
  }
  method object-t init(object-t self,
                       object-t     object :    {~},
                       object-t     superkls :  nullptr,
                       signature-t* signature : nullptr) {
    self = $init(super);
    self.object = object;
    self.signature = signature;
    if (nullptr != superkls)
      self.kls = superkls;
    else
      self.kls = klass-of(self.object);
    return self;
  }
  method object-t print(object-t self, object-t out) {
    $print(super, out);

    if (nullptr == self.signature) {
      if ($instance?(self.object, klass::klass)) {
        $print-format(out, ", \"instance\": '%s', klass: '%s'",
                         name-of(self.object),
                         name-of(self.kls));
      } else {
        $print-format(out, ", \"instance\": %s, klass: '%s'",
                         $utf8-from(self.object),
                         name-of(self.kls));
      }
    } else {
      assert(self.kls == klass-of(self.object) ||
             self.kls == superklass-of(klass-of(self.object)));

      if (self.kls == superklass-of(self.kls)) {
        if ($instance?(self.object, klass::klass)) {
          $print-format(out, ", \"instance\": \"%s\", \"klass\": \"%s\", \"method\": \"%s(%s)\"",
                           name-of(self.object),
                           name-of(self.kls),
                           self.signature->name,
                           self.signature->parameter-types);
        } else {
          $print-format(out, ", \"instance\": %s, \"klass\": \"%s\", \"method\": \"%s(%s)\"",
                           $utf8-from(self.object),
                           name-of(self.kls),
                           self.signature->name,
                           self.signature->parameter-types);
        }
      } else {
        if ($instance?(self.object, klass::klass)) {
          $print-format(out, ", \"instance\": \"%s\", \"klass\": \"%s\", \"method\": \"%s(%s)\"",
                           name-of(self.object),
                           name-of(self.kls),
                           self.signature->name,
                           self.signature->parameter-types);
        } else {
          $print-format(out, ", \"instance\": %s, \"klass\": \"%s\". \"method\": \"%s(%s)\"",
                           $utf8-from(self.object),
                           name-of(self.kls),
                           self.signature->name,
                           self.signature->parameter-types);
        }
      }
    }
    return self;
  }
}
