// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include <cassert>;

module dakota;

klass output-stream;

klass no-such-method-exception
{
  superklass exception;

  slots
  {
    object-t     object;
    object-t     kls;
    signature-t* signature;
  }

  method object-t init(object-t self,
                       object-t     object =>    {},
                       object-t     superkls =>  nullptr,
                       object-t     kls =>       nullptr,
                       signature-t* signature => nullptr)
  {
    self = dk:init(super);
    assert(!(nullptr != superkls &&
             nullptr != kls));
    self.object = object;
    self.signature = signature;
    if (nullptr != superkls)
      self.kls = superkls;
    else-if (nullptr != kls)
      self.kls = kls;
    else
      self.kls = dkt-klass(object); // notenote: could be a trait method!!!
    return self;
  }

  method object-t print(object-t self, object-t out)
  {
    dk:print(super, out);
    object-t object-klass = dkt-klass(self.object);

    if (nullptr == self.signature) {
      if (dk:instance?(self.object, klass:klass)) {
        dk:print-format(out, ": klass \"%s\"",
                        dk:utf8-from(self.object));
      } else {
        dk:print-format(out, ": instance %s of klass \"%s\"",
                        dk:utf8-from(self.object),
                        dk:utf8-from(object-klass));
      }
    } else {
      assert(self.kls == object-klass ||
             self.kls == dk:superklass(object-klass));

      if (self.kls == dk:superklass(object-klass)) {
        if (dk:instance?(self.object, klass:klass)) {
          dk:print-format(out, ": klass \"%s\" %s(%s)",
                          dk:utf8-from(self.object),
                          self.signature->name,
                          self.signature->parameter-types);
        } else {
          dk:print-format(out, ": instance %s of klass \"%s\" %s(%s)",
                          dk:utf8-from(self.object),
                          dk:utf8-from(object-klass),
                          self.signature->name,
                          self.signature->parameter-types);
        }
      } else {
        if (dk:instance?(self.object, klass:klass)) {
          dk:print-format(out, ": klass \"%s\" %s(%s)",
                          dk:utf8-from(self.object),
                          self.signature->name,
                          self.signature->parameter-types);
        } else {
          dk:print-format(out, ": instance %s of klass \"%s\" %s(%s)",
                          dk:utf8-from(self.object),
                          dk:utf8-from(object-klass),
                          self.signature->name,
                          self.signature->parameter-types);
        }
      }
    }
    return self;
  }
}
