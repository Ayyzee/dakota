// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>

module dakota;

klass object-output-stream;

klass pair
{
  slots
  {
    object-t first;
    object-t last;
  }

  // other pairs:
  //   { object-t, symbol-t }, { object-t, symbol-t, uint32-t }

  //   klass symbol-object-pair { slots { symbol-t first; object-t last; } }
  //   klass symbol-symbol-pair { slots { symbol-t first; symbol-t last; } }
  //   klass symbol-uint32-pair { slots { symbol-t first; uint32-t last; } }
  //   klass object-uint32-pair { slots { object-t first; uint32-t last; } }
  
  method object-t init(object-t self,
                       object-t first : null,
                       object-t last :  null)
  {
    self = dk::init(super);
    self.first = first;
    self.last =  last;
    return self;
  }

  method object-t dump(object-t self)
  {
    dk::dump(super);
    dk::dump(self.first);
    dk::dump(self.last);
    return self;
  }

  method object-t write-slots(object-t self, object-t out)
  {
    dk::write-slots(super, out);
    dk::write-slots-start(out, klass);

    dk::write-element-idref(out, self.first, "first");
    dk::write-element-idref(out, self.last,  "last");

    dk::write-slots-end(out);
    return self;
  }

  method boole-t equal?(object-t self, object-t other)
  {
    boole-t result;
    object-t first = self;
    if (dk::instance?(first, klass))
      first = unbox(first)->first;
    assert(nullptr != first);
    object-t other-first = other;
    if (dk::instance?(other-first, klass))
      other-first = unbox(other-first)->first;
    assert(nullptr != other-first);
    result = dk::equal?(first, other-first);
    return result;
  }

  method int-t compare(object-t self, object-t other)
  {
    int-t result;
    object-t first = self;
    if (dk::instance?(first, klass))
      first = unbox(first)->first;
    assert(nullptr != first);
    object-t other-first = other;
    if (dk::instance?(other-first, klass))
      other-first = unbox(other-first)->first;
    assert(nullptr != other-first);
    result = dk::compare(first, other-first);
    return result;
  }

  method uintmax-t hash(object-t self)
  {
    uintmax-t result;
    object-t first = self;
    if (dk::instance?(first, klass))
      first = unbox(first)->first;
    assert(nullptr != first);
    result = dk::hash(first);
    return result;
  }

  method object-t first(slots-t* s)
  {
    object-t result = s->first;
    return result;
  }

  method object-t last(slots-t* s)
  {
    object-t result = s->last;
    return result;
  }
}
