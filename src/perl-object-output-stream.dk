// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include <cstring>;

module dakota-util;

klass features;
klass text-output-stream;

using features:k-none;
using features:k-indent;
using features:k-leading-newline;
using features:k-trailing-newline;
using features:k-leading-ws;
using features:k-trailing-ws;

klass perl-object-output-stream
{
  superklass text-output-stream;

  slots
  {
    uint32-t indent-level;

    str-t key-delim;
    str-t element-delim;

    str-t start-seq-delim;
    str-t end-seq-delim;

    str-t start-tbl-delim;
    str-t end-tbl-delim;
  }

  method object-t init(object-t self, file-t file => stdout)
  {
    self = dk:init(super, file => file);
    self.indent-level = 1; // set to zero for maximum compactness

    self.start-seq-delim = "[";
    self.end-seq-delim = "]";

    self.start-tbl-delim = "{";
    self.end-tbl-delim = "}";

    if (0 != self.indent-level) {
      self.key-delim = " => ";
      self.element-delim = ", ";

    } else {
      self.key-delim = "=>";
      self.element-delim = ",";
    }

    return self;
  }

  static features-t features(object-t self, int-t flags)
  {
    if (0 != self.indent-level)
      return cast(features-t)(flags);
    else
      return k-none;
  }

  method object-t write-element(object-t self, str-t element, str-t key)
  {
    char8-t[128] buffer;
    if (nullptr != key)
      snprintf(buffer, sizeof(buffer), "\"%s\"%s\"%s\"%s",  key, self.key-delim, element, self.element-delim);
    else
      snprintf(buffer, sizeof(buffer), "\"%s\"%s", element, self.element-delim);
    dk:write(self, buffer, features(self, k-indent | k-trailing-newline));
    return self;
  }

  method object-t write-element(object-t self, int32-t element, str-t key)
  {
    char8-t[128] buffer;
    if (nullptr != key)
      snprintf(buffer, sizeof(buffer), "\"%s\"%s%i%s",  key, self.key-delim, element, self.element-delim);
    else
      snprintf(buffer, sizeof(buffer), "%i%s", element, self.element-delim);
    dk:write(self, buffer, features(self, k-indent | k-trailing-newline));
    return self;
  }

  method object-t write-element(object-t self, uint32-t element, str-t key)
  {
    char8-t[128] buffer;
    if (nullptr != key)
      snprintf(buffer, sizeof(buffer), "\"%s\"%s%u%s",  key, self.key-delim, element, self.element-delim);
    else
      snprintf(buffer, sizeof(buffer), "%u%s", element, self.element-delim);
    dk:write(self, buffer, features(self, k-indent | k-trailing-newline));
    return self;
  }

  method object-t write-table-start(object-t self, str-t key)
  {
    char8-t[128] buffer;
    if (nullptr != key)
      snprintf(buffer, sizeof(buffer), "\"%s\"%s%s", key, self.key-delim, self.start-tbl-delim);
    else
      snprintf(buffer, sizeof(buffer), "%s", self.start-tbl-delim);
    dk:write(self, buffer, features(self, k-indent | k-trailing-newline));
    dk:column-incr(self);
    return self;
  }

  method object-t write-table-end(object-t self)
  {
    char8-t[128] buffer;
    snprintf(buffer, sizeof(buffer), "%s%s", self.end-tbl-delim, self.element-delim);
    dk:column-decr(self);
    dk:write(self, buffer, features(self, k-indent | k-trailing-newline));
    return self;
  }

  method object-t write-sequence-start(object-t self, str-t key)
  {
    char8-t[128] buffer;
    if (nullptr != key)
      snprintf(buffer, sizeof(buffer), "\"%s\"%s%s", key, self.key-delim, self.start-seq-delim);
    else
      snprintf(buffer, sizeof(buffer), "%s", self.start-seq-delim);
    dk:write(self, buffer, features(self, k-indent | k-trailing-newline));
    dk:column-incr(self);
    return self;
  }

  method object-t write-sequence-end(object-t self)
  {
    char8-t[128] buffer;
    snprintf(buffer, sizeof(buffer), "%s%s", self.end-seq-delim, self.element-delim);
    dk:column-decr(self);
    dk:write(self, buffer, features(self, k-indent | k-trailing-newline));
    return self;
  }
}
