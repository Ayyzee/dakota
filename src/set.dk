// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota;

klass collection; // add()
trait forward-iterator;
klass klass;

trait set
{
  method boole-t contains-all?(object-t self, object-t collection)
  {
    USE(self);
    USE(collection);
    throw make(exception::klass, #message : "not yet implemented");
    return false;
  }

  method boole-t contains-any?(object-t self, object-t collection)
  {
    USE(self);
    USE(collection);
    throw make(exception::klass, #message : "not yet implemented");
    return false;
  }

  // complement (if collection is set)
  method object-t remove-all(object-t self, object-t collection)
  {
    USE(self);
    USE(collection);
    throw make(exception::klass, #message : "not yet implemented");
    return null;
  }

  // intersection (if collection is set)
  method object-t retain-all(object-t self, object-t collection)
  {
    USE(self);
    USE(collection);
    throw make(exception::klass, #message : "not yet implemented");
    return null;
  }

  method object-t write-lite(object-t self, object-t out)
  {
    dk::write(out, "{");
    str-t delim = "";

    for (object-t element in self) {
      dk::write(out, delim);
      dk::write-lite(element, out); // must be primitive type
      delim = ",";
    }

    dk::write(out, "}");
    return self;
  }

  method object-t forward-iterator(object-t); // hackhack
}
