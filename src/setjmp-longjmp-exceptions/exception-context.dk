include <stdio.h>;
include <unistd.h>;
include <assert.h>;

klass output-stream;

export klass exception-context
{
  export slots
  {
    exception-handler:slots-t handler;
    object-t  exception;
    slots-t*  next;
    xjmp-buf:slots-t state;
  }
  slots-t* current = nullptr;

  noexport noreturn void default-handler(object-t exception)
  {
    current->exception = exception;
    longjmp(current->state, 1);
  }

  method slots-t* unhandled(slots-t* s, object-t exception)
  {
    s->exception = exception;
    longjmp(s->state, 1);
  }

  method boole-t handle(slots-t* s, object-t exception)
  {
    boole-t handled = s->handler(exception);
    if (!handled)
      unhandled(s, exception);
    return handled;
  }

  method slots-t* add(slots-t* s, slots-t* o)
  {
    assert(s == current);
    assert(s != o);
    o->next = s;
    current = s = o;
    return s;
  }
  method slots-t* remove(slots-t* s, slots-t* o)
  {
    assert(s == current);
    assert(s == o);
    current = s = s->next;
    return s;
  }
}

noreturn boole-t default-top-level-exception-handler(object-t exception)
{
  if (nullptr != (getenv("DK_DUMP_UNHANDLED_EXCEPTION")))
    dk:dump(exception);

  const char8-t* progname = getprogname();
  pid-t pid = getpid();
  dk:print-format(std-error, "%s[%i]: uncaught exception",
		  progname, pid);
  dk:println(exception, std-error);

  abort();
}

boole-t (*top-level-exception-handler)(object-t exception) = default-top-level-exception-handler;

boole-t handle(object-t exception)
{
  boole-t result = false;
  if (nullptr != exception-context:current)
    result = exception-context:handle(exception-context:current, make(exception:klass));
  else
    result = top-level-exception-handler(exception);
  return result;
}

void exception-context-add(exception-context-t* ec, exception-handler-t handler)
{
  ec->handler =   handler;
  ec->exception = nullptr;
  ec->next =      nullptr;
  exception-context:add(exception-context:current, ec);
  return;
}

void exception-context-remove(exception-context-t* ec)
{
  exception-context:remove(exception-context:current, ec);
  return;
}
