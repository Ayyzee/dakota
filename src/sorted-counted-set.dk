// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota;

klass std-compare;
klass equal-predicate;

klass sorted-counted-set
{
  superklass sorted-set;
  trait      counted-set;

  method object-t init(object-t self,
                       equal-predicate-t equal? =>  cast(equal-predicate-t)dk:method-for-selector(assoc:klass, selector(equal?(object-t, object-t))),
                       compare-t         compare => cast(compare-t        )dk:method-for-selector(assoc:klass, selector(compare(object-t, object-t))))
  {
    self = dk:init(super, equal? => equal?, compare => compare);
    return self;
  }
}
