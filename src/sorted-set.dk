// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cassert>
# include <cstdlib>
# include <cstring>

# include "sorted-ptr-array.hh"

module dakota;

# if DKT-WORKAROUND
namespace sorted-ptr-array {
  result-t search(slots-t*, void const*);
}
# endif

klass exception;
klass equal-predicate;
klass object-output-stream;
klass result;
klass sorted-ptr-array;
klass std-compare;

klass sorted-set {
  superklass collection;

  trait set;

  slots {
    sorted-ptr-array::slots-t sa;
    uint32-t                  iterator-state;
  }
  static const uint32-t gbl-default-capacity = 64; // shall never be 0

  initialize(object-t kls) -> object-t {
    return kls;
  }
  finalize(object-t kls) -> object-t {
    return kls;
  }
  // 'elements' is a collection (of objects)
  // 'items' is a nullptr terminated array (of objects)
  // using compound literals 'items' can be used as follows:
  // $init(o, #items : cast(object-t[]){ o1, o2, nullptr });

  static int-t swap-compare(object-t first, object-t second) {
    int-t result = $compare(second, first);
    result *= -1;
    return result;
  }
  method init(object-t self,
                       uint32-t          initial-capacity : gbl-default-capacity,
                       object-t          elements :         nullptr,
                       object-t*         items :            nullptr) -> object-t {
    assert(0 != initial-capacity);

    self = $init(super);
    self.sa.compare = cast(std-compare-t)cast(compare-t)swap-compare;
    self.sa.size =    cast(uint32-t)sizeof(self.sa.elements[0]);
    self.sa.capacity = gbl-default-capacity;
    self.sa.elements = cast(ptr-t*)dkt::alloc(self.sa.size * self.sa.capacity);
    self.sa.count = 0;

    self.iterator-state = 0;

    if (nullptr != elements)
      $add-all(self, elements);

    if (nullptr != items)
      $add-items(self, items);
    return self;
  }
  method dealloc(object-t self) -> object-t {
    dkt::dealloc(self.sa.elements);
    object-t result = $dealloc(super);
    return result;
  }
  method add(object-t self, object-t element) -> object-t {
    self.iterator-state++;

    result-t result = sorted-ptr-array::search(&self.sa, element);

//     if (should-throw && nullptr != result.element)
//       throw make(exception::klass, #message : "oops");

  //if (nullptr == result.element)
    {
      if (self.sa.count == self.sa.capacity) {
        self.sa.capacity *= 2; // the growth algorithm should be consumer setable
        self.sa.elements = cast(ptr-t*)dkt::alloc(self.sa.size * self.sa.capacity, self.sa.elements);
      }
      sorted-ptr-array::add-at(&self.sa, element, result.offset);
    }
    return element;
  }
  method empty(object-t self) -> object-t {
    self.iterator-state++;
    self.sa.count = 0; // hackhack
    return self;
  }
  method in(object-t self, object-t object1, object-t default-value) -> object-t {
    object-t object2 = default-value;
    result-t result = sorted-ptr-array::search(&self.sa, object1);

    if (nullptr != result.element)
      object2 = cast(object-t)sorted-ptr-array::at(&self.sa, result.offset);
    return object2;
  }
  method in(object-t self, object-t object1) -> object-t {
    object-t result = $in(self, object1, cast(object-t)nullptr);
    if (nullptr == result)
      throw make(exception::klass, #message : "oops");
    return result;
  }
  method in?(object-t self, object-t key) -> boole-t {
    boole-t state;

    if (nullptr == $in(self, key, cast(object-t)nullptr))
      state = false;
    else
      state = true;
    return state;
  }
  method empty?(object-t self) -> boole-t {
    boole-t state;

    if (0 == self.sa.count)
      state = true;
    else
      state = false;
    return state;
  }
  method remove(object-t self, object-t element) -> object-t {
    result-t result = sorted-ptr-array::search(&self.sa, element);
    object-t object = null;

    if (nullptr != result.element) {
      self.iterator-state++;
      // element not required
      object = cast(object-t)sorted-ptr-array::remove-at(&self.sa, element, result.offset);
    }
    return object;
  }
  method remove-last(object-t self) -> object-t {
    object-t object = nullptr;
    if (0 != self.sa.count) {
      self.iterator-state++;
      object = cast(object-t)sorted-ptr-array::remove-last(&self.sa);
    }
    return object; // returns nullptr on error
  }
  method copy-shallow(object-t self) -> object-t {
    object-t kls = klass-of(self);
    object-t copy = make(kls);
    slots-t* s1 = unbox(self);
    slots-t* s2 = unbox(copy);
    *s2 = *s1;
    s2->sa.elements = cast(ptr-t*)dkt::alloc(s2->sa.size * s2->sa.capacity);
    memcpy(s2->sa.elements, s1->sa.elements, s2->sa.size * s2->sa.capacity);
    s2->iterator-state = 0;
    return copy;
  }
  method size(object-t self) -> uint32-t {
    return self.sa.count;
  }
  method forward-iterator(object-t self) -> object-t {
    object-t forward-iterator = make(sorted-set-forward-iterator::klass, #sorted-set : self);
    return forward-iterator;
  }
  method dump(object-t self) -> object-t {
    $dump(super);
    fprintf(stderr, "%p:%p { count=%u, capacity=%u, elements=[] }\n",
            cast(ptr-t)(self), cast(ptr-t)unbox(self), self.sa.count, self.sa.capacity);
    for (object-t element in self)
      $dump(element);
    return self;
  }
  method write-slots(object-t self, object-t out) -> object-t {
    $write-slots(super, out);
    $write-slots-start(out, klass);

    $write-sequence-start(out, "elements");

    for (object-t element in self)
      $write-element-idref(out, element, cast(str-t)nullptr);
    $write-sequence-end(out);

    $write-slots-end(out);
    return self;
  }
}
klass sorted-set-forward-iterator {
  trait forward-iterator;

  slots {
    object-t sorted-set;
    uint32-t offset;

    uint32-t  iterator-state;
  }
  method init(object-t self, object-t sorted-set :) -> object-t {
    self = $init(super);
    assert($instance?(sorted-set, sorted-set::klass));
    sorted-set::slots-t* ss = sorted-set::unbox(sorted-set);
    self.sorted-set = sorted-set;
    self.offset = 0;
    self.iterator-state = ss->iterator-state;
    return self;
  }
  static void check-iterator-state(object-t self) {
    sorted-set::slots-t* ss = sorted-set::unbox(self.sorted-set);

    if (self.iterator-state != ss->iterator-state) {
      fprintf(stderr, "%i == %i\n", self.iterator-state, ss->iterator-state);
      throw make(exception::klass, #message : "oops");
    }
    return;
  }
  method next?(object-t self) -> boole-t {
    check-iterator-state(self);
    sorted-set::slots-t* ss = sorted-set::unbox(self.sorted-set);
    boole-t result;
    if (self.offset < ss->sa.count)
      result = true;
    else
      result = false;
    return result;
  }
  method next(object-t self) -> object-t {
    check-iterator-state(self);
    object-t element = nullptr;
    if ($next?(self)) {
      element = $element(self);
      self.offset++;
    }
    return element;
  }
  method element(object-t self) -> object-t {
    check-iterator-state(self);
    object-t element = nullptr;
    if ($next?(self)) {
      sorted-set::slots-t* ss = sorted-set::unbox(self.sorted-set);
      element = cast(object-t)sorted-ptr-array::at(&ss->sa, self.offset);
      assert(nullptr != element);
    }
    return element; // returns nullptr on error
  }
}
