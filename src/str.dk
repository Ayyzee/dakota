// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "dakota-private.hh"

module dakota;

klass str
{
  slots char8-t const*;

  method int-t compare(object-t self, object-t other)
  {
    //printf("%s('%s', '%s')\n", __method__, dkt-name(dkt-klass(self)), dkt-name(dkt-klass(other)));
    int-t result;

    if (dk::instance?(other, klass)) {
      // what if both utf8s are nullptr?
      // what if only one utf8 is nullptr?
      slots-t s1 = *unbox(self);
      slots-t s2 = *unbox(other);
      result = safe-strcmp(s1, s2);
    } else {
      result = dk::compare(super, other);
    }
    result = dkt-normalize-compare-result(result);
    return result;
  }
}
