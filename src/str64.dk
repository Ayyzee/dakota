// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota;

# include <cinttypes>
# include <cstring>

# include "dakota-safe-str.hh"
# include "dakota-private.hh"

klass object-output-stream;

klass str64 {
  slots char8-t[64];

  method dump(slots-t* s) -> slots-t*{
  //$dump(super);
    fprintf(stderr, "%p:%p { \"%s\" }\n", cast(ptr-t)nullptr, cast(ptr-t)(s), *s);
    return s;
  }
  method write-slots(object-t self, object-t out) -> object-t {
    $write-slots(super, out);
    $write-slots-start(out, klass);

    $write-element(out, unbox(self), "contents");

    $write-slots-end(out);
    return self;
  }
  method compare(slots-t* s, slots-t* other-s) -> int-t {
    int-t result = cast(int-t)safe-strncmp(cast(str-t)(s), cast(str-t)(other-s), sizeof(slots-t));
    result = dkt-normalize-compare-result(result);
    return result;
  }
  method compare(object-t self, object-t other) -> int-t {
    int-t result;

    if ($instance?(other, klass)) {
      slots-t& s1 = unbox(self);
      slots-t& s2 = unbox(other);
      result = compare(&s1, &s2);
    } else {
      result = $compare(super, other);
    }
    result = dkt-normalize-compare-result(result);
    return result;
  }
}
