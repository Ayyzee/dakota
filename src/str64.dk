// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include <cstring>;

include "dakota-private.h";

include <cinttypes>;

module dakota;

klass object-output-stream;

klass str64
{
  slots char8-t[64];

  method slots-t* dump(slots-t* s)
  {
  //dk:dump(super);
    fprintf(stderr, "%p:%p { \"%s\" }\n", cast(void*)nullptr, cast(void*)(s), *s);
    return s;
  }

  method object-t write-slots(object-t self, object-t out)
  {
    dk:write-slots(super, out);
    dk:write-slots-start(out, klass);

    dk:write-element(out, *unbox(self), "contents");

    dk:write-slots-end(out);
    return self;
  }

  method int-t compare(slots-t* s, slots-t* other-s)
  {
    int-t result = cast(int-t)safe-strncmp(cast(const char8-t*)(s), cast(const char8-t*)(other-s), sizeof(slots-t));
    result = dkt-normalize-compare-result(result);
    return result;
  }

  method int-t compare(object-t self, object-t other)
  {
    int-t result;

    if (dk:instance?(other, klass)) {
      slots-t* s1 = unbox(self);
      slots-t* s2 = unbox(other);
      result = compare(s1, s2);
    } else {
      result = dk:compare(super, other);
    }
    result = dkt-normalize-compare-result(result);
    return result;
  }
}
