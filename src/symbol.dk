// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota-core;

# include <cstring>

# include "dakota-safe-str.kt"
# include "dakota-private.kt"

klass hash;

klass symbol-compare {
  slots (*)(symbol-t*, symbol-t*) -> int-t;
}
klass symbol {
  slots str-t;

  method init(object-t self, slots-t slots : nullptr) -> object-t {
    self = $init(super);
    unbox(self) = slots;
    return self;
  }
  method length(slots-t s) -> ssize-t {
    ssize-t result = cast(ssize-t)safe-strlen(s);
    return result;
  }
  method compare(slots-t s, slots-t other-s) -> int-t {
    int-t result;
    if (s == other-s)
      result = 0;
    else
      result = cast(int-t)safe-strcmp(s, other-s);
    result = dkt-normalize-compare-result(result);
    //fprintf(stderr, "%s(\"%s\" (%p), \"%s\" (%p)) = %i\n", __func__, s, s, other-s, other-s, result);
    return result;
  }
  method compare(slots-t* s, slots-t* other-s) -> int-t {
    int-t result = compare(*s, *other-s);
    return result;
  }
  method compare(object-t self, object-t other) -> int-t {
    int-t result;

    if ($instance?(other, klass)) {
      slots-t& s1 = unbox(self);
      slots-t& s2 = unbox(other);
      result = compare(s1, s2);
    } else {
      result = $compare(super, other);
    }
    result = dkt-normalize-compare-result(result);
    return result;
  }
  method dump(object-t self) -> object-t {
    $dump(super);
    fprintf(stderr, "%p:%p { \"%s\" }\n",
            cast(ptr-t)(self), cast(ptr-t)unbox(self), $str(self));
    return self;
  }
  method hash(slots-t s) -> hash-t {
    hash-t result = dk-hash(s);
    return result;
  }
  method str(object-t self) -> str-t {
    str-t str = unbox(self);
    return str;
  }
  method write-lite(object-t self, object-t out) -> object-t {
    str-t str = $str(self);
    $write(out, "\"");
    $write(out, str);
    $write(out, "\"");
    return self;
  }
}
