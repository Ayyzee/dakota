// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cassert>
#include <cstring>

module dakota-util;

klass output-stream;
klass token;

klass syntax-exception {
  superklass exception;

  slots {
    object-t token;
    str-t    filename;
    str-t    message;
  }
  method object-t init(object-t self,
                       object-t token :    {~},
                       str-t    filename : {~},
                       str-t    message :  __klass__) {
    self = dk::init(super);
    assert(nullptr != token &&
           null != token);
    self.token = token;
    self.filename = filename;
    self.message = message;
    return self;
  }
  method object-t print-shallow(object-t self, object-t out) {
    assert(nullptr != out);
    if (null == out)
      out = std-error;
    dk::print-format(out, "%s:%i:%i: '%s' \"%s\"\n",
                    self.filename, dk::line(self.token), dk::column(self.token), dk::buffer(self.token), self.message);
    return self;
  }
  method object-t print(object-t self, object-t out) {
    assert(nullptr != out);
    if (null == out)
      out = std-error;
    dk::print(super, out);
    dk::print-shallow(self, out);
    return self;
  }
}
