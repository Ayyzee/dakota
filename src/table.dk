// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota;

klass pair;
klass vector;

trait table {
  //provides set;
  require collection;

  method object-t keys(object-t self) {
    object-t set-kls = superklass-of(klass-of(self));
    object-t result = make(set-kls);
    for (pair-t* pair in self) {
      object-t first = pair->first;
      dk::add(result, first);
    }
    return result;
  }
  method object-t elements(object-t self) {
    object-t result = make(vector::klass, #size : dk::size(self));
    for (pair-t* pair in self) {
      object-t last = pair->last;
      dk::add-last(result, last);
    }
    return result;
  }
  method object-t write-lite(object-t self, object-t out) {
    dk::write(out, "{");
    str-t delim = "";

    for (pair-t* pair in self) {
      object-t first = pair->first;
      object-t last =  pair->last;
      dk::write(out, delim);
      dk::write-lite(first, out); // must be primitive type
      dk::write(out, ":");
      if (nullptr == last || null == last)
        dk::write(out, "null");
      else
        dk::write-lite(last, out);
      delim = ",";
    }
    dk::write(out, "}");
    return self;
  }
  method object-t add(object-t self, object-t first, object-t last) {
    object-t pair = pair::box({first, last});
    dk::add(self, pair);
    return pair;
  }
  static object-t at(object-t self, object-t first) {
    object-t last = dk::pair-at(self, first);
    if (dk::instance?(last, pair::klass))
      last = pair::unbox(last)->last;
    return last;
  }
  static object-t at(object-t self, object-t first, object-t default-last) {
    object-t last = dk::pair-at(self, first, cast(object-t)nullptr);
    if (nullptr == last)
      last = default-last;
    if (nullptr != last && dk::instance?(last, pair::klass))
      last = pair::unbox(last)->last;
    return last;
  }
  object-t initialize(object-t kls) {
    dk::reassoc-and-add-method-for-selector(kls,
                                            selector(               pair-at(object-t, object-t)),
                                            selector(                    at(object-t, object-t)),
                                            cast(method-t)cast(object-t (*)(object-t, object-t))at);

    dk::reassoc-and-add-method-for-selector(kls,
                                            selector(               pair-at(object-t, object-t, object-t)),
                                            selector(                    at(object-t, object-t, object-t)),
                                            cast(method-t)cast(object-t (*)(object-t, object-t, object-t))at);
    return kls;
  }
  object-t finalize(object-t kls) {
    return kls;
  }
  method object-t pair-at(object-t self, object-t first);
  method object-t pair-at(object-t self, object-t first, object-t default-pair);
}
