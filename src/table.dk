// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota;

trait forward-iterator;

trait table
{
  //provides dk:set;
  require collection;

  method alias(at) object-t in(object-t self, object-t key);
  method object-t at(object-t self, object-t key)
  {
    return dk:at(self, key, nullptr);
  }

  method object-t at(object-t self, object-t key, object-t default-result)
  {
    object-t result = default-result;
    object-t assoc = dk:assoc-at(self, key, nullptr);

    if (nullptr != assoc) {
      assoc-t* assoc-content = assoc:unbox(assoc);
      result = assoc-content->element;
    }
    return result;
  }

  method object-t add(object-t self, object-t key, object-t element)
  {
    object-t assoc = assoc:box({key, element});
    dk:add(self, assoc);
    return element;
  }

  method object-t keys(object-t self)
  {
    object-t set-kls = dk:superklass(dk:klass(self));
    object-t result = make(set-kls);
    for (assoc-t* assoc in self)
      dk:add(result, assoc->key);
    return result;
  }

  method object-t elements(object-t self)
  {
    object-t result = make(vector:klass, size => dk:size(self));
    for (assoc-t* assoc in self)
      dk:add-last(result, assoc->element);
    return result;
  }

  object-t initialize(object-t kls)
  {
    typedef object-t (*)(object-t, object-t, object-t) at-t;
    dk:add-method-for-selector(kls,
                               selector(assoc-at(object-t, object-t, object-t)),
                               dk:method-for-selector(kls, selector(at(object-t, object-t, object-t))));
    dk:add-method-for-selector(kls,
                               selector(at(object-t, object-t, object-t)),
                               cast(method-t)cast(at-t)(at));
    return kls;
  }

  object-t finalize(object-t kls)
  {
    return kls;
  }

  method object-t write-lite(object-t self, object-t out)
  {
    dk:write(out, "{");
    str-t delim = "";

    for (assoc-t* assoc in self) {
      dk:write(out, delim);
      dk:write-lite(assoc->key, out); // must be primitive type
      dk:write(out, "=>");
      if (nullptr == assoc->element || null == assoc->element)
        dk:write(out, "undef");
      else
        dk:write-lite(assoc->element, out);
      delim = ",";
    }

    dk:write(out, "}");
    return self;
  }

  method /*alias(at)*/ object-t assoc-at(object-t self, object-t key, object-t default-assoc);
}
