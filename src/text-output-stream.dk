// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include <cassert>;

module dakota-util;

klass features
{
  slots enum : uint32-t
  {
    k-none =             0,
    k-indent =           1 << 0,
    k-leading-newline =  1 << 1,
    k-trailing-newline = 1 << 2,
    k-leading-ws =       1 << 3,
    k-trailing-ws =      1 << 4
  }
}

using features:k-none;
using features:k-indent;
using features:k-leading-newline;
using features:k-trailing-newline;
using features:k-leading-ws;
using features:k-trailing-ws;

klass text-output-stream
{
  superklass object-output-stream;
  klass      klass;

  slots
  {
    uint32-t column;
    features-t previous-features;
  }

  method object-t init(object-t self, file-t file => stdout)
  {
    self = dk:init(super, file => file);
    self.column = 0;
    self.previous-features = k-trailing-newline;
    return self;
  }

  method object-t column-incr(object-t self)
  {
    self.column++;
    return self;
  }

  method object-t column-decr(object-t self)
  {
    if (0 != self.column)
      self.column--;
    return self;
  }

  method object-t write(object-t self, char8-t const* string, features-t features)
  {
    assert(!((features & k-indent) &&
             (features & k-leading-ws)));

    if (0 != (features & k-indent))
      for (uint32-t i = 0; i < self.column; i++)
        dk:write(self, "  "); // two spaces per column :-) [my way]

    if (0 != (features & k-leading-ws))
      if (0 == (self.previous-features & k-trailing-newline))
        dk:write(self, " ");

    if (0 != (features & k-leading-newline))
      if (0 == (self.previous-features & k-trailing-newline))
        dk:write(self, "\n");

    dk:write(self, string);

    if (0 != (features & k-trailing-ws))
      dk:write(self, " ");

    if (0 != (features & k-trailing-newline))
      dk:write(self, "\n");

    self.previous-features = features;
    return self;
  }
}
