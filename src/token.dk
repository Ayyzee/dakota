// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

# include <cassert>
# include <cstring>

# include "dakota-safe-str.hh"
# include "dakota-private.hh"

module dakota-util;

klass hash;
klass object-output-stream;
klass output-stream;
klass str512;
klass string;
klass tokenid;

klass token {
  slots {
    tokenid-t tokenid;
    int64-t line;
    int64-t column;
    str512-t buffer;
    // could include file
    object-t leading-ws;
  }
  method write-lite(object-t self, object-t out) -> object-t {
    $write(out, "\"");
    $write(out, self.buffer);
    $write(out, "\"");
    return self;
  }
  method write-slots(object-t self, object-t out) -> object-t {
    $write-slots(super, out);
    $write-slots-start(out, klass);

    $write-element(out, self.line,   "line");
    $write-element(out, self.column, "column");
    $write-element(out, self.buffer, "buffer");

    $write-slots-end(out);
    return self;
  }
  method init(object-t self,
                       int64-t        line :    0,
                       int64-t        column :  0,
                       tokenid-t      tokenid : 0,
                       str-t buffer :  nullptr) -> object-t {
    self = $init(super);
# if 0
    if (0 != tokenid) {
      char8-t[4 + (1)] tokenid-str = "";
      tokenid::utf8-from(tokenid, tokenid-str, sizeof(tokenid-str));

      printf("{ 'line':'%i', 'column':'%i', 'tokenid':'%s', 'buffer':'%s' },\n",
             line, column, tokenid-str, buffer);
    }
# endif
    self.line =    line;
    self.column =  column;
    self.tokenid = tokenid;
    if (nullptr == buffer)
      self.buffer[0] = NUL;
    else
      strcpy(self.buffer, buffer);
    self.leading-ws = nullptr;
    return self;
  }
  method hash(object-t self) -> hash-t {
    hash-t result = dk-hash(self.buffer);
    return result;
  }
  method equal?(object-t self, object-t other) -> boole-t {
    boole-t state;

    if ($instance?(other, klass)) {
      if (0 == $compare(self, other))
        state = true;
      else
        state = false;
    } else {
      state = false;
    }
    return state;
  }
  method empty?(object-t self) -> boole-t {
    boole-t result = false;
    if (NUL == self.buffer[0])
      result = true;
    return result;
  }
  method empty(object-t self) -> object-t {
    self.line =      0;
    self.column =    0;
    self.tokenid =   0;
    self.buffer[0] = NUL;
    return self;
  }
  method tokenid?(object-t self, tokenid-t tokenid) -> boole-t {
    boole-t result;
    if (self.tokenid == tokenid)
      result = true;
    else
      result = false;
    return result;
  }
  method set-tokenid(object-t self, tokenid-t tokenid) -> object-t {
    self.tokenid = tokenid;
    return self;
  }
  method tokenid(object-t self) -> tokenid-t {
    tokenid-t result = self.tokenid;
    return result;
  }
  method set-leading-ws(object-t self, object-t leading-ws) -> object-t {
    assert(nullptr == self.leading-ws);
    self.leading-ws = leading-ws;
    return self;
  }
  method leading-ws?(object-t self) -> boole-t {
    boole-t result;
    if (nullptr == self.leading-ws)
      result = false;
    else
      result = true;
    return result;
  }
  method leading-ws(object-t self) -> object-t {
    return self.leading-ws;
  }
  method line(object-t self) -> int64-t {
    return self.line;
  }
  method column(object-t self) -> int64-t {
    return self.column;
  }
  method buffer(object-t self) -> str-t {
    return cast(str-t)(self.buffer);
  }
  method first-char8(object-t self) -> char8-t {
    const char8-t result = self.buffer[0];
    return result;
  }
  // this should be merged with buffer - this is a hackhack
  method utf8-from(object-t self) -> str-t {
    str-t buffer = $buffer(self);
    return buffer;
  }
  method dump-shallow(object-t self) -> object-t {
# if 0
    if (0 != self.tokenid)
      fprintf(stderr, "%s\n", self.buffer);
    return self;
# else
//     fprintf(stderr, "%p:%p { line=%i, buffer=\"",
//             cast(ptr-t)(self), cast(ptr-t)unbox(self), self.line);

    for (int64-t i = 0; NUL != self.buffer[i]; i++) {
      switch (self.buffer[i]) {
        case '\n':
          fprintf(stderr, "\\n");
          break;
        case '\t':
          fprintf(stderr, "\\t");
          break;
        default:
          fprintf(stderr, "%c", self.buffer[i]);
      }
    }
//     fprintf(stderr, "\" }");
    fprintf(stderr, "\n");
    return self;
# endif
  }
  method dump(object-t self) -> object-t {
    $dump(super);
    fprintf(stderr, "%p:%p { buffer=\"%s\" }\n",
            cast(ptr-t)(self), cast(ptr-t)&unbox(self), self.buffer);
    return self;
  }
  method print(object-t self, object-t out) -> object-t {
    if (null == out)
      out = std-output;
    $print(out, $utf8-from(self));
    return self;
  }
  // should be in superklass string??
  method append(object-t self, int64-t c) -> object-t {
    int64-t len = cast(int64-t)safe-strlen(self.buffer);
    self.buffer[len] =     cast(char8-t)(c);
    self.buffer[len + 1] = NUL;
    return self;
  }
  method compare(object-t self, object-t other) -> int-t {
    int-t result;
    if ($instance?(other, klass)) {
      result = safe-strcmp(self.buffer, unbox(other).buffer);
      result = dkt-normalize-compare-result(result);
    } else {
      result = $compare(super, other);
    }
    return result;
  }
}
