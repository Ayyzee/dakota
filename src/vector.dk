// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

// Copyright (C) 2007 - 2015 Robert Nielsen <robert@dakota.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module dakota;

# include <cassert>
# include <cinttypes>
# include <cstdlib>
# include <cstring>

klass exception;
klass int64;
klass object-output-stream;
klass ssize;

klass vector-klass {
  superklass klass;

  slots {
    ssize-t  resize-factor;
    object-t fill-element;
    ssize-t  initial-capacity;
  }
  method va::init(object-t self, va-list-t args) -> object-t {
    self = $va::init(super, args);
    self.resize-factor = 2;
    self.fill-element = null;
    self.initial-capacity = 64;
    return self;
  }
  method set-resize-factor(object-t self, ssize-t resize-factor) -> object-t {
    self.resize-factor = resize-factor;
    return self;
  }
  method set-fill-element(object-t self, object-t fill-element) -> object-t {
    self.fill-element = fill-element;
    return self;
  }
  method set-initial-capacity(object-t self, ssize-t initial-capacity) -> object-t {
    self.initial-capacity = initial-capacity;
    return self;
  }
  method resize-factor(object-t self) -> ssize-t {
    return self.resize-factor;
  }
  method fill-element(object-t self) -> object-t {
    return self.fill-element;
  }
  method initial-capacity(object-t self) -> ssize-t {
    return self.initial-capacity;
  }
}
klass vector {
  superklass sequence;
  klass      vector-klass;
  trait      stack;

  slots {
    object-t* elements;
    ssize-t   count;
    ssize-t   capacity;
    ssize-t   size; // sizeof(elements[0])

    object-t  fill-element;
    int64-t   iterator-state;
  }
  initialize(object-t kls) -> void {
    $set-resize-factor(kls, 2);
    $set-fill-element(kls, null);
    $set-initial-capacity(kls, 64);
    return;
  }

  // 'elements' is a collection (of objects)
  // 'objects' is a nullptr terminated array (of objects)
  // using compound literals 'objects' can be used as follows:
  // $init(o, #objects : cast(object-t[]){ o1, o2, nullptr });

  method init(object-t   self,
              ssize-t    initial-capacity : $initial-capacity(klass-of(self)),
              object-t   fill-element :     $fill-element(klass-of(self)),
              object-t   elements :         nullptr,
              object-t[] objects :          nullptr) -> object-t {
    // it IS legal to have the 'fill' value be nullptr
    // it is required for the hashed-set implementation
    assert(0 != initial-capacity);

    self = $init(super);

    self.fill-element = fill-element;
    self.count = 0;
    self.iterator-state = 0;
    self.capacity = initial-capacity;
    self.size = ssizeof(self.elements[0]);
    self.elements = cast(object-t*)dkt::alloc(self.size * self.capacity); // want to be able to realloc()

    for (ssize-t index = 0; index < self.capacity; index++)
      self.elements[index] = self.fill-element;

    if (nullptr != elements)
      $add-all(self, elements);

    if (nullptr != objects)
      $add-objects(self, objects);
    return self;
  }
  method dealloc(object-t self) -> object-t {
    dkt::dealloc(self.elements);
    object-t result = $dealloc(super);
    return result;
  }
  method dump(object-t self) -> object-t {
    $dump(super);
    fprintf(stderr, "%p:%p { count=%zi, capacity=%zi, elements=[] }\n",
            cast(ptr-t)(self), cast(ptr-t)&unbox(self), self.count, self.capacity);
    for (object-t element in self)
      $dump(element);
    return self;
  }
  method copy-shallow(object-t self) -> object-t {
    object-t kls = klass-of(self);
    object-t copy = make(kls, #capacity : self.capacity);
    slots-t& s1 = unbox(self);
    slots-t& s2 = unbox(copy);
    s2 = s1;
    memcpy(s2.elements, s1.elements, cast(size-t)(s2.size * s2.capacity));
    s2.iterator-state = 0;
    return copy;
  }
  method empty?(object-t self) -> boole-t {
    boole-t state;

    if (0 == self.count)
      state = true;
    else
      state = false;
    return state;
  }
  method empty(object-t self) -> object-t {
    self.count = 0;

    for (object-t forward-iterator = $forward-iterator(self);
         $next?(forward-iterator);
         $next(forward-iterator)) {
      $set-element(forward-iterator, self.fill-element);
    }
    self.iterator-state++;
    return self;
  }
  // maybe could return number present
  method in?(object-t self, object-t element) -> boole-t {
    boole-t state = false;

    for (object-t element2 in self) {
      if ($equal?(element, element2)) {
        state = true;
        break;
      }
    }
    return state;
  }
  // reverse in place
  method reverse(object-t self) -> object-t {
    ssize-t head-offset = 0, tail-offset = self.count - 1;
    while (head-offset < tail-offset) {
      object-t head-element = self.elements[head-offset];
      self.elements[head-offset] = self.elements[tail-offset];
      self.elements[tail-offset] = head-element;
      head-offset++; tail-offset--;
    }
    self.iterator-state++;
    return self;
  }
  method remove-at(object-t self, ssize-t index) -> object-t {
    object-t element = self.elements[index];

    if (index + 1 < self.capacity)
      memmove(&self.elements[index],
              &self.elements[index + 1], cast(size-t)(self.size * (self.count - index - 1)));
    self.elements[self.capacity - 1] = self.fill-element;
    self.count--;
    self.capacity--; // dumb
    return element;
  }
  // should also have remove-all
  method remove(object-t self, object-t element) -> object-t {
    // element could be null
    // any/all elements could be null
    object-t object = null; // returns 'null' if element was not present

    for (ssize-t index = 0; index < self.count; index++) {
      if ($equal?(element, self.elements[index])) {
        remove-at(self, index);
        object = element;
      }
    }
    self.elements = cast(object-t*)dkt::alloc(self.size * self.capacity, self.elements); // dumb
    self.iterator-state++;
    return object;
  }
  method remove-first(object-t self) -> object-t {
    assert(0 != self.count);
    object-t element = self.elements[0];
    memmove(self.elements, self.elements + 1, cast(size-t)(self.size * (self.count - 1)));
    self.elements[self.count - 1] = self.fill-element;
    self.count--;
    return element;
  }
  method [[alias(remove-last)]] pop(object-t self) -> object-t;
  method remove-last(object-t self) -> object-t {
    assert(0 != self.count);
    object-t element = self.elements[self.count - 1];
    self.elements[self.count - 1] = self.fill-element;
    self.count--;
    return element;
  }
  method replace(object-t self, object-t object1, object-t object2) -> object-t {
    for (object-t forward-iterator = $forward-iterator(self);
         $next?(forward-iterator);
         $next(forward-iterator)) {
      if ($equal?(object1, $element(forward-iterator)))
        $set-element(forward-iterator, object2);
    }
    return object1;
  }
  //     method replace-first(object-t self, object-t element) -> object-t;
  //     method replace-last(object-t self, object-t element) -> object-t;

  method at(object-t self, ssize-t index, object-t default-result) -> object-t {
    object-t element = default-result;
    if (self.count > index) {
      element = self.elements[index];
      if (nullptr != default-result)
        assert(nullptr != element);
    }
    return element;
  }
  // should be auto-generated!!!
  method at(object-t self, object-t boxed-index, object-t default-result) -> object-t {
    ssize-t index = ssize::unbox(boxed-index);
    object-t result = $at(self, index, default-result);
    return result;
  }
  method at(object-t self, ssize-t index) -> object-t {
    object-t element = $at(self, index, cast(object-t)nullptr);
    if (nullptr == element)
      throw make(exception::klass, #msg : "oops");
    return element;
  }
  // should be auto-generated!!!
  method at(object-t self, object-t boxed-index) -> object-t {
    ssize-t index = ssize::unbox(boxed-index);
    object-t result = $at(self, index);
    return result;
  }
  method replace-at(object-t self, ssize-t index, object-t object) -> object-t {
    if (index >= self.capacity)
      throw make(exception::klass, #msg : "oops");

    object-t rtn = self.elements[index];
    self.elements[index] = object;

    if (self.count < index + 1)
      self.count = index + 1;
    return rtn;
  }
//method [[alias(size)]] ssize(object-t self, object-t element) -> ssize-t;
  method size(object-t self) -> ssize-t {
    return self.count;
  }
  method add-first(object-t self, object-t element) -> object-t {
    assert(nullptr != element);

    if (self.count == self.capacity) {
      self.capacity *= $resize-factor(klass-of(self));
      self.elements = cast(object-t*)dkt::alloc(self.size * self.capacity, self.elements);
    }
    memmove(self.elements + 1, self.elements, cast(size-t)(self.size * self.count));
    self.count++;
    self.elements[0] = element;
    self.iterator-state++;
    return element;
  }
  //     method add-at(object-t self, object-t element, ssize-t index) -> object-t;

  method [[alias(add-last)]] add(object-t self, object-t element) -> object-t;
  method [[alias(add-last)]] push(object-t self, object-t element) -> object-t;
  method add-last(object-t self, object-t element) -> object-t {
    assert(nullptr != element);

    if (self.count == self.capacity) {
      self.capacity *= $resize-factor(klass-of(self));
      self.elements = cast(object-t*)dkt::alloc(self.size * self.capacity, self.elements);
    }
    self.count++;
    self.elements[self.count - 1] = element;
    self.iterator-state++;
    return element;
  }
  method first(object-t self) -> object-t {
    assert(0 != self.count);
    return self.elements[0];
  }
  method [[alias(last)]] top(object-t self) -> object-t;
  method last(object-t self) -> object-t {
    assert(0 != self.count);
    return self.elements[self.count - 1];
  }
  method forward-iterator(object-t self) -> object-t {
    object-t forward-iterator = make(vector-forward-iterator::klass, #vector : self);
    return forward-iterator;
  }
  method write-slots(object-t self, object-t out) -> object-t {
    $write-slots(super, out);
    $write-slots-start(out, klass);

    $write-sequence-start(out, "elements");

    for (ssize-t index = 0; index < self.count; index++)
      $write-element-idref(out, self.elements[index], cast(str-t)nullptr);
    $write-sequence-end(out);

    $write-slots-end(out);
    return self;
  }
  static func next-index(object-t self, ssize-t index) -> ssize-t {
    //assert(index <= self.count);
    ssize-t result = index;
    if (result < self.count) {
      while (nullptr == self.elements[result]) {
        result++;
        if (result == self.count)
          break;
      }
    }
    //       printf("%s(%p, %zi): %zi/%zi\n", __func__, self, index, result, self.count);
    return result;
  }
  static func first-index(object-t self) -> ssize-t {
    ssize-t index = 0;
    ssize-t result = index;
    result = next-index(self, index);
    //       printf("%s(%p): %zi/%zi\n", __func__, self, result, self.count);
    return result;
  }
}
klass vector-forward-iterator {
  trait forward-iterator;

  slots {
    object-t vector;
    ssize-t count;
    ssize-t index;

    int64-t iterator-state;
  }
  static func check-iterator-state(object-t self) -> void {
    vector::slots-t& d = vector::unbox(self.vector);

    if (self.iterator-state != d.iterator-state)
      throw make(exception::klass, #msg : "oops");
    return;
  }
  method init(object-t self, object-t vector :) -> object-t {
    self = $init(super);
    assert(null != vector);
    vector::slots-t& a = vector::unbox(vector);
    self.vector =       vector;
    self.count = a.count;
    self.index = vector::first-index(self.vector);
    self.iterator-state = a.iterator-state;
    return self;
  }
  method first?(object-t self) -> boole-t {
    boole-t state;
    if (0 == self.index)
      state = true;
    else
      state = false;
    return state;
  }
  method set-element(object-t self, object-t element) -> object-t {
    $replace-at(self.vector, self.index, element);
    return self;
  }
  method next?(object-t self) -> boole-t {
    check-iterator-state(self);
    boole-t result;
    if (nullptr != $at(self.vector, self.index, cast(object-t)nullptr))
      result = true;
    else
      result = false;
    return result;
  }
  method next(object-t self) -> object-t {
    check-iterator-state(self);
    object-t element = nullptr;
    if ($next?(self)) {
      element = $element(self);
      self.index = vector::next-index(self.vector, self.index + 1);
    }
    //       printf("%s:%s(%p) = %p\n",
    //              "vector-forward-iterator", __func__, (ptr-t)self, (ptr-t)element);
    return element;
  }
  method element(object-t self) -> object-t {
    check-iterator-state(self);
    object-t element = nullptr;
    if ($next?(self)) {
      element = $at(self.vector, self.index);
      assert(nullptr != element);
    }
    return element; // returns nullptr on error
  }
}
