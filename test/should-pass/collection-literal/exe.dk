// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

#include <cstdint>

klass hashed-set;
klass hashed-table;
klass int32;
klass pair;
klass vector;

#define DEFAULT-SEQUENCE-KLASS vector::klass
#define DEFAULT-SET-KLASS      hashed-set::klass
#define DEFAULT-TABLE-KLASS    hashed-table::klass

int-t main()
{
  int32-t a = 0, b = 0, c = 0, d = 0;
  //object-t a = nullptr, b = nullptr, c = nullptr, d = nullptr;

//object-t x1 = #[a, b];
  object-t x1 = #[a, b];
//object-t x2 = make(DEFAULT-SEQUENCE-KLASS, #items : cast(object-t[]){ box(a), box(b), nullptr });

//object-t y1 = #{a, b};
  object-t y1 = #{a, b};
//object-t y2 = make(DEFAULT-SET-KLASS, #items : cast(object-t[]){ box(a), box(b), nullptr });

//object-t z1 = #{a : b, c : d};
  object-t z1 = #{a : b, c : d};
//object-t z2 = make(DEFAULT-TABLE-KLASS, #items : cast(object-t[]){ pair::box({box(a), box(b)}), pair::box({box(c), box(d)}), nullptr });

//x1 = #[];
  x1 = #[];
//x2 = make(DEFAULT-SEQUENCE-KLASS);

//y1 = #{};
  y1 = #{};
//y2 = make(DEFAULT-SET-KLASS);

//z1 = #{:};
  z1 = #{:};
//z2 = make(DEFAULT-TABLE-KLASS);

  USE(x1);
//USE(x2);
  USE(y1);
//USE(y2);
  USE(z1);
//USE(z2);

  return 0;
}
