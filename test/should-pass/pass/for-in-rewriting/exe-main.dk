// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

klass iter-pair;
klass pair;
klass sequence;
klass sorted-table;
klass string;
klass vector;

int-t main()
{
  object-t sequence = make(vector::klass);
  $add-last(sequence, #"mother");
  $add-last(sequence, #"father");

//for (object-t element in sequence)
//  printf("%p\n", cast(void*)element);

  for (object-t element in sequence)
    printf("%p\n", cast(void*)element);

  // should rewrite to

//for (iter-pair::slots-t _pair = $iter-pair(sequence); object-t element = _pair.next(_pair.iter); /**/)
//  printf("%p\n", cast(void*)element);

//---

  object-t table = make(sorted-table::klass);
  $add(table, #"mother", #"MOTHER");
  $add(table, #"father", #"FATHER");
  // ...

//for (pair-t* pair in table)
//  printf("%p: %p\n", cast(void*)pair->first, cast(void*)pair->last);

  for (pair-t* pair in table)
    printf("%p: %p\n", cast(void*)pair->first, cast(void*)pair->last);

  // should rewrite to

//for (iter_pair_t _iter_pair = $iter_pair(table); object_t _element_ = _iter_pair.next(_iter_pair.iter); /**/)
//  { pair_t* pair = pair::unbox(_element_); printf("%p: %p\n", cast(void*)pair->first, cast(void*)pair->last); }

  return 0;
}
