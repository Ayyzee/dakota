// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

klass autorelease-pool;

klass my-object
{
  method retain(object-t self) -> object-t {
    printf("%s:%s(%p)\n", __klass__, __method__->name, (void*)self);
    return $retain(super);
  }

  method autorelease(object-t self) -> object-t {
    printf("%s:%s(%p)\n", __klass__, __method__->name, (void*)self);
    return $autorelease(super);
  }

  method release(object-t self) -> object-t {
    printf("%s:%s(%p)\n", __klass__, __method__->name, (void*)self);
    return $release(super);
  }

  method dealloc(object-t self) -> object-t {
    printf("%s:%s(%p)\n", __klass__, __method__->name, (void*)self);
    return $dealloc(super);
  }
}

int-t main() {
  object-t s = make(my-object::klass);
  uint32-t c = 2;

  object-t pool = make(autorelease-pool::klass);

  for (uint32-t i = 0; i < c; i++)
    $retain(s);
  printf("---\n");

  for (uint32-t i = 0; i < c + 1; i++)
    $autorelease(s);
  printf("---\n");

  $release(pool);

  return 0;
}
