// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

klass my-autorelease-pool
{
  superklass autorelease-pool;

  method object-t release(object-t self)
  {
    printf("%s:%s(%p)\n", __klass__, __method__, (void*)self);
    return $release(super);
  }

  method object-t dealloc(object-t self)
  {
    printf("%s:%s(%p)\n", __klass__, __method__, (void*)self);
    return $dealloc(super);
  }
}

klass my-object
{
  method object-t retain(object-t self)
  {
    printf("%s:%s(%p)\n", __klass__, __method__, (void*)self);
    return $retain(super);
  }

  method object-t release(object-t self)
  {
    printf("%s:%s(%p)\n", __klass__, __method__, (void*)self);
    return $release(super);
  }

  method object-t dealloc(object-t self)
  {
    printf("%s:%s(%p)\n", __klass__, __method__, (void*)self);
    return $dealloc(super);
  }
}

int-t main()
{
  object-t s = make(my-object::klass);
  uint32-t c = 2;

  object-t pool = make(my-autorelease-pool::klass);

  for (uint32-t i = 0; i < c; i++)
    $retain(s);
  printf("---\n");

  for (uint32-t i = 0; i < c + 1; i++)
    $autorelease(s);
  printf("---\n");

  $release(pool);

  return 0;
}
