// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

klass thing {
  // user authored
  method empty?(object-t self) -> boole-t {
    boole-t result = false; // hackhack
    return result;
  }
  method empty!(object-t self) -> object-t {
    // hackhack
    return self;
  }
  // could be auto-generated if empty!() is defined
  // could be implemented as a generic rather than a method
  method empty(object-t self) -> object-t {
    //object-t result = $copy(self);
    //$empty!(result);
    object-t result = null;
    return result;
  }
}
klass other-thing {
  slots {
    int32-t count;
  }
  method count(object-t self) -> int32-t {
    int32-t count = self.count;
    return count;
  }
  method set-count(object-t self, int32-t count) -> object-t {
    self.count = count;
    return self;
  }
}

int-t main() {
  object-t t1 = make(thing::klass);
  
  if (!$empty?(t1))
    ;
  
  object-t t2 = $empty(t1);

  $empty!(t1);

  //

  object-t o = make(other-thing::klass);

  $set-count(o, 7);

  USE(t2);
  return 0;
}
