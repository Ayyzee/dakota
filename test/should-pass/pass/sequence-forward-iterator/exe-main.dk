// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

#include <stdio.h>
#include <assert.h>

klass deque;
klass vector;
klass uint32;

static void check-for(object-t collection) {
  printf("%i[", $size(collection));
  char8-t const* delim = "";
  for (object-t iter = $forward-iterator(collection);
       $next?(iter);
       $next(iter)) {
    object-t e = $element(iter);
    printf("%s%i", delim, *uint32::unbox(e));
    delim = ",";
  }
  printf("]");
  return;
}

static void check-for-each(object-t collection) {
  printf("%i[", $size(collection));
  char8-t const* delim = "";
  for (object-t e in collection) {
    printf("%s%i", delim, *uint32::unbox(e));
    delim = ",";
  }
  printf("]");
  return;
}

static const uint32-t count = 9;

static void check(object-t klass, object-t (*add)(object-t, object-t), void (*check-for-func)(object-t)) {
  object-t c = make(klass);
  char8-t const* delim = "";

  for (uint32-t i = 2; i < count; i += 3) {
    printf("%s", delim);
    delim = ", ";
    check-for-func(c);
    add(c, uint32::box(i));
    check-for-func(c);
  }
  printf("\n");
  return;
}

static void check(object-t klass, object-t (*add)(object-t, object-t)) {
  check(klass, add, check-for-each);
  check(klass, add, check-for);
  return;
}

int-t main() {
  check(vector::klass, $add-last);
  check(deque::klass,  $add-last);

  return 0;
}

// can remove add-last() as argument
