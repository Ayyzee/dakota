// -*- mode: Dakota; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: nil -*-

klass output-stream;

trait t1
{
  method f1(object-t self) -> object-t {
    symbol-t klass-name = name-of(klass-of(self));
    $print-format(std-output, "%s|%s:%s(%s)\n", klass-name, __klass__, __method__->name, __method__->parameter-types);
    return self;
  }
}

trait t1
{
  method f2(object-t self) -> object-t {
    symbol-t klass-name = name-of(klass-of(self));
    $print-format(std-output, "%s|%s:%s(%s)\n", klass-name, __klass__, __method__->name, __method__->parameter-types);
    return self;
  }
}

klass k1
{
  trait t1;
}

trait t2
{
  method f2(object-t self) -> object-t {
    symbol-t klass-name = name-of(klass-of(self));
    $print-format(std-output, "%s|%s:%s(%s)\n", klass-name, __klass__, __method__->name, __method__->parameter-types);
    return self;
  }
}

trait t3
{
  method f2(object-t self) -> object-t {
    symbol-t klass-name = name-of(klass-of(self));
    $print-format(std-output, "%s|%s:%s(%s)\n", klass-name, __klass__, __method__->name, __method__->parameter-types);
    return self;
  }
  method f3(object-t self) -> object-t {
    symbol-t klass-name = name-of(klass-of(self));
    $print-format(std-output, "%s|%s:%s(%s)\n", klass-name, __klass__, __method__->name, __method__->parameter-types);
    return self;
  }
}

klass k2
{
  trait t2;
  trait t3;
}


klass k3
{
  trait t1;
  trait t2;
  trait t3;
}

int-t main() {
  {
  object-t o = make(k1::klass);
  $f1(o);
  $f2(o);
  }

  {
  object-t o = make(k2::klass);
  $f2(o);
  }

  {
  object-t o = make(k3::klass);
  $f1(o);
  $f2(o);
  $f3(o);
  }

  return 0;
}
